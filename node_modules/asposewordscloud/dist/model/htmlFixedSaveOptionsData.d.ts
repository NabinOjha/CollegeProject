import { AttributeInfo } from '../internal/attributeInfo';
import { FixedPageSaveOptionsData } from './fixedPageSaveOptionsData';
import { MetafileRenderingOptionsData } from './metafileRenderingOptionsData';
export declare const importsMapHtmlFixedSaveOptionsData: {
    FixedPageSaveOptionsData: typeof FixedPageSaveOptionsData;
    MetafileRenderingOptionsData: typeof MetafileRenderingOptionsData;
};
/**
 * container class for fixed html save options.
 */
export declare class HtmlFixedSaveOptionsData extends FixedPageSaveOptionsData {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets specifies prefix which is added to all class names in style.css file. Default value is \"aw\".
     */
    cssClassNamesPrefix: string;
    /**
     * Gets or sets encoding.
     */
    encoding: string;
    /**
     * Gets or sets specifies whether the CSS (Cascading Style Sheet) should be embedded into Html document.
     */
    exportEmbeddedCss: boolean;
    /**
     * Gets or sets specifies whether fonts should be embedded into Html document in Base64 format.
     */
    exportEmbeddedFonts: boolean;
    /**
     * Gets or sets specifies whether images should be embedded into Html document in Base64 format.
     */
    exportEmbeddedImages: boolean;
    /**
     * Gets or sets indication of whether form fields are exported as interactive items (as 'input' tag) rather than converted to text or graphics.
     */
    exportFormFields: boolean;
    /**
     * Gets or sets specifies export format of fonts.
     */
    fontFormat: string;
    /**
     * Gets or sets specifies the horizontal alignment of pages in an HTML document. Default value is HtmlFixedHorizontalPageAlignment.Center.
     */
    pageHorizontalAlignment: string;
    /**
     * Gets or sets specifies the margins around pages in an HTML document. The margins value is measured in points and should be equal to or greater than 0. Default value is 10 points.
     */
    pageMargins: number;
    /**
     * Gets or sets specifies the physical folder where resources are saved when exporting a document.
     */
    resourcesFolder: string;
    /**
     * Gets or sets specifies the name of the folder used to construct resource URIs.
     */
    resourcesFolderAlias: string;
    /**
     * Gets or sets flag indicates whether \"@font-face\" CSS rules should be placed into a separate file \"fontFaces.css\" when a document is being saved with external stylesheet (that is, when Aspose.Words.Saving.HtmlFixedSaveOptions.ExportEmbeddedCss is false). Default value is false, all CSS rules are written into single file \"styles.css\".
     */
    saveFontFaceCssSeparately: boolean;
    /**
     * Gets or sets specifies whether border around pages should be shown.
     */
    showPageBorder: boolean;
    /**
     * Gets or sets flag indicates whether fonts from target machine must be used to display the document. If this flag is set to true, Aspose.Words.Saving.HtmlFixedSaveOptions.FontFormat and Aspose.Words.Saving.HtmlFixedSaveOptions.ExportEmbeddedFonts properties do not have effect, also Aspose.Words.Saving.HtmlFixedSaveOptions.ResourceSavingCallback is not fired for fonts. Default is false.
     */
    useTargetMachineFonts: boolean;
    constructor(init?: Partial<HtmlFixedSaveOptionsData>);
}
