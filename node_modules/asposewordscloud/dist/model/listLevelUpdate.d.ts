import { AttributeInfo } from '../internal/attributeInfo';
export declare const importsMapListLevelUpdate: {};
/**
 * Represents a document list levels.
 */
export declare class ListLevelUpdate {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets returns or sets the starting number for this list level.
     */
    startAt: number;
    /**
     * Gets or sets returns or sets the number style for this list level.
     */
    numberStyle: ListLevelUpdate.NumberStyleEnum;
    /**
     * Gets or sets returns or sets the number format for the list level.
     */
    numberFormat: string;
    /**
     * Gets or sets the justification of the actual number of the list item.
     */
    alignment: ListLevelUpdate.AlignmentEnum;
    /**
     * Gets or sets a value indicating whether true if the level turns all inherited numbers to Arabic, false if it preserves their number style.
     */
    isLegal: boolean;
    /**
     * Gets or sets or returns the list level that must appear before the specified list level restarts numbering.
     */
    restartAfterLevel: number;
    /**
     * Gets or sets returns or sets the character inserted after the number for the list level.
     */
    trailingCharacter: ListLevelUpdate.TrailingCharacterEnum;
    /**
     * Gets or sets returns or sets the tab position (in points) for the list level.
     */
    tabPosition: number;
    /**
     * Gets or sets returns or sets the position (in points) of the number or bullet for the list level.
     */
    numberPosition: number;
    /**
     * Gets or sets returns or sets the position (in points) for the second line of wrapping text for the list level.
     */
    textPosition: number;
    constructor(init?: Partial<ListLevelUpdate>);
}
/**
 * Enums for ListLevelUpdate
 */
export declare namespace ListLevelUpdate {
    enum NumberStyleEnum {
        Arabic,
        UppercaseRoman,
        LowercaseRoman,
        UppercaseLetter,
        LowercaseLetter,
        Ordinal,
        Number,
        OrdinalText,
        Hex,
        ChicagoManual,
        Kanji,
        KanjiDigit,
        AiueoHalfWidth,
        IrohaHalfWidth,
        ArabicFullWidth,
        ArabicHalfWidth,
        KanjiTraditional,
        KanjiTraditional2,
        NumberInCircle,
        DecimalFullWidth,
        Aiueo,
        Iroha,
        LeadingZero,
        Bullet,
        Ganada,
        Chosung,
        GB1,
        GB2,
        GB3,
        GB4,
        Zodiac1,
        Zodiac2,
        Zodiac3,
        TradChinNum1,
        TradChinNum2,
        TradChinNum3,
        TradChinNum4,
        SimpChinNum1,
        SimpChinNum2,
        SimpChinNum3,
        SimpChinNum4,
        HanjaRead,
        HanjaReadDigit,
        Hangul,
        Hanja,
        Hebrew1,
        Arabic1,
        Hebrew2,
        Arabic2,
        HindiLetter1,
        HindiLetter2,
        HindiArabic,
        HindiCardinalText,
        ThaiLetter,
        ThaiArabic,
        ThaiCardinalText,
        VietCardinalText,
        NumberInDash,
        LowercaseRussian,
        UppercaseRussian,
        None,
        Custom
    }
    enum AlignmentEnum {
        Left,
        Center,
        Right
    }
    enum TrailingCharacterEnum {
        Tab,
        Space,
        Nothing
    }
}
