import { AttributeInfo } from '../internal/attributeInfo';
import { StringFormatData } from './stringFormatData';
export declare const importsMapGraphicsQualityOptionsData: {
    StringFormatData: typeof StringFormatData;
};
/**
 * Allows to specify additional System.Drawing.Graphics quality options.
 */
export declare class GraphicsQualityOptionsData {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets a value that specifies how composited images are drawn to this Graphics.
     */
    compositingMode: GraphicsQualityOptionsData.CompositingModeEnum;
    /**
     * Gets or sets the rendering quality of composited images drawn to this Graphics.
     */
    compositingQuality: GraphicsQualityOptionsData.CompositingQualityEnum;
    /**
     * Gets or sets the interpolation mode associated with this Graphics.
     */
    interpolationMode: GraphicsQualityOptionsData.InterpolationModeEnum;
    /**
     * Gets or sets the rendering quality for this Graphics.
     */
    smoothingMode: GraphicsQualityOptionsData.SmoothingModeEnum;
    /**
     * Gets or sets stringFormat.
     */
    stringFormat: StringFormatData;
    /**
     * Gets or sets the rendering mode for text associated with this Graphics.
     */
    textRenderingHint: GraphicsQualityOptionsData.TextRenderingHintEnum;
    constructor(init?: Partial<GraphicsQualityOptionsData>);
}
/**
 * Enums for GraphicsQualityOptionsData
 */
export declare namespace GraphicsQualityOptionsData {
    enum CompositingModeEnum {
        SourceOver,
        SourceCopy
    }
    enum CompositingQualityEnum {
        Default,
        HighSpeed,
        HighQuality,
        GammaCorrected,
        AssumeLinear,
        Invalid
    }
    enum InterpolationModeEnum {
        Default,
        Low,
        High,
        Bilinear,
        Bicubic,
        NearestNeighbor,
        HighQualityBilinear,
        HighQualityBicubic,
        Invalid
    }
    enum SmoothingModeEnum {
        Default,
        HighSpeed,
        HighQuality,
        None,
        AntiAlias,
        Invalid
    }
    enum TextRenderingHintEnum {
        SystemDefault,
        SingleBitPerPixelGridFit,
        SingleBitPerPixel,
        AntiAliasGridFit,
        AntiAlias,
        ClearTypeGridFit
    }
}
