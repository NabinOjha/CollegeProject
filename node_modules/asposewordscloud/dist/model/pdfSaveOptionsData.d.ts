import { AttributeInfo } from '../internal/attributeInfo';
import { DownsampleOptionsData } from './downsampleOptionsData';
import { FixedPageSaveOptionsData } from './fixedPageSaveOptionsData';
import { MetafileRenderingOptionsData } from './metafileRenderingOptionsData';
import { OutlineOptionsData } from './outlineOptionsData';
import { PdfDigitalSignatureDetailsData } from './pdfDigitalSignatureDetailsData';
import { PdfEncryptionDetailsData } from './pdfEncryptionDetailsData';
export declare const importsMapPdfSaveOptionsData: {
    DownsampleOptionsData: typeof DownsampleOptionsData;
    FixedPageSaveOptionsData: typeof FixedPageSaveOptionsData;
    MetafileRenderingOptionsData: typeof MetafileRenderingOptionsData;
    OutlineOptionsData: typeof OutlineOptionsData;
    PdfDigitalSignatureDetailsData: typeof PdfDigitalSignatureDetailsData;
    PdfEncryptionDetailsData: typeof PdfEncryptionDetailsData;
};
/**
 * container class for pdf save options.
 */
export declare class PdfSaveOptionsData extends FixedPageSaveOptionsData {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets specifies the PDF standards compliance level for output documents.
     */
    compliance: string;
    /**
     * Gets or sets specifies whether to convert footnote/endnote references in main text story into active hyperlinks. When clicked the hyperlink will lead to the corresponding footnote/endnote. Default is false.
     */
    createNoteHyperlinks: boolean;
    /**
     * Gets or sets a value determining the way CustomDocumentProperties are exported to PDF file. Default value is None.
     */
    customPropertiesExport: string;
    /**
     * Gets or sets digitalSignatureDetails.
     */
    digitalSignatureDetails: PdfDigitalSignatureDetailsData;
    /**
     * Gets or sets a flag specifying whether the windowâ€™s title bar should display the document title taken from the Title entry of the document information dictionary.
     */
    displayDocTitle: boolean;
    /**
     * Gets or sets downsampleOptions.
     */
    downsampleOptions: DownsampleOptionsData;
    /**
     * Gets or sets controls how fonts are embedded into the resulting PDF documents.
     */
    embedFullFonts: boolean;
    /**
     * Gets or sets encryptionDetails.
     */
    encryptionDetails: PdfEncryptionDetailsData;
    /**
     * Gets or sets a flag specifying whether URI should be escaped before writing.
     */
    escapeUri: boolean;
    /**
     * Gets or sets determines whether or not to export document structure.
     */
    exportDocumentStructure: boolean;
    /**
     * Gets or sets specifies the font embedding mode.
     */
    fontEmbeddingMode: string;
    /**
     * Gets or sets determines how bookmarks in headers/footers are exported. The default value is Aspose.Words.Saving.HeaderFooterBookmarksExportMode.All.
     */
    headerFooterBookmarksExportMode: PdfSaveOptionsData.HeaderFooterBookmarksExportModeEnum;
    /**
     * Gets or sets specifies how the color space will be selected for the images in PDF document.
     */
    imageColorSpaceExportMode: string;
    /**
     * Gets or sets specifies compression type to be used for all images in the document.
     */
    imageCompression: string;
    /**
     * Gets or sets a flag indicating whether image interpolation shall be performed by a conforming reader. When false is specified, the flag is not written to the output document and the default behaviour of reader is used instead.
     */
    interpolateImages: boolean;
    /**
     * Gets or sets determines whether hyperlinks in the output Pdf document are forced to be opened in a new window (or tab) of a browser.
     */
    openHyperlinksInNewWindow: boolean;
    /**
     * Gets or sets outlineOptions.
     */
    outlineOptions: OutlineOptionsData;
    /**
     * Gets or sets specifies how the PDF document should be displayed when opened in the PDF reader.
     */
    pageMode: string;
    /**
     * Gets or sets a value determining whether or not to preblend transparent images with black background color.
     */
    preblendImages: boolean;
    /**
     * Gets or sets specifies whether to preserve Microsoft Word form fields as form fields in PDF or convert them to text.
     */
    preserveFormFields: boolean;
    /**
     * Gets or sets specifies compression type to be used for all textual content in the document.
     */
    textCompression: string;
    /**
     * Gets or sets determines whether the document should be saved using a booklet printing layout.
     */
    useBookFoldPrintingSettings: boolean;
    /**
     * Gets or sets determines whether or not to substitute TrueType fonts Arial, Times New Roman, Courier New and Symbol with core PDF Type 1 fonts.
     */
    useCoreFonts: boolean;
    /**
     * Gets or sets determines what type of zoom should be applied when a document is opened with a PDF viewer.
     */
    zoomBehavior: string;
    /**
     * Gets or sets determines zoom factor (in percentages) for a document.
     */
    zoomFactor: number;
    constructor(init?: Partial<PdfSaveOptionsData>);
}
/**
 * Enums for PdfSaveOptionsData
 */
export declare namespace PdfSaveOptionsData {
    enum HeaderFooterBookmarksExportModeEnum {
        None,
        First,
        All
    }
}
