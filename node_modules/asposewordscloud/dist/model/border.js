"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const linkElement_1 = require("./linkElement");
const wordsApiLink_1 = require("./wordsApiLink");
const xmlColor_1 = require("./xmlColor");
exports.importsMapBorder = {
    LinkElement: linkElement_1.LinkElement,
    WordsApiLink: wordsApiLink_1.WordsApiLink,
    XmlColor: xmlColor_1.XmlColor,
};
/**
 * Represents a border of an object.
 */
class Border extends linkElement_1.LinkElement {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Border.attributeTypeMap);
    }
}
exports.Border = Border;
/**
 * Attribute type map
 */
Border.attributeTypeMap = [
    {
        name: "borderType",
        baseName: "BorderType",
        type: "Border.BorderTypeEnum",
    },
    {
        name: "color",
        baseName: "Color",
        type: "XmlColor",
    },
    {
        name: "distanceFromText",
        baseName: "DistanceFromText",
        type: "number",
    },
    {
        name: "lineStyle",
        baseName: "LineStyle",
        type: "Border.LineStyleEnum",
    },
    {
        name: "lineWidth",
        baseName: "LineWidth",
        type: "number",
    },
    {
        name: "shadow",
        baseName: "Shadow",
        type: "boolean",
    }
];
/**
 * Enums for Border
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (Border) {
    let BorderTypeEnum;
    (function (BorderTypeEnum) {
        BorderTypeEnum[BorderTypeEnum["Bottom"] = 'Bottom'] = "Bottom";
        BorderTypeEnum[BorderTypeEnum["Left"] = 'Left'] = "Left";
        BorderTypeEnum[BorderTypeEnum["Right"] = 'Right'] = "Right";
        BorderTypeEnum[BorderTypeEnum["Top"] = 'Top'] = "Top";
        BorderTypeEnum[BorderTypeEnum["Horizontal"] = 'Horizontal'] = "Horizontal";
        BorderTypeEnum[BorderTypeEnum["Vertical"] = 'Vertical'] = "Vertical";
        BorderTypeEnum[BorderTypeEnum["DiagonalDown"] = 'DiagonalDown'] = "DiagonalDown";
        BorderTypeEnum[BorderTypeEnum["DiagonalUp"] = 'DiagonalUp'] = "DiagonalUp";
        BorderTypeEnum[BorderTypeEnum["None"] = 'None'] = "None";
    })(BorderTypeEnum = Border.BorderTypeEnum || (Border.BorderTypeEnum = {}));
    let LineStyleEnum;
    (function (LineStyleEnum) {
        LineStyleEnum[LineStyleEnum["None"] = 'None'] = "None";
        LineStyleEnum[LineStyleEnum["Single"] = 'Single'] = "Single";
        LineStyleEnum[LineStyleEnum["Thick"] = 'Thick'] = "Thick";
        LineStyleEnum[LineStyleEnum["Double"] = 'Double'] = "Double";
        LineStyleEnum[LineStyleEnum["Hairline"] = 'Hairline'] = "Hairline";
        LineStyleEnum[LineStyleEnum["Dot"] = 'Dot'] = "Dot";
        LineStyleEnum[LineStyleEnum["DashLargeGap"] = 'DashLargeGap'] = "DashLargeGap";
        LineStyleEnum[LineStyleEnum["DotDash"] = 'DotDash'] = "DotDash";
        LineStyleEnum[LineStyleEnum["DotDotDash"] = 'DotDotDash'] = "DotDotDash";
        LineStyleEnum[LineStyleEnum["Triple"] = 'Triple'] = "Triple";
        LineStyleEnum[LineStyleEnum["ThinThickSmallGap"] = 'ThinThickSmallGap'] = "ThinThickSmallGap";
        LineStyleEnum[LineStyleEnum["ThickThinSmallGap"] = 'ThickThinSmallGap'] = "ThickThinSmallGap";
        LineStyleEnum[LineStyleEnum["ThinThickThinSmallGap"] = 'ThinThickThinSmallGap'] = "ThinThickThinSmallGap";
        LineStyleEnum[LineStyleEnum["ThinThickMediumGap"] = 'ThinThickMediumGap'] = "ThinThickMediumGap";
        LineStyleEnum[LineStyleEnum["ThickThinMediumGap"] = 'ThickThinMediumGap'] = "ThickThinMediumGap";
        LineStyleEnum[LineStyleEnum["ThinThickThinMediumGap"] = 'ThinThickThinMediumGap'] = "ThinThickThinMediumGap";
        LineStyleEnum[LineStyleEnum["ThinThickLargeGap"] = 'ThinThickLargeGap'] = "ThinThickLargeGap";
        LineStyleEnum[LineStyleEnum["ThickThinLargeGap"] = 'ThickThinLargeGap'] = "ThickThinLargeGap";
        LineStyleEnum[LineStyleEnum["ThinThickThinLargeGap"] = 'ThinThickThinLargeGap'] = "ThinThickThinLargeGap";
        LineStyleEnum[LineStyleEnum["Wave"] = 'Wave'] = "Wave";
        LineStyleEnum[LineStyleEnum["DoubleWave"] = 'DoubleWave'] = "DoubleWave";
        LineStyleEnum[LineStyleEnum["DashSmallGap"] = 'DashSmallGap'] = "DashSmallGap";
        LineStyleEnum[LineStyleEnum["DashDotStroker"] = 'DashDotStroker'] = "DashDotStroker";
        LineStyleEnum[LineStyleEnum["Emboss3D"] = 'Emboss3D'] = "Emboss3D";
        LineStyleEnum[LineStyleEnum["Engrave3D"] = 'Engrave3D'] = "Engrave3D";
        LineStyleEnum[LineStyleEnum["Outset"] = 'Outset'] = "Outset";
        LineStyleEnum[LineStyleEnum["Inset"] = 'Inset'] = "Inset";
    })(LineStyleEnum = Border.LineStyleEnum || (Border.LineStyleEnum = {}));
})(Border = exports.Border || (exports.Border = {}));
// tslint:enable:quotemark
