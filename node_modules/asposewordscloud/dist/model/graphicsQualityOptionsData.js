"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const stringFormatData_1 = require("./stringFormatData");
exports.importsMapGraphicsQualityOptionsData = {
    StringFormatData: stringFormatData_1.StringFormatData,
};
/**
 * Allows to specify additional System.Drawing.Graphics quality options.
 */
class GraphicsQualityOptionsData {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return GraphicsQualityOptionsData.attributeTypeMap;
    }
}
exports.GraphicsQualityOptionsData = GraphicsQualityOptionsData;
/**
 * Attribute type map
 */
GraphicsQualityOptionsData.attributeTypeMap = [
    {
        name: "compositingMode",
        baseName: "CompositingMode",
        type: "GraphicsQualityOptionsData.CompositingModeEnum",
    },
    {
        name: "compositingQuality",
        baseName: "CompositingQuality",
        type: "GraphicsQualityOptionsData.CompositingQualityEnum",
    },
    {
        name: "interpolationMode",
        baseName: "InterpolationMode",
        type: "GraphicsQualityOptionsData.InterpolationModeEnum",
    },
    {
        name: "smoothingMode",
        baseName: "SmoothingMode",
        type: "GraphicsQualityOptionsData.SmoothingModeEnum",
    },
    {
        name: "stringFormat",
        baseName: "StringFormat",
        type: "StringFormatData",
    },
    {
        name: "textRenderingHint",
        baseName: "TextRenderingHint",
        type: "GraphicsQualityOptionsData.TextRenderingHintEnum",
    }
];
/**
 * Enums for GraphicsQualityOptionsData
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (GraphicsQualityOptionsData) {
    let CompositingModeEnum;
    (function (CompositingModeEnum) {
        CompositingModeEnum[CompositingModeEnum["SourceOver"] = 'SourceOver'] = "SourceOver";
        CompositingModeEnum[CompositingModeEnum["SourceCopy"] = 'SourceCopy'] = "SourceCopy";
    })(CompositingModeEnum = GraphicsQualityOptionsData.CompositingModeEnum || (GraphicsQualityOptionsData.CompositingModeEnum = {}));
    let CompositingQualityEnum;
    (function (CompositingQualityEnum) {
        CompositingQualityEnum[CompositingQualityEnum["Default"] = 'Default'] = "Default";
        CompositingQualityEnum[CompositingQualityEnum["HighSpeed"] = 'HighSpeed'] = "HighSpeed";
        CompositingQualityEnum[CompositingQualityEnum["HighQuality"] = 'HighQuality'] = "HighQuality";
        CompositingQualityEnum[CompositingQualityEnum["GammaCorrected"] = 'GammaCorrected'] = "GammaCorrected";
        CompositingQualityEnum[CompositingQualityEnum["AssumeLinear"] = 'AssumeLinear'] = "AssumeLinear";
        CompositingQualityEnum[CompositingQualityEnum["Invalid"] = 'Invalid'] = "Invalid";
    })(CompositingQualityEnum = GraphicsQualityOptionsData.CompositingQualityEnum || (GraphicsQualityOptionsData.CompositingQualityEnum = {}));
    let InterpolationModeEnum;
    (function (InterpolationModeEnum) {
        InterpolationModeEnum[InterpolationModeEnum["Default"] = 'Default'] = "Default";
        InterpolationModeEnum[InterpolationModeEnum["Low"] = 'Low'] = "Low";
        InterpolationModeEnum[InterpolationModeEnum["High"] = 'High'] = "High";
        InterpolationModeEnum[InterpolationModeEnum["Bilinear"] = 'Bilinear'] = "Bilinear";
        InterpolationModeEnum[InterpolationModeEnum["Bicubic"] = 'Bicubic'] = "Bicubic";
        InterpolationModeEnum[InterpolationModeEnum["NearestNeighbor"] = 'NearestNeighbor'] = "NearestNeighbor";
        InterpolationModeEnum[InterpolationModeEnum["HighQualityBilinear"] = 'HighQualityBilinear'] = "HighQualityBilinear";
        InterpolationModeEnum[InterpolationModeEnum["HighQualityBicubic"] = 'HighQualityBicubic'] = "HighQualityBicubic";
        InterpolationModeEnum[InterpolationModeEnum["Invalid"] = 'Invalid'] = "Invalid";
    })(InterpolationModeEnum = GraphicsQualityOptionsData.InterpolationModeEnum || (GraphicsQualityOptionsData.InterpolationModeEnum = {}));
    let SmoothingModeEnum;
    (function (SmoothingModeEnum) {
        SmoothingModeEnum[SmoothingModeEnum["Default"] = 'Default'] = "Default";
        SmoothingModeEnum[SmoothingModeEnum["HighSpeed"] = 'HighSpeed'] = "HighSpeed";
        SmoothingModeEnum[SmoothingModeEnum["HighQuality"] = 'HighQuality'] = "HighQuality";
        SmoothingModeEnum[SmoothingModeEnum["None"] = 'None'] = "None";
        SmoothingModeEnum[SmoothingModeEnum["AntiAlias"] = 'AntiAlias'] = "AntiAlias";
        SmoothingModeEnum[SmoothingModeEnum["Invalid"] = 'Invalid'] = "Invalid";
    })(SmoothingModeEnum = GraphicsQualityOptionsData.SmoothingModeEnum || (GraphicsQualityOptionsData.SmoothingModeEnum = {}));
    let TextRenderingHintEnum;
    (function (TextRenderingHintEnum) {
        TextRenderingHintEnum[TextRenderingHintEnum["SystemDefault"] = 'SystemDefault'] = "SystemDefault";
        TextRenderingHintEnum[TextRenderingHintEnum["SingleBitPerPixelGridFit"] = 'SingleBitPerPixelGridFit'] = "SingleBitPerPixelGridFit";
        TextRenderingHintEnum[TextRenderingHintEnum["SingleBitPerPixel"] = 'SingleBitPerPixel'] = "SingleBitPerPixel";
        TextRenderingHintEnum[TextRenderingHintEnum["AntiAliasGridFit"] = 'AntiAliasGridFit'] = "AntiAliasGridFit";
        TextRenderingHintEnum[TextRenderingHintEnum["AntiAlias"] = 'AntiAlias'] = "AntiAlias";
        TextRenderingHintEnum[TextRenderingHintEnum["ClearTypeGridFit"] = 'ClearTypeGridFit'] = "ClearTypeGridFit";
    })(TextRenderingHintEnum = GraphicsQualityOptionsData.TextRenderingHintEnum || (GraphicsQualityOptionsData.TextRenderingHintEnum = {}));
})(GraphicsQualityOptionsData = exports.GraphicsQualityOptionsData || (exports.GraphicsQualityOptionsData = {}));
// tslint:enable:quotemark
