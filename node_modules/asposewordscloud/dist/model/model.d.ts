/// <reference types="node" />
import { Readable } from "stream";
import { IncomingMessage } from 'http';
import * as importedApiError from './apiError';
import * as importedAvailableFontsResponse from './availableFontsResponse';
import * as importedBmpSaveOptionsData from './bmpSaveOptionsData';
import * as importedBody from './body';
import * as importedBody1 from './body1';
import * as importedBody10 from './body10';
import * as importedBody11 from './body11';
import * as importedBody2 from './body2';
import * as importedBody3 from './body3';
import * as importedBody4 from './body4';
import * as importedBody5 from './body5';
import * as importedBody6 from './body6';
import * as importedBody7 from './body7';
import * as importedBody8 from './body8';
import * as importedBody9 from './body9';
import * as importedBookmark from './bookmark';
import * as importedBookmarkData from './bookmarkData';
import * as importedBookmarkResponse from './bookmarkResponse';
import * as importedBookmarks from './bookmarks';
import * as importedBookmarksOutlineLevelData from './bookmarksOutlineLevelData';
import * as importedBookmarksResponse from './bookmarksResponse';
import * as importedBorder from './border';
import * as importedBorderResponse from './borderResponse';
import * as importedBordersCollection from './bordersCollection';
import * as importedBordersResponse from './bordersResponse';
import * as importedClassificationResponse from './classificationResponse';
import * as importedClassificationResult from './classificationResult';
import * as importedComment from './comment';
import * as importedCommentBase from './commentBase';
import * as importedCommentInsert from './commentInsert';
import * as importedCommentLink from './commentLink';
import * as importedCommentResponse from './commentResponse';
import * as importedCommentUpdate from './commentUpdate';
import * as importedCommentsCollection from './commentsCollection';
import * as importedCommentsResponse from './commentsResponse';
import * as importedCompareData from './compareData';
import * as importedCompareOptions from './compareOptions';
import * as importedCsvDataLoadOptions from './csvDataLoadOptions';
import * as importedDocSaveOptionsData from './docSaveOptionsData';
import * as importedDocument from './document';
import * as importedDocumentEntry from './documentEntry';
import * as importedDocumentEntryList from './documentEntryList';
import * as importedDocumentPosition from './documentPosition';
import * as importedDocumentProperties from './documentProperties';
import * as importedDocumentPropertiesResponse from './documentPropertiesResponse';
import * as importedDocumentProperty from './documentProperty';
import * as importedDocumentPropertyBase from './documentPropertyBase';
import * as importedDocumentPropertyCreateOrUpdate from './documentPropertyCreateOrUpdate';
import * as importedDocumentPropertyResponse from './documentPropertyResponse';
import * as importedDocumentResponse from './documentResponse';
import * as importedDocumentStatData from './documentStatData';
import * as importedDownsampleOptionsData from './downsampleOptionsData';
import * as importedDrawingObject from './drawingObject';
import * as importedDrawingObjectCollection from './drawingObjectCollection';
import * as importedDrawingObjectInsert from './drawingObjectInsert';
import * as importedDrawingObjectLink from './drawingObjectLink';
import * as importedDrawingObjectResponse from './drawingObjectResponse';
import * as importedDrawingObjectUpdate from './drawingObjectUpdate';
import * as importedDrawingObjectsResponse from './drawingObjectsResponse';
import * as importedEmfSaveOptionsData from './emfSaveOptionsData';
import * as importedEpubSaveOptionsData from './epubSaveOptionsData';
import * as importedErrorDetails from './errorDetails';
import * as importedField from './field';
import * as importedFieldBase from './fieldBase';
import * as importedFieldCollection from './fieldCollection';
import * as importedFieldInsert from './fieldInsert';
import * as importedFieldLink from './fieldLink';
import * as importedFieldNames from './fieldNames';
import * as importedFieldNamesResponse from './fieldNamesResponse';
import * as importedFieldResponse from './fieldResponse';
import * as importedFieldUpdate from './fieldUpdate';
import * as importedFieldsResponse from './fieldsResponse';
import * as importedFileLink from './fileLink';
import * as importedFilesList from './filesList';
import * as importedFilesUploadResult from './filesUploadResult';
import * as importedFixedPageSaveOptionsData from './fixedPageSaveOptionsData';
import * as importedFont from './font';
import * as importedFontInfo from './fontInfo';
import * as importedFontResponse from './fontResponse';
import * as importedFootnote from './footnote';
import * as importedFootnoteBase from './footnoteBase';
import * as importedFootnoteCollection from './footnoteCollection';
import * as importedFootnoteInsert from './footnoteInsert';
import * as importedFootnoteLink from './footnoteLink';
import * as importedFootnoteResponse from './footnoteResponse';
import * as importedFootnoteUpdate from './footnoteUpdate';
import * as importedFootnotesResponse from './footnotesResponse';
import * as importedFootnotesStatData from './footnotesStatData';
import * as importedFormField from './formField';
import * as importedFormFieldCheckbox from './formFieldCheckbox';
import * as importedFormFieldCollection from './formFieldCollection';
import * as importedFormFieldDropDown from './formFieldDropDown';
import * as importedFormFieldResponse from './formFieldResponse';
import * as importedFormFieldTextInput from './formFieldTextInput';
import * as importedFormFieldsResponse from './formFieldsResponse';
import * as importedGifSaveOptionsData from './gifSaveOptionsData';
import * as importedGraphicsQualityOptionsData from './graphicsQualityOptionsData';
import * as importedHeaderFooter from './headerFooter';
import * as importedHeaderFooterLink from './headerFooterLink';
import * as importedHeaderFooterLinkCollection from './headerFooterLinkCollection';
import * as importedHeaderFooterResponse from './headerFooterResponse';
import * as importedHeaderFootersResponse from './headerFootersResponse';
import * as importedHtmlFixedSaveOptionsData from './htmlFixedSaveOptionsData';
import * as importedHtmlSaveOptionsData from './htmlSaveOptionsData';
import * as importedHyperlink from './hyperlink';
import * as importedHyperlinkResponse from './hyperlinkResponse';
import * as importedHyperlinks from './hyperlinks';
import * as importedHyperlinksResponse from './hyperlinksResponse';
import * as importedImageSaveOptionsData from './imageSaveOptionsData';
import * as importedJpegSaveOptionsData from './jpegSaveOptionsData';
import * as importedLink from './link';
import * as importedLinkElement from './linkElement';
import * as importedListFormat from './listFormat';
import * as importedListFormatUpdate from './listFormatUpdate';
import * as importedListInfo from './listInfo';
import * as importedListInsert from './listInsert';
import * as importedListLevel from './listLevel';
import * as importedListLevelUpdate from './listLevelUpdate';
import * as importedListLevels from './listLevels';
import * as importedListResponse from './listResponse';
import * as importedListUpdate from './listUpdate';
import * as importedLists from './lists';
import * as importedListsResponse from './listsResponse';
import * as importedLoadWebDocumentData from './loadWebDocumentData';
import * as importedMetafileRenderingOptionsData from './metafileRenderingOptionsData';
import * as importedMhtmlSaveOptionsData from './mhtmlSaveOptionsData';
import * as importedModelError from './modelError';
import * as importedModificationOperationResult from './modificationOperationResult';
import * as importedNodeLink from './nodeLink';
import * as importedOdtSaveOptionsData from './odtSaveOptionsData';
import * as importedOfficeMathLink from './officeMathLink';
import * as importedOfficeMathObject from './officeMathObject';
import * as importedOfficeMathObjectResponse from './officeMathObjectResponse';
import * as importedOfficeMathObjectsCollection from './officeMathObjectsCollection';
import * as importedOfficeMathObjectsResponse from './officeMathObjectsResponse';
import * as importedOoxmlSaveOptionsData from './ooxmlSaveOptionsData';
import * as importedOutlineOptionsData from './outlineOptionsData';
import * as importedPageNumber from './pageNumber';
import * as importedPageSetup from './pageSetup';
import * as importedPageStatData from './pageStatData';
import * as importedParagraph from './paragraph';
import * as importedParagraphFormat from './paragraphFormat';
import * as importedParagraphFormatResponse from './paragraphFormatResponse';
import * as importedParagraphInsert from './paragraphInsert';
import * as importedParagraphLink from './paragraphLink';
import * as importedParagraphLinkCollection from './paragraphLinkCollection';
import * as importedParagraphLinkCollectionResponse from './paragraphLinkCollectionResponse';
import * as importedParagraphListFormatResponse from './paragraphListFormatResponse';
import * as importedParagraphResponse from './paragraphResponse';
import * as importedPclSaveOptionsData from './pclSaveOptionsData';
import * as importedPdfDigitalSignatureDetailsData from './pdfDigitalSignatureDetailsData';
import * as importedPdfEncryptionDetailsData from './pdfEncryptionDetailsData';
import * as importedPdfSaveOptionsData from './pdfSaveOptionsData';
import * as importedPngSaveOptionsData from './pngSaveOptionsData';
import * as importedPreferredWidth from './preferredWidth';
import * as importedProtectionData from './protectionData';
import * as importedProtectionDataResponse from './protectionDataResponse';
import * as importedProtectionRequest from './protectionRequest';
import * as importedPsSaveOptionsData from './psSaveOptionsData';
import * as importedRangeDocument from './rangeDocument';
import * as importedRangeTextResponse from './rangeTextResponse';
import * as importedReplaceRange from './replaceRange';
import * as importedReplaceTextParameters from './replaceTextParameters';
import * as importedReplaceTextResponse from './replaceTextResponse';
import * as importedReportBuildOptions from './reportBuildOptions';
import * as importedReportEngineSettings from './reportEngineSettings';
import * as importedRevisionsModificationResponse from './revisionsModificationResponse';
import * as importedRtfSaveOptionsData from './rtfSaveOptionsData';
import * as importedRun from './run';
import * as importedRunBase from './runBase';
import * as importedRunInsert from './runInsert';
import * as importedRunLink from './runLink';
import * as importedRunResponse from './runResponse';
import * as importedRunUpdate from './runUpdate';
import * as importedRuns from './runs';
import * as importedRunsResponse from './runsResponse';
import * as importedSaveOptionsData from './saveOptionsData';
import * as importedSaveResponse from './saveResponse';
import * as importedSaveResult from './saveResult';
import * as importedSearchResponse from './searchResponse';
import * as importedSearchResult from './searchResult';
import * as importedSearchResultsCollection from './searchResultsCollection';
import * as importedSection from './section';
import * as importedSectionLink from './sectionLink';
import * as importedSectionLinkCollection from './sectionLinkCollection';
import * as importedSectionLinkCollectionResponse from './sectionLinkCollectionResponse';
import * as importedSectionPageSetupResponse from './sectionPageSetupResponse';
import * as importedSectionResponse from './sectionResponse';
import * as importedShading from './shading';
import * as importedSplitDocumentResponse from './splitDocumentResponse';
import * as importedSplitDocumentResult from './splitDocumentResult';
import * as importedStatDataResponse from './statDataResponse';
import * as importedStorageFile from './storageFile';
import * as importedStoryChildNodes from './storyChildNodes';
import * as importedStringFormatData from './stringFormatData';
import * as importedStyle from './style';
import * as importedStyleApply from './styleApply';
import * as importedStyleCopy from './styleCopy';
import * as importedStyleInsert from './styleInsert';
import * as importedStyleResponse from './styleResponse';
import * as importedStyleUpdate from './styleUpdate';
import * as importedStylesResponse from './stylesResponse';
import * as importedSvgSaveOptionsData from './svgSaveOptionsData';
import * as importedTabStop from './tabStop';
import * as importedTabStopBase from './tabStopBase';
import * as importedTabStopInsert from './tabStopInsert';
import * as importedTabStopsResponse from './tabStopsResponse';
import * as importedTable from './table';
import * as importedTableCell from './tableCell';
import * as importedTableCellFormat from './tableCellFormat';
import * as importedTableCellFormatResponse from './tableCellFormatResponse';
import * as importedTableCellInsert from './tableCellInsert';
import * as importedTableCellResponse from './tableCellResponse';
import * as importedTableInsert from './tableInsert';
import * as importedTableLink from './tableLink';
import * as importedTableLinkCollection from './tableLinkCollection';
import * as importedTableLinkCollectionResponse from './tableLinkCollectionResponse';
import * as importedTableProperties from './tableProperties';
import * as importedTablePropertiesResponse from './tablePropertiesResponse';
import * as importedTableResponse from './tableResponse';
import * as importedTableRow from './tableRow';
import * as importedTableRowFormat from './tableRowFormat';
import * as importedTableRowFormatResponse from './tableRowFormatResponse';
import * as importedTableRowInsert from './tableRowInsert';
import * as importedTableRowResponse from './tableRowResponse';
import * as importedTextSaveOptionsData from './textSaveOptionsData';
import * as importedTiffSaveOptionsData from './tiffSaveOptionsData';
import * as importedWatermarkText from './watermarkText';
import * as importedWordMLSaveOptionsData from './wordMLSaveOptionsData';
import * as importedWordsApiErrorResponse from './wordsApiErrorResponse';
import * as importedWordsApiLink from './wordsApiLink';
import * as importedWordsResponse from './wordsResponse';
import * as importedXamlFixedSaveOptionsData from './xamlFixedSaveOptionsData';
import * as importedXamlFlowSaveOptionsData from './xamlFlowSaveOptionsData';
import * as importedXmlColor from './xmlColor';
import * as importedXpsSaveOptionsData from './xpsSaveOptionsData';
export { AttributeInfo } from '../internal/attributeInfo';
export * from './apiError';
export * from './availableFontsResponse';
export * from './bmpSaveOptionsData';
export * from './body';
export * from './body1';
export * from './body10';
export * from './body11';
export * from './body2';
export * from './body3';
export * from './body4';
export * from './body5';
export * from './body6';
export * from './body7';
export * from './body8';
export * from './body9';
export * from './bookmark';
export * from './bookmarkData';
export * from './bookmarkResponse';
export * from './bookmarks';
export * from './bookmarksOutlineLevelData';
export * from './bookmarksResponse';
export * from './border';
export * from './borderResponse';
export * from './bordersCollection';
export * from './bordersResponse';
export * from './classificationResponse';
export * from './classificationResult';
export * from './comment';
export * from './commentBase';
export * from './commentInsert';
export * from './commentLink';
export * from './commentResponse';
export * from './commentUpdate';
export * from './commentsCollection';
export * from './commentsResponse';
export * from './compareData';
export * from './compareOptions';
export * from './csvDataLoadOptions';
export * from './docSaveOptionsData';
export * from './document';
export * from './documentEntry';
export * from './documentEntryList';
export * from './documentPosition';
export * from './documentProperties';
export * from './documentPropertiesResponse';
export * from './documentProperty';
export * from './documentPropertyBase';
export * from './documentPropertyCreateOrUpdate';
export * from './documentPropertyResponse';
export * from './documentResponse';
export * from './documentStatData';
export * from './downsampleOptionsData';
export * from './drawingObject';
export * from './drawingObjectCollection';
export * from './drawingObjectInsert';
export * from './drawingObjectLink';
export * from './drawingObjectResponse';
export * from './drawingObjectUpdate';
export * from './drawingObjectsResponse';
export * from './emfSaveOptionsData';
export * from './epubSaveOptionsData';
export * from './errorDetails';
export * from './field';
export * from './fieldBase';
export * from './fieldCollection';
export * from './fieldInsert';
export * from './fieldLink';
export * from './fieldNames';
export * from './fieldNamesResponse';
export * from './fieldResponse';
export * from './fieldUpdate';
export * from './fieldsResponse';
export * from './fileLink';
export * from './filesList';
export * from './filesUploadResult';
export * from './fixedPageSaveOptionsData';
export * from './font';
export * from './fontInfo';
export * from './fontResponse';
export * from './footnote';
export * from './footnoteBase';
export * from './footnoteCollection';
export * from './footnoteInsert';
export * from './footnoteLink';
export * from './footnoteResponse';
export * from './footnoteUpdate';
export * from './footnotesResponse';
export * from './footnotesStatData';
export * from './formField';
export * from './formFieldCheckbox';
export * from './formFieldCollection';
export * from './formFieldDropDown';
export * from './formFieldResponse';
export * from './formFieldTextInput';
export * from './formFieldsResponse';
export * from './gifSaveOptionsData';
export * from './graphicsQualityOptionsData';
export * from './headerFooter';
export * from './headerFooterLink';
export * from './headerFooterLinkCollection';
export * from './headerFooterResponse';
export * from './headerFootersResponse';
export * from './htmlFixedSaveOptionsData';
export * from './htmlSaveOptionsData';
export * from './hyperlink';
export * from './hyperlinkResponse';
export * from './hyperlinks';
export * from './hyperlinksResponse';
export * from './imageSaveOptionsData';
export * from './jpegSaveOptionsData';
export * from './link';
export * from './linkElement';
export * from './listFormat';
export * from './listFormatUpdate';
export * from './listInfo';
export * from './listInsert';
export * from './listLevel';
export * from './listLevelUpdate';
export * from './listLevels';
export * from './listResponse';
export * from './listUpdate';
export * from './lists';
export * from './listsResponse';
export * from './loadWebDocumentData';
export * from './metafileRenderingOptionsData';
export * from './mhtmlSaveOptionsData';
export * from './modelError';
export * from './modificationOperationResult';
export * from './nodeLink';
export * from './odtSaveOptionsData';
export * from './officeMathLink';
export * from './officeMathObject';
export * from './officeMathObjectResponse';
export * from './officeMathObjectsCollection';
export * from './officeMathObjectsResponse';
export * from './ooxmlSaveOptionsData';
export * from './outlineOptionsData';
export * from './pageNumber';
export * from './pageSetup';
export * from './pageStatData';
export * from './paragraph';
export * from './paragraphFormat';
export * from './paragraphFormatResponse';
export * from './paragraphInsert';
export * from './paragraphLink';
export * from './paragraphLinkCollection';
export * from './paragraphLinkCollectionResponse';
export * from './paragraphListFormatResponse';
export * from './paragraphResponse';
export * from './pclSaveOptionsData';
export * from './pdfDigitalSignatureDetailsData';
export * from './pdfEncryptionDetailsData';
export * from './pdfSaveOptionsData';
export * from './pngSaveOptionsData';
export * from './preferredWidth';
export * from './protectionData';
export * from './protectionDataResponse';
export * from './protectionRequest';
export * from './psSaveOptionsData';
export * from './rangeDocument';
export * from './rangeTextResponse';
export * from './replaceRange';
export * from './replaceTextParameters';
export * from './replaceTextResponse';
export * from './reportBuildOptions';
export * from './reportEngineSettings';
export * from './revisionsModificationResponse';
export * from './rtfSaveOptionsData';
export * from './run';
export * from './runBase';
export * from './runInsert';
export * from './runLink';
export * from './runResponse';
export * from './runUpdate';
export * from './runs';
export * from './runsResponse';
export * from './saveOptionsData';
export * from './saveResponse';
export * from './saveResult';
export * from './searchResponse';
export * from './searchResult';
export * from './searchResultsCollection';
export * from './section';
export * from './sectionLink';
export * from './sectionLinkCollection';
export * from './sectionLinkCollectionResponse';
export * from './sectionPageSetupResponse';
export * from './sectionResponse';
export * from './shading';
export * from './splitDocumentResponse';
export * from './splitDocumentResult';
export * from './statDataResponse';
export * from './storageFile';
export * from './storyChildNodes';
export * from './stringFormatData';
export * from './style';
export * from './styleApply';
export * from './styleCopy';
export * from './styleInsert';
export * from './styleResponse';
export * from './styleUpdate';
export * from './stylesResponse';
export * from './svgSaveOptionsData';
export * from './tabStop';
export * from './tabStopBase';
export * from './tabStopInsert';
export * from './tabStopsResponse';
export * from './table';
export * from './tableCell';
export * from './tableCellFormat';
export * from './tableCellFormatResponse';
export * from './tableCellInsert';
export * from './tableCellResponse';
export * from './tableInsert';
export * from './tableLink';
export * from './tableLinkCollection';
export * from './tableLinkCollectionResponse';
export * from './tableProperties';
export * from './tablePropertiesResponse';
export * from './tableResponse';
export * from './tableRow';
export * from './tableRowFormat';
export * from './tableRowFormatResponse';
export * from './tableRowInsert';
export * from './tableRowResponse';
export * from './textSaveOptionsData';
export * from './tiffSaveOptionsData';
export * from './watermarkText';
export * from './wordMLSaveOptionsData';
export * from './wordsApiErrorResponse';
export * from './wordsApiLink';
export * from './wordsResponse';
export * from './xamlFixedSaveOptionsData';
export * from './xamlFlowSaveOptionsData';
export * from './xmlColor';
export * from './xpsSaveOptionsData';
/**
 * WordsIncomingMessage
 */
export declare class WordsIncomingMessage<T> {
    /**
     * Gets or sets raw response
     */
    response: IncomingMessage;
    /**
     * Get or set parsed response
     */
    body: T;
}
declare const enumsMap: {
    "Border.BorderTypeEnum": typeof importedBorder.Border.BorderTypeEnum;
    "Border.LineStyleEnum": typeof importedBorder.Border.LineStyleEnum;
    "CompareOptions.TargetEnum": typeof importedCompareOptions.CompareOptions.TargetEnum;
    "Document.SourceFormatEnum": typeof importedDocument.Document.SourceFormatEnum;
    "DrawingObject.RelativeHorizontalPositionEnum": typeof importedDrawingObject.DrawingObject.RelativeHorizontalPositionEnum;
    "DrawingObject.RelativeVerticalPositionEnum": typeof importedDrawingObject.DrawingObject.RelativeVerticalPositionEnum;
    "DrawingObject.WrapTypeEnum": typeof importedDrawingObject.DrawingObject.WrapTypeEnum;
    "DrawingObjectInsert.RelativeHorizontalPositionEnum": typeof importedDrawingObjectInsert.DrawingObjectInsert.RelativeHorizontalPositionEnum;
    "DrawingObjectInsert.RelativeVerticalPositionEnum": typeof importedDrawingObjectInsert.DrawingObjectInsert.RelativeVerticalPositionEnum;
    "DrawingObjectInsert.WrapTypeEnum": typeof importedDrawingObjectInsert.DrawingObjectInsert.WrapTypeEnum;
    "DrawingObjectUpdate.RelativeHorizontalPositionEnum": typeof importedDrawingObjectUpdate.DrawingObjectUpdate.RelativeHorizontalPositionEnum;
    "DrawingObjectUpdate.RelativeVerticalPositionEnum": typeof importedDrawingObjectUpdate.DrawingObjectUpdate.RelativeVerticalPositionEnum;
    "DrawingObjectUpdate.WrapTypeEnum": typeof importedDrawingObjectUpdate.DrawingObjectUpdate.WrapTypeEnum;
    "Font.StyleIdentifierEnum": typeof importedFont.Font.StyleIdentifierEnum;
    "Font.TextEffectEnum": typeof importedFont.Font.TextEffectEnum;
    "Font.UnderlineEnum": typeof importedFont.Font.UnderlineEnum;
    "Footnote.FootnoteTypeEnum": typeof importedFootnote.Footnote.FootnoteTypeEnum;
    "FootnoteBase.FootnoteTypeEnum": typeof importedFootnoteBase.FootnoteBase.FootnoteTypeEnum;
    "FormFieldTextInput.TextInputTypeEnum": typeof importedFormFieldTextInput.FormFieldTextInput.TextInputTypeEnum;
    "GraphicsQualityOptionsData.CompositingModeEnum": typeof importedGraphicsQualityOptionsData.GraphicsQualityOptionsData.CompositingModeEnum;
    "GraphicsQualityOptionsData.CompositingQualityEnum": typeof importedGraphicsQualityOptionsData.GraphicsQualityOptionsData.CompositingQualityEnum;
    "GraphicsQualityOptionsData.InterpolationModeEnum": typeof importedGraphicsQualityOptionsData.GraphicsQualityOptionsData.InterpolationModeEnum;
    "GraphicsQualityOptionsData.SmoothingModeEnum": typeof importedGraphicsQualityOptionsData.GraphicsQualityOptionsData.SmoothingModeEnum;
    "GraphicsQualityOptionsData.TextRenderingHintEnum": typeof importedGraphicsQualityOptionsData.GraphicsQualityOptionsData.TextRenderingHintEnum;
    "HeaderFooterLink.TypeEnum": typeof importedHeaderFooterLink.HeaderFooterLink.TypeEnum;
    "HtmlSaveOptionsData.HtmlVersionEnum": typeof importedHtmlSaveOptionsData.HtmlSaveOptionsData.HtmlVersionEnum;
    "HtmlSaveOptionsData.MetafileFormatEnum": typeof importedHtmlSaveOptionsData.HtmlSaveOptionsData.MetafileFormatEnum;
    "HtmlSaveOptionsData.OfficeMathOutputModeEnum": typeof importedHtmlSaveOptionsData.HtmlSaveOptionsData.OfficeMathOutputModeEnum;
    "ListInsert.TemplateEnum": typeof importedListInsert.ListInsert.TemplateEnum;
    "ListLevel.AlignmentEnum": typeof importedListLevel.ListLevel.AlignmentEnum;
    "ListLevel.NumberStyleEnum": typeof importedListLevel.ListLevel.NumberStyleEnum;
    "ListLevel.TrailingCharacterEnum": typeof importedListLevel.ListLevel.TrailingCharacterEnum;
    "ListLevelUpdate.NumberStyleEnum": typeof importedListLevelUpdate.ListLevelUpdate.NumberStyleEnum;
    "ListLevelUpdate.AlignmentEnum": typeof importedListLevelUpdate.ListLevelUpdate.AlignmentEnum;
    "ListLevelUpdate.TrailingCharacterEnum": typeof importedListLevelUpdate.ListLevelUpdate.TrailingCharacterEnum;
    "OdtSaveOptionsData.MeasureUnitEnum": typeof importedOdtSaveOptionsData.OdtSaveOptionsData.MeasureUnitEnum;
    "OfficeMathObject.DisplayTypeEnum": typeof importedOfficeMathObject.OfficeMathObject.DisplayTypeEnum;
    "OfficeMathObject.JustificationEnum": typeof importedOfficeMathObject.OfficeMathObject.JustificationEnum;
    "OfficeMathObject.MathObjectTypeEnum": typeof importedOfficeMathObject.OfficeMathObject.MathObjectTypeEnum;
    "OoxmlSaveOptionsData.CompressionLevelEnum": typeof importedOoxmlSaveOptionsData.OoxmlSaveOptionsData.CompressionLevelEnum;
    "PageSetup.BorderAppliesToEnum": typeof importedPageSetup.PageSetup.BorderAppliesToEnum;
    "PageSetup.BorderDistanceFromEnum": typeof importedPageSetup.PageSetup.BorderDistanceFromEnum;
    "PageSetup.LineNumberRestartModeEnum": typeof importedPageSetup.PageSetup.LineNumberRestartModeEnum;
    "PageSetup.OrientationEnum": typeof importedPageSetup.PageSetup.OrientationEnum;
    "PageSetup.PageNumberStyleEnum": typeof importedPageSetup.PageSetup.PageNumberStyleEnum;
    "PageSetup.PaperSizeEnum": typeof importedPageSetup.PageSetup.PaperSizeEnum;
    "PageSetup.SectionStartEnum": typeof importedPageSetup.PageSetup.SectionStartEnum;
    "PageSetup.VerticalAlignmentEnum": typeof importedPageSetup.PageSetup.VerticalAlignmentEnum;
    "ParagraphFormat.AlignmentEnum": typeof importedParagraphFormat.ParagraphFormat.AlignmentEnum;
    "ParagraphFormat.DropCapPositionEnum": typeof importedParagraphFormat.ParagraphFormat.DropCapPositionEnum;
    "ParagraphFormat.LineSpacingRuleEnum": typeof importedParagraphFormat.ParagraphFormat.LineSpacingRuleEnum;
    "ParagraphFormat.OutlineLevelEnum": typeof importedParagraphFormat.ParagraphFormat.OutlineLevelEnum;
    "ParagraphFormat.StyleIdentifierEnum": typeof importedParagraphFormat.ParagraphFormat.StyleIdentifierEnum;
    "PdfSaveOptionsData.HeaderFooterBookmarksExportModeEnum": typeof importedPdfSaveOptionsData.PdfSaveOptionsData.HeaderFooterBookmarksExportModeEnum;
    "PreferredWidth.TypeEnum": typeof importedPreferredWidth.PreferredWidth.TypeEnum;
    "ReplaceRange.TextTypeEnum": typeof importedReplaceRange.ReplaceRange.TextTypeEnum;
    "ReportEngineSettings.DataSourceTypeEnum": typeof importedReportEngineSettings.ReportEngineSettings.DataSourceTypeEnum;
    "SaveOptionsData.Dml3DEffectsRenderingModeEnum": typeof importedSaveOptionsData.SaveOptionsData.Dml3DEffectsRenderingModeEnum;
    "Shading.TextureEnum": typeof importedShading.Shading.TextureEnum;
    "StringFormatData.AlignmentEnum": typeof importedStringFormatData.StringFormatData.AlignmentEnum;
    "StringFormatData.FormatFlagsEnum": typeof importedStringFormatData.StringFormatData.FormatFlagsEnum;
    "StringFormatData.HotkeyPrefixEnum": typeof importedStringFormatData.StringFormatData.HotkeyPrefixEnum;
    "StringFormatData.LineAlignmentEnum": typeof importedStringFormatData.StringFormatData.LineAlignmentEnum;
    "StringFormatData.TrimmingEnum": typeof importedStringFormatData.StringFormatData.TrimmingEnum;
    "Style.StyleIdentifierEnum": typeof importedStyle.Style.StyleIdentifierEnum;
    "Style.TypeEnum": typeof importedStyle.Style.TypeEnum;
    "StyleInsert.StyleTypeEnum": typeof importedStyleInsert.StyleInsert.StyleTypeEnum;
    "TabStopBase.AlignmentEnum": typeof importedTabStopBase.TabStopBase.AlignmentEnum;
    "TabStopBase.LeaderEnum": typeof importedTabStopBase.TabStopBase.LeaderEnum;
    "TableCellFormat.HorizontalMergeEnum": typeof importedTableCellFormat.TableCellFormat.HorizontalMergeEnum;
    "TableCellFormat.OrientationEnum": typeof importedTableCellFormat.TableCellFormat.OrientationEnum;
    "TableCellFormat.VerticalAlignmentEnum": typeof importedTableCellFormat.TableCellFormat.VerticalAlignmentEnum;
    "TableCellFormat.VerticalMergeEnum": typeof importedTableCellFormat.TableCellFormat.VerticalMergeEnum;
    "TableProperties.AlignmentEnum": typeof importedTableProperties.TableProperties.AlignmentEnum;
    "TableProperties.StyleIdentifierEnum": typeof importedTableProperties.TableProperties.StyleIdentifierEnum;
    "TableProperties.StyleOptionsEnum": typeof importedTableProperties.TableProperties.StyleOptionsEnum;
    "TableProperties.TextWrappingEnum": typeof importedTableProperties.TableProperties.TextWrappingEnum;
    "TableRowFormat.HeightRuleEnum": typeof importedTableRowFormat.TableRowFormat.HeightRuleEnum;
    "TextSaveOptionsData.ExportHeadersFootersModeEnum": typeof importedTextSaveOptionsData.TextSaveOptionsData.ExportHeadersFootersModeEnum;
};
declare const typeMap: {
    ApiError: typeof importedApiError.ApiError;
    AvailableFontsResponse: typeof importedAvailableFontsResponse.AvailableFontsResponse;
    BmpSaveOptionsData: typeof importedBmpSaveOptionsData.BmpSaveOptionsData;
    Body: typeof importedBody.Body;
    Body1: typeof importedBody1.Body1;
    Body10: typeof importedBody10.Body10;
    Body11: typeof importedBody11.Body11;
    Body2: typeof importedBody2.Body2;
    Body3: typeof importedBody3.Body3;
    Body4: typeof importedBody4.Body4;
    Body5: typeof importedBody5.Body5;
    Body6: typeof importedBody6.Body6;
    Body7: typeof importedBody7.Body7;
    Body8: typeof importedBody8.Body8;
    Body9: typeof importedBody9.Body9;
    Bookmark: typeof importedBookmark.Bookmark;
    BookmarkData: typeof importedBookmarkData.BookmarkData;
    BookmarkResponse: typeof importedBookmarkResponse.BookmarkResponse;
    Bookmarks: typeof importedBookmarks.Bookmarks;
    BookmarksOutlineLevelData: typeof importedBookmarksOutlineLevelData.BookmarksOutlineLevelData;
    BookmarksResponse: typeof importedBookmarksResponse.BookmarksResponse;
    Border: typeof importedBorder.Border;
    BorderResponse: typeof importedBorderResponse.BorderResponse;
    BordersCollection: typeof importedBordersCollection.BordersCollection;
    BordersResponse: typeof importedBordersResponse.BordersResponse;
    ClassificationResponse: typeof importedClassificationResponse.ClassificationResponse;
    ClassificationResult: typeof importedClassificationResult.ClassificationResult;
    Comment: typeof importedComment.Comment;
    CommentBase: typeof importedCommentBase.CommentBase;
    CommentInsert: typeof importedCommentInsert.CommentInsert;
    CommentLink: typeof importedCommentLink.CommentLink;
    CommentResponse: typeof importedCommentResponse.CommentResponse;
    CommentUpdate: typeof importedCommentUpdate.CommentUpdate;
    CommentsCollection: typeof importedCommentsCollection.CommentsCollection;
    CommentsResponse: typeof importedCommentsResponse.CommentsResponse;
    CompareData: typeof importedCompareData.CompareData;
    CompareOptions: typeof importedCompareOptions.CompareOptions;
    CsvDataLoadOptions: typeof importedCsvDataLoadOptions.CsvDataLoadOptions;
    DocSaveOptionsData: typeof importedDocSaveOptionsData.DocSaveOptionsData;
    Document: typeof importedDocument.Document;
    DocumentEntry: typeof importedDocumentEntry.DocumentEntry;
    DocumentEntryList: typeof importedDocumentEntryList.DocumentEntryList;
    DocumentPosition: typeof importedDocumentPosition.DocumentPosition;
    DocumentProperties: typeof importedDocumentProperties.DocumentProperties;
    DocumentPropertiesResponse: typeof importedDocumentPropertiesResponse.DocumentPropertiesResponse;
    DocumentProperty: typeof importedDocumentProperty.DocumentProperty;
    DocumentPropertyBase: typeof importedDocumentPropertyBase.DocumentPropertyBase;
    DocumentPropertyCreateOrUpdate: typeof importedDocumentPropertyCreateOrUpdate.DocumentPropertyCreateOrUpdate;
    DocumentPropertyResponse: typeof importedDocumentPropertyResponse.DocumentPropertyResponse;
    DocumentResponse: typeof importedDocumentResponse.DocumentResponse;
    DocumentStatData: typeof importedDocumentStatData.DocumentStatData;
    DownsampleOptionsData: typeof importedDownsampleOptionsData.DownsampleOptionsData;
    DrawingObject: typeof importedDrawingObject.DrawingObject;
    DrawingObjectCollection: typeof importedDrawingObjectCollection.DrawingObjectCollection;
    DrawingObjectInsert: typeof importedDrawingObjectInsert.DrawingObjectInsert;
    DrawingObjectLink: typeof importedDrawingObjectLink.DrawingObjectLink;
    DrawingObjectResponse: typeof importedDrawingObjectResponse.DrawingObjectResponse;
    DrawingObjectUpdate: typeof importedDrawingObjectUpdate.DrawingObjectUpdate;
    DrawingObjectsResponse: typeof importedDrawingObjectsResponse.DrawingObjectsResponse;
    EmfSaveOptionsData: typeof importedEmfSaveOptionsData.EmfSaveOptionsData;
    EpubSaveOptionsData: typeof importedEpubSaveOptionsData.EpubSaveOptionsData;
    ErrorDetails: typeof importedErrorDetails.ErrorDetails;
    Field: typeof importedField.Field;
    FieldBase: typeof importedFieldBase.FieldBase;
    FieldCollection: typeof importedFieldCollection.FieldCollection;
    FieldInsert: typeof importedFieldInsert.FieldInsert;
    FieldLink: typeof importedFieldLink.FieldLink;
    FieldNames: typeof importedFieldNames.FieldNames;
    FieldNamesResponse: typeof importedFieldNamesResponse.FieldNamesResponse;
    FieldResponse: typeof importedFieldResponse.FieldResponse;
    FieldUpdate: typeof importedFieldUpdate.FieldUpdate;
    FieldsResponse: typeof importedFieldsResponse.FieldsResponse;
    FileLink: typeof importedFileLink.FileLink;
    FilesList: typeof importedFilesList.FilesList;
    FilesUploadResult: typeof importedFilesUploadResult.FilesUploadResult;
    FixedPageSaveOptionsData: typeof importedFixedPageSaveOptionsData.FixedPageSaveOptionsData;
    Font: typeof importedFont.Font;
    FontInfo: typeof importedFontInfo.FontInfo;
    FontResponse: typeof importedFontResponse.FontResponse;
    Footnote: typeof importedFootnote.Footnote;
    FootnoteBase: typeof importedFootnoteBase.FootnoteBase;
    FootnoteCollection: typeof importedFootnoteCollection.FootnoteCollection;
    FootnoteInsert: typeof importedFootnoteInsert.FootnoteInsert;
    FootnoteLink: typeof importedFootnoteLink.FootnoteLink;
    FootnoteResponse: typeof importedFootnoteResponse.FootnoteResponse;
    FootnoteUpdate: typeof importedFootnoteUpdate.FootnoteUpdate;
    FootnotesResponse: typeof importedFootnotesResponse.FootnotesResponse;
    FootnotesStatData: typeof importedFootnotesStatData.FootnotesStatData;
    FormField: typeof importedFormField.FormField;
    FormFieldCheckbox: typeof importedFormFieldCheckbox.FormFieldCheckbox;
    FormFieldCollection: typeof importedFormFieldCollection.FormFieldCollection;
    FormFieldDropDown: typeof importedFormFieldDropDown.FormFieldDropDown;
    FormFieldResponse: typeof importedFormFieldResponse.FormFieldResponse;
    FormFieldTextInput: typeof importedFormFieldTextInput.FormFieldTextInput;
    FormFieldsResponse: typeof importedFormFieldsResponse.FormFieldsResponse;
    GifSaveOptionsData: typeof importedGifSaveOptionsData.GifSaveOptionsData;
    GraphicsQualityOptionsData: typeof importedGraphicsQualityOptionsData.GraphicsQualityOptionsData;
    HeaderFooter: typeof importedHeaderFooter.HeaderFooter;
    HeaderFooterLink: typeof importedHeaderFooterLink.HeaderFooterLink;
    HeaderFooterLinkCollection: typeof importedHeaderFooterLinkCollection.HeaderFooterLinkCollection;
    HeaderFooterResponse: typeof importedHeaderFooterResponse.HeaderFooterResponse;
    HeaderFootersResponse: typeof importedHeaderFootersResponse.HeaderFootersResponse;
    HtmlFixedSaveOptionsData: typeof importedHtmlFixedSaveOptionsData.HtmlFixedSaveOptionsData;
    HtmlSaveOptionsData: typeof importedHtmlSaveOptionsData.HtmlSaveOptionsData;
    Hyperlink: typeof importedHyperlink.Hyperlink;
    HyperlinkResponse: typeof importedHyperlinkResponse.HyperlinkResponse;
    Hyperlinks: typeof importedHyperlinks.Hyperlinks;
    HyperlinksResponse: typeof importedHyperlinksResponse.HyperlinksResponse;
    ImageSaveOptionsData: typeof importedImageSaveOptionsData.ImageSaveOptionsData;
    JpegSaveOptionsData: typeof importedJpegSaveOptionsData.JpegSaveOptionsData;
    Link: typeof importedLink.Link;
    LinkElement: typeof importedLinkElement.LinkElement;
    ListFormat: typeof importedListFormat.ListFormat;
    ListFormatUpdate: typeof importedListFormatUpdate.ListFormatUpdate;
    ListInfo: typeof importedListInfo.ListInfo;
    ListInsert: typeof importedListInsert.ListInsert;
    ListLevel: typeof importedListLevel.ListLevel;
    ListLevelUpdate: typeof importedListLevelUpdate.ListLevelUpdate;
    ListLevels: typeof importedListLevels.ListLevels;
    ListResponse: typeof importedListResponse.ListResponse;
    ListUpdate: typeof importedListUpdate.ListUpdate;
    Lists: typeof importedLists.Lists;
    ListsResponse: typeof importedListsResponse.ListsResponse;
    LoadWebDocumentData: typeof importedLoadWebDocumentData.LoadWebDocumentData;
    MetafileRenderingOptionsData: typeof importedMetafileRenderingOptionsData.MetafileRenderingOptionsData;
    MhtmlSaveOptionsData: typeof importedMhtmlSaveOptionsData.MhtmlSaveOptionsData;
    ModelError: typeof importedModelError.ModelError;
    ModificationOperationResult: typeof importedModificationOperationResult.ModificationOperationResult;
    NodeLink: typeof importedNodeLink.NodeLink;
    OdtSaveOptionsData: typeof importedOdtSaveOptionsData.OdtSaveOptionsData;
    OfficeMathLink: typeof importedOfficeMathLink.OfficeMathLink;
    OfficeMathObject: typeof importedOfficeMathObject.OfficeMathObject;
    OfficeMathObjectResponse: typeof importedOfficeMathObjectResponse.OfficeMathObjectResponse;
    OfficeMathObjectsCollection: typeof importedOfficeMathObjectsCollection.OfficeMathObjectsCollection;
    OfficeMathObjectsResponse: typeof importedOfficeMathObjectsResponse.OfficeMathObjectsResponse;
    OoxmlSaveOptionsData: typeof importedOoxmlSaveOptionsData.OoxmlSaveOptionsData;
    OutlineOptionsData: typeof importedOutlineOptionsData.OutlineOptionsData;
    PageNumber: typeof importedPageNumber.PageNumber;
    PageSetup: typeof importedPageSetup.PageSetup;
    PageStatData: typeof importedPageStatData.PageStatData;
    Paragraph: typeof importedParagraph.Paragraph;
    ParagraphFormat: typeof importedParagraphFormat.ParagraphFormat;
    ParagraphFormatResponse: typeof importedParagraphFormatResponse.ParagraphFormatResponse;
    ParagraphInsert: typeof importedParagraphInsert.ParagraphInsert;
    ParagraphLink: typeof importedParagraphLink.ParagraphLink;
    ParagraphLinkCollection: typeof importedParagraphLinkCollection.ParagraphLinkCollection;
    ParagraphLinkCollectionResponse: typeof importedParagraphLinkCollectionResponse.ParagraphLinkCollectionResponse;
    ParagraphListFormatResponse: typeof importedParagraphListFormatResponse.ParagraphListFormatResponse;
    ParagraphResponse: typeof importedParagraphResponse.ParagraphResponse;
    PclSaveOptionsData: typeof importedPclSaveOptionsData.PclSaveOptionsData;
    PdfDigitalSignatureDetailsData: typeof importedPdfDigitalSignatureDetailsData.PdfDigitalSignatureDetailsData;
    PdfEncryptionDetailsData: typeof importedPdfEncryptionDetailsData.PdfEncryptionDetailsData;
    PdfSaveOptionsData: typeof importedPdfSaveOptionsData.PdfSaveOptionsData;
    PngSaveOptionsData: typeof importedPngSaveOptionsData.PngSaveOptionsData;
    PreferredWidth: typeof importedPreferredWidth.PreferredWidth;
    ProtectionData: typeof importedProtectionData.ProtectionData;
    ProtectionDataResponse: typeof importedProtectionDataResponse.ProtectionDataResponse;
    ProtectionRequest: typeof importedProtectionRequest.ProtectionRequest;
    PsSaveOptionsData: typeof importedPsSaveOptionsData.PsSaveOptionsData;
    RangeDocument: typeof importedRangeDocument.RangeDocument;
    RangeTextResponse: typeof importedRangeTextResponse.RangeTextResponse;
    ReplaceRange: typeof importedReplaceRange.ReplaceRange;
    ReplaceTextParameters: typeof importedReplaceTextParameters.ReplaceTextParameters;
    ReplaceTextResponse: typeof importedReplaceTextResponse.ReplaceTextResponse;
    ReportBuildOptions: typeof importedReportBuildOptions.ReportBuildOptions;
    ReportEngineSettings: typeof importedReportEngineSettings.ReportEngineSettings;
    RevisionsModificationResponse: typeof importedRevisionsModificationResponse.RevisionsModificationResponse;
    RtfSaveOptionsData: typeof importedRtfSaveOptionsData.RtfSaveOptionsData;
    Run: typeof importedRun.Run;
    RunBase: typeof importedRunBase.RunBase;
    RunInsert: typeof importedRunInsert.RunInsert;
    RunLink: typeof importedRunLink.RunLink;
    RunResponse: typeof importedRunResponse.RunResponse;
    RunUpdate: typeof importedRunUpdate.RunUpdate;
    Runs: typeof importedRuns.Runs;
    RunsResponse: typeof importedRunsResponse.RunsResponse;
    SaveOptionsData: typeof importedSaveOptionsData.SaveOptionsData;
    SaveResponse: typeof importedSaveResponse.SaveResponse;
    SaveResult: typeof importedSaveResult.SaveResult;
    SearchResponse: typeof importedSearchResponse.SearchResponse;
    SearchResult: typeof importedSearchResult.SearchResult;
    SearchResultsCollection: typeof importedSearchResultsCollection.SearchResultsCollection;
    Section: typeof importedSection.Section;
    SectionLink: typeof importedSectionLink.SectionLink;
    SectionLinkCollection: typeof importedSectionLinkCollection.SectionLinkCollection;
    SectionLinkCollectionResponse: typeof importedSectionLinkCollectionResponse.SectionLinkCollectionResponse;
    SectionPageSetupResponse: typeof importedSectionPageSetupResponse.SectionPageSetupResponse;
    SectionResponse: typeof importedSectionResponse.SectionResponse;
    Shading: typeof importedShading.Shading;
    SplitDocumentResponse: typeof importedSplitDocumentResponse.SplitDocumentResponse;
    SplitDocumentResult: typeof importedSplitDocumentResult.SplitDocumentResult;
    StatDataResponse: typeof importedStatDataResponse.StatDataResponse;
    StorageFile: typeof importedStorageFile.StorageFile;
    StoryChildNodes: typeof importedStoryChildNodes.StoryChildNodes;
    StringFormatData: typeof importedStringFormatData.StringFormatData;
    Style: typeof importedStyle.Style;
    StyleApply: typeof importedStyleApply.StyleApply;
    StyleCopy: typeof importedStyleCopy.StyleCopy;
    StyleInsert: typeof importedStyleInsert.StyleInsert;
    StyleResponse: typeof importedStyleResponse.StyleResponse;
    StyleUpdate: typeof importedStyleUpdate.StyleUpdate;
    StylesResponse: typeof importedStylesResponse.StylesResponse;
    SvgSaveOptionsData: typeof importedSvgSaveOptionsData.SvgSaveOptionsData;
    TabStop: typeof importedTabStop.TabStop;
    TabStopBase: typeof importedTabStopBase.TabStopBase;
    TabStopInsert: typeof importedTabStopInsert.TabStopInsert;
    TabStopsResponse: typeof importedTabStopsResponse.TabStopsResponse;
    Table: typeof importedTable.Table;
    TableCell: typeof importedTableCell.TableCell;
    TableCellFormat: typeof importedTableCellFormat.TableCellFormat;
    TableCellFormatResponse: typeof importedTableCellFormatResponse.TableCellFormatResponse;
    TableCellInsert: typeof importedTableCellInsert.TableCellInsert;
    TableCellResponse: typeof importedTableCellResponse.TableCellResponse;
    TableInsert: typeof importedTableInsert.TableInsert;
    TableLink: typeof importedTableLink.TableLink;
    TableLinkCollection: typeof importedTableLinkCollection.TableLinkCollection;
    TableLinkCollectionResponse: typeof importedTableLinkCollectionResponse.TableLinkCollectionResponse;
    TableProperties: typeof importedTableProperties.TableProperties;
    TablePropertiesResponse: typeof importedTablePropertiesResponse.TablePropertiesResponse;
    TableResponse: typeof importedTableResponse.TableResponse;
    TableRow: typeof importedTableRow.TableRow;
    TableRowFormat: typeof importedTableRowFormat.TableRowFormat;
    TableRowFormatResponse: typeof importedTableRowFormatResponse.TableRowFormatResponse;
    TableRowInsert: typeof importedTableRowInsert.TableRowInsert;
    TableRowResponse: typeof importedTableRowResponse.TableRowResponse;
    TextSaveOptionsData: typeof importedTextSaveOptionsData.TextSaveOptionsData;
    TiffSaveOptionsData: typeof importedTiffSaveOptionsData.TiffSaveOptionsData;
    WatermarkText: typeof importedWatermarkText.WatermarkText;
    WordMLSaveOptionsData: typeof importedWordMLSaveOptionsData.WordMLSaveOptionsData;
    WordsApiErrorResponse: typeof importedWordsApiErrorResponse.WordsApiErrorResponse;
    WordsApiLink: typeof importedWordsApiLink.WordsApiLink;
    WordsResponse: typeof importedWordsResponse.WordsResponse;
    XamlFixedSaveOptionsData: typeof importedXamlFixedSaveOptionsData.XamlFixedSaveOptionsData;
    XamlFlowSaveOptionsData: typeof importedXamlFlowSaveOptionsData.XamlFlowSaveOptionsData;
    XmlColor: typeof importedXmlColor.XmlColor;
    XpsSaveOptionsData: typeof importedXpsSaveOptionsData.XpsSaveOptionsData;
};
export { enumsMap, typeMap };
/**
 * Request model for AcceptAllRevisions operation.
 */
export declare class AcceptAllRevisionsRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    constructor(init?: Partial<AcceptAllRevisionsRequest>);
}
/**
 * Request model for AppendDocument operation.
 */
export declare class AppendDocumentRequest {
    /**
     * Original document name.
     */
    name: string;
    /**
     * DocumentEntryList with a list of documents to append.
     */
    documentList: importedDocumentEntryList.DocumentEntryList;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<AppendDocumentRequest>);
}
/**
 * Request model for ApplyStyleToDocumentElement operation.
 */
export declare class ApplyStyleToDocumentElementRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Style to apply.
     */
    styleApply: importedStyleApply.StyleApply;
    /**
     * The path to the node that supports a style. Supported node types: ParagraphFormat, List, ListLevel, Table.
     */
    styledNodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<ApplyStyleToDocumentElementRequest>);
}
/**
 * Request model for BuildReport operation.
 */
export declare class BuildReportRequest {
    /**
     * The template name.
     */
    name: string;
    /**
     * A string providing a data to populate the specified template. The string must be of one of the following types: xml, json, csv
     */
    data: string;
    /**
     * An object providing a settings of report engine.
     */
    reportEngineSettings: importedReportEngineSettings.ReportEngineSettings;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved with autogenerated name.
     */
    destFileName: string;
    constructor(init?: Partial<BuildReportRequest>);
}
/**
 * Request model for BuildReportOnline operation.
 */
export declare class BuildReportOnlineRequest {
    /**
     * File with template
     */
    template: Readable;
    /**
     * A string providing a data to populate the specified template. The string must be of one of the following types: xml, json, csv
     */
    data: string;
    /**
     * An object providing a settings of report engine.
     */
    reportEngineSettings: importedReportEngineSettings.ReportEngineSettings;
    /**
     * This file name will be used when resulting document has dynamic field for document file name {filename}. If it is not set, "template" will be used instead.
     */
    documentFileName: string;
    constructor(init?: Partial<BuildReportOnlineRequest>);
}
/**
 * Request model for Classify operation.
 */
export declare class ClassifyRequest {
    /**
     * Text to classify.
     */
    text: string;
    /**
     * Number of the best classes to return.
     */
    bestClassesCount: string;
    constructor(init?: Partial<ClassifyRequest>);
}
/**
 * Request model for ClassifyDocument operation.
 */
export declare class ClassifyDocumentRequest {
    /**
     * The document name.
     */
    documentName: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Count of the best classes to return.
     */
    bestClassesCount: string;
    /**
     * Taxonomy to use for classification return.
     */
    taxonomy: string;
    constructor(init?: Partial<ClassifyDocumentRequest>);
}
/**
 * Request model for CompareDocument operation.
 */
export declare class CompareDocumentRequest {
    /**
     * Original document name.
     */
    name: string;
    /**
     * CompareData with a document to compare.
     */
    compareData: importedCompareData.CompareData;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    constructor(init?: Partial<CompareDocumentRequest>);
}
/**
 * Request model for ConvertDocument operation.
 */
export declare class ConvertDocumentRequest {
    /**
     * Converting document
     */
    document: Readable;
    /**
     * Format to convert.
     */
    format: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Path for saving operation result to the local storage.
     */
    outPath: string;
    /**
     * This file name will be used when resulting document has dynamic field for document file name {filename}. If it is not set, "sourceFilename" will be used instead.
     */
    fileNameFieldValue: string;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    constructor(init?: Partial<ConvertDocumentRequest>);
}
/**
 * Request model for CopyFile operation.
 */
export declare class CopyFileRequest {
    /**
     * Destination file path
     */
    destPath: string;
    /**
     * Source file's path e.g. '/Folder 1/file.ext' or '/Bucket/Folder 1/file.ext'
     */
    srcPath: string;
    /**
     * Source storage name
     */
    srcStorageName: string;
    /**
     * Destination storage name
     */
    destStorageName: string;
    /**
     * File version ID to copy
     */
    versionId: string;
    constructor(init?: Partial<CopyFileRequest>);
}
/**
 * Request model for CopyFolder operation.
 */
export declare class CopyFolderRequest {
    /**
     * Destination folder path e.g. '/dst'
     */
    destPath: string;
    /**
     * Source folder path e.g. /Folder1
     */
    srcPath: string;
    /**
     * Source storage name
     */
    srcStorageName: string;
    /**
     * Destination storage name
     */
    destStorageName: string;
    constructor(init?: Partial<CopyFolderRequest>);
}
/**
 * Request model for CopyStyle operation.
 */
export declare class CopyStyleRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Style to copy.
     */
    styleCopy: importedStyleCopy.StyleCopy;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<CopyStyleRequest>);
}
/**
 * Request model for CreateDocument operation.
 */
export declare class CreateDocumentRequest {
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * The document name.
     */
    fileName: string;
    /**
     * The document folder.
     */
    folder: string;
    constructor(init?: Partial<CreateDocumentRequest>);
}
/**
 * Request model for CreateFolder operation.
 */
export declare class CreateFolderRequest {
    /**
     * Target folder's path e.g. Folder1/Folder2/. The folders will be created recursively
     */
    path: string;
    /**
     * Storage name
     */
    storageName: string;
    constructor(init?: Partial<CreateFolderRequest>);
}
/**
 * Request model for CreateOrUpdateDocumentProperty operation.
 */
export declare class CreateOrUpdateDocumentPropertyRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * The property name.
     */
    propertyName: string;
    /**
     * The property with new value.
     */
    property: importedDocumentPropertyCreateOrUpdate.DocumentPropertyCreateOrUpdate;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<CreateOrUpdateDocumentPropertyRequest>);
}
/**
 * Request model for DeleteAllParagraphTabStops operation.
 */
export declare class DeleteAllParagraphTabStopsRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node which contains paragraph.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    constructor(init?: Partial<DeleteAllParagraphTabStopsRequest>);
}
/**
 * Request model for DeleteAllParagraphTabStopsWithoutNodePath operation.
 */
export declare class DeleteAllParagraphTabStopsWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    constructor(init?: Partial<DeleteAllParagraphTabStopsWithoutNodePathRequest>);
}
/**
 * Request model for DeleteBorder operation.
 */
export declare class DeleteBorderRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node with border(node should be paragraph, cell or row).
     */
    nodePath: string;
    /**
     * Border type.
     */
    borderType: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteBorderRequest>);
}
/**
 * Request model for DeleteBorders operation.
 */
export declare class DeleteBordersRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node with borders(node should be paragraph, cell or row).
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteBordersRequest>);
}
/**
 * Request model for DeleteComment operation.
 */
export declare class DeleteCommentRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * The comment index.
     */
    commentIndex: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteCommentRequest>);
}
/**
 * Request model for DeleteDocumentProperty operation.
 */
export declare class DeleteDocumentPropertyRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * The property name.
     */
    propertyName: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteDocumentPropertyRequest>);
}
/**
 * Request model for DeleteDrawingObject operation.
 */
export declare class DeleteDrawingObjectRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node, which contains collection of drawing objects.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteDrawingObjectRequest>);
}
/**
 * Request model for DeleteDrawingObjectWithoutNodePath operation.
 */
export declare class DeleteDrawingObjectWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteDrawingObjectWithoutNodePathRequest>);
}
/**
 * Request model for DeleteField operation.
 */
export declare class DeleteFieldRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node, which contains collection of fields.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteFieldRequest>);
}
/**
 * Request model for DeleteFieldWithoutNodePath operation.
 */
export declare class DeleteFieldWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteFieldWithoutNodePathRequest>);
}
/**
 * Request model for DeleteFields operation.
 */
export declare class DeleteFieldsRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node, which contains collection of fields.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteFieldsRequest>);
}
/**
 * Request model for DeleteFieldsWithoutNodePath operation.
 */
export declare class DeleteFieldsWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteFieldsWithoutNodePathRequest>);
}
/**
 * Request model for DeleteFile operation.
 */
export declare class DeleteFileRequest {
    /**
     * Path of the file including file name and extension e.g. /Folder1/file.ext
     */
    path: string;
    /**
     * Storage name
     */
    storageName: string;
    /**
     * File version ID to delete
     */
    versionId: string;
    constructor(init?: Partial<DeleteFileRequest>);
}
/**
 * Request model for DeleteFolder operation.
 */
export declare class DeleteFolderRequest {
    /**
     * Folder path e.g. /Folder1s
     */
    path: string;
    /**
     * Storage name
     */
    storageName: string;
    /**
     * Enable to delete folders, subfolders and files
     */
    recursive: boolean;
    constructor(init?: Partial<DeleteFolderRequest>);
}
/**
 * Request model for DeleteFootnote operation.
 */
export declare class DeleteFootnoteRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node, which contains collection of footnotes.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteFootnoteRequest>);
}
/**
 * Request model for DeleteFootnoteWithoutNodePath operation.
 */
export declare class DeleteFootnoteWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteFootnoteWithoutNodePathRequest>);
}
/**
 * Request model for DeleteFormField operation.
 */
export declare class DeleteFormFieldRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node that contains collection of formfields.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteFormFieldRequest>);
}
/**
 * Request model for DeleteFormFieldWithoutNodePath operation.
 */
export declare class DeleteFormFieldWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteFormFieldWithoutNodePathRequest>);
}
/**
 * Request model for DeleteHeaderFooter operation.
 */
export declare class DeleteHeaderFooterRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to parent section.
     */
    sectionPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteHeaderFooterRequest>);
}
/**
 * Request model for DeleteHeadersFooters operation.
 */
export declare class DeleteHeadersFootersRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to parent section.
     */
    sectionPath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * List of types of headers and footers.
     */
    headersFootersTypes: string;
    constructor(init?: Partial<DeleteHeadersFootersRequest>);
}
/**
 * Request model for DeleteMacros operation.
 */
export declare class DeleteMacrosRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteMacrosRequest>);
}
/**
 * Request model for DeleteOfficeMathObject operation.
 */
export declare class DeleteOfficeMathObjectRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node, which contains collection of OfficeMath objects.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteOfficeMathObjectRequest>);
}
/**
 * Request model for DeleteOfficeMathObjectWithoutNodePath operation.
 */
export declare class DeleteOfficeMathObjectWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteOfficeMathObjectWithoutNodePathRequest>);
}
/**
 * Request model for DeleteParagraph operation.
 */
export declare class DeleteParagraphRequest {
    /**
     * The file name.
     */
    name: string;
    /**
     * Path to the node which contains paragraphs.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteParagraphRequest>);
}
/**
 * Request model for DeleteParagraphListFormat operation.
 */
export declare class DeleteParagraphListFormatRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node which contains paragraphs.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteParagraphListFormatRequest>);
}
/**
 * Request model for DeleteParagraphListFormatWithoutNodePath operation.
 */
export declare class DeleteParagraphListFormatWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteParagraphListFormatWithoutNodePathRequest>);
}
/**
 * Request model for DeleteParagraphTabStop operation.
 */
export declare class DeleteParagraphTabStopRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * a tab stop position to remove.
     */
    position: number;
    /**
     * Path to the node which contains paragraph.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    constructor(init?: Partial<DeleteParagraphTabStopRequest>);
}
/**
 * Request model for DeleteParagraphTabStopWithoutNodePath operation.
 */
export declare class DeleteParagraphTabStopWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * a tab stop position to remove.
     */
    position: number;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    constructor(init?: Partial<DeleteParagraphTabStopWithoutNodePathRequest>);
}
/**
 * Request model for DeleteParagraphWithoutNodePath operation.
 */
export declare class DeleteParagraphWithoutNodePathRequest {
    /**
     * The file name.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteParagraphWithoutNodePathRequest>);
}
/**
 * Request model for DeleteRun operation.
 */
export declare class DeleteRunRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to parent paragraph.
     */
    paragraphPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteRunRequest>);
}
/**
 * Request model for DeleteSection operation.
 */
export declare class DeleteSectionRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Section index.
     */
    sectionIndex: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteSectionRequest>);
}
/**
 * Request model for DeleteTable operation.
 */
export declare class DeleteTableRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node, which contains tables.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteTableRequest>);
}
/**
 * Request model for DeleteTableCell operation.
 */
export declare class DeleteTableCellRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to table row.
     */
    tableRowPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteTableCellRequest>);
}
/**
 * Request model for DeleteTableRow operation.
 */
export declare class DeleteTableRowRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to table.
     */
    tablePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteTableRowRequest>);
}
/**
 * Request model for DeleteTableWithoutNodePath operation.
 */
export declare class DeleteTableWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteTableWithoutNodePathRequest>);
}
/**
 * Request model for DeleteWatermark operation.
 */
export declare class DeleteWatermarkRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<DeleteWatermarkRequest>);
}
/**
 * Request model for DownloadFile operation.
 */
export declare class DownloadFileRequest {
    /**
     * Path of the file including the file name and extension e.g. /folder1/file.ext
     */
    path: string;
    /**
     * Storage name
     */
    storageName: string;
    /**
     * File version ID to download
     */
    versionId: string;
    constructor(init?: Partial<DownloadFileRequest>);
}
/**
 * Request model for ExecuteMailMerge operation.
 */
export declare class ExecuteMailMergeRequest {
    /**
     * The template name.
     */
    name: string;
    /**
     * Mail merge data
     */
    data: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * With regions flag.
     */
    withRegions: boolean;
    /**
     * Mail merge data.
     */
    mailMergeDataFile: string;
    /**
     * Clean up options.
     */
    cleanup: string;
    /**
     * Gets or sets a value indicating whether paragraph with TableStart or.             TableEnd field should be fully included into mail merge region or particular range between TableStart and TableEnd fields.             The default value is true.
     */
    useWholeParagraphAsRegion: boolean;
    /**
     * Result name of the document after the operation. If this parameter is omitted then result of the operation will be saved with autogenerated name.
     */
    destFileName: string;
    constructor(init?: Partial<ExecuteMailMergeRequest>);
}
/**
 * Request model for ExecuteMailMergeOnline operation.
 */
export declare class ExecuteMailMergeOnlineRequest {
    /**
     * File with template
     */
    template: Readable;
    /**
     * File with mailmerge data
     */
    data: Readable;
    /**
     * With regions flag.
     */
    withRegions: boolean;
    /**
     * Clean up options.
     */
    cleanup: string;
    /**
     * This file name will be used when resulting document has dynamic field for document file name {filename}. If it is not set, "template" will be used instead.
     */
    documentFileName: string;
    constructor(init?: Partial<ExecuteMailMergeOnlineRequest>);
}
/**
 * Request model for GetAvailableFonts operation.
 */
export declare class GetAvailableFontsRequest {
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    constructor(init?: Partial<GetAvailableFontsRequest>);
}
/**
 * Request model for GetBookmarkByName operation.
 */
export declare class GetBookmarkByNameRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * The bookmark name.
     */
    bookmarkName: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetBookmarkByNameRequest>);
}
/**
 * Request model for GetBookmarks operation.
 */
export declare class GetBookmarksRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetBookmarksRequest>);
}
/**
 * Request model for GetBorder operation.
 */
export declare class GetBorderRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node with border(node should be paragraph, cell or row).
     */
    nodePath: string;
    /**
     * Border type.
     */
    borderType: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetBorderRequest>);
}
/**
 * Request model for GetBorders operation.
 */
export declare class GetBordersRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node with borders (node should be paragraph, cell or row).
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetBordersRequest>);
}
/**
 * Request model for GetComment operation.
 */
export declare class GetCommentRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * The comment index.
     */
    commentIndex: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetCommentRequest>);
}
/**
 * Request model for GetComments operation.
 */
export declare class GetCommentsRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetCommentsRequest>);
}
/**
 * Request model for GetDocument operation.
 */
export declare class GetDocumentRequest {
    /**
     * The document name.
     */
    documentName: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetDocumentRequest>);
}
/**
 * Request model for GetDocumentDrawingObjectByIndex operation.
 */
export declare class GetDocumentDrawingObjectByIndexRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node, which contains collection of drawing objects.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetDocumentDrawingObjectByIndexRequest>);
}
/**
 * Request model for GetDocumentDrawingObjectByIndexWithoutNodePath operation.
 */
export declare class GetDocumentDrawingObjectByIndexWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetDocumentDrawingObjectByIndexWithoutNodePathRequest>);
}
/**
 * Request model for GetDocumentDrawingObjectImageData operation.
 */
export declare class GetDocumentDrawingObjectImageDataRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node, which contains collection of drawing objects.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetDocumentDrawingObjectImageDataRequest>);
}
/**
 * Request model for GetDocumentDrawingObjectImageDataWithoutNodePath operation.
 */
export declare class GetDocumentDrawingObjectImageDataWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetDocumentDrawingObjectImageDataWithoutNodePathRequest>);
}
/**
 * Request model for GetDocumentDrawingObjectOleData operation.
 */
export declare class GetDocumentDrawingObjectOleDataRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node, which contains collection of drawing objects.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetDocumentDrawingObjectOleDataRequest>);
}
/**
 * Request model for GetDocumentDrawingObjectOleDataWithoutNodePath operation.
 */
export declare class GetDocumentDrawingObjectOleDataWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetDocumentDrawingObjectOleDataWithoutNodePathRequest>);
}
/**
 * Request model for GetDocumentDrawingObjects operation.
 */
export declare class GetDocumentDrawingObjectsRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node, which contains collection of drawing objects.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetDocumentDrawingObjectsRequest>);
}
/**
 * Request model for GetDocumentDrawingObjectsWithoutNodePath operation.
 */
export declare class GetDocumentDrawingObjectsWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetDocumentDrawingObjectsWithoutNodePathRequest>);
}
/**
 * Request model for GetDocumentFieldNames operation.
 */
export declare class GetDocumentFieldNamesRequest {
    /**
     * The template name.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * If true, result includes "mustache" field names.
     */
    useNonMergeFields: boolean;
    constructor(init?: Partial<GetDocumentFieldNamesRequest>);
}
/**
 * Request model for GetDocumentFieldNamesOnline operation.
 */
export declare class GetDocumentFieldNamesOnlineRequest {
    /**
     * File with template
     */
    template: Readable;
    /**
     * Use non merge fields or not.
     */
    useNonMergeFields: boolean;
    constructor(init?: Partial<GetDocumentFieldNamesOnlineRequest>);
}
/**
 * Request model for GetDocumentHyperlinkByIndex operation.
 */
export declare class GetDocumentHyperlinkByIndexRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * The hyperlink index.
     */
    hyperlinkIndex: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetDocumentHyperlinkByIndexRequest>);
}
/**
 * Request model for GetDocumentHyperlinks operation.
 */
export declare class GetDocumentHyperlinksRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetDocumentHyperlinksRequest>);
}
/**
 * Request model for GetDocumentProperties operation.
 */
export declare class GetDocumentPropertiesRequest {
    /**
     * The document's name.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetDocumentPropertiesRequest>);
}
/**
 * Request model for GetDocumentProperty operation.
 */
export declare class GetDocumentPropertyRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * The property name.
     */
    propertyName: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetDocumentPropertyRequest>);
}
/**
 * Request model for GetDocumentProtection operation.
 */
export declare class GetDocumentProtectionRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetDocumentProtectionRequest>);
}
/**
 * Request model for GetDocumentStatistics operation.
 */
export declare class GetDocumentStatisticsRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Support including/excluding comments from the WordCount. Default value is "false".
     */
    includeComments: boolean;
    /**
     * Support including/excluding footnotes from the WordCount. Default value is "false".
     */
    includeFootnotes: boolean;
    /**
     * Support including/excluding shape's text from the WordCount. Default value is "false".
     */
    includeTextInShapes: boolean;
    constructor(init?: Partial<GetDocumentStatisticsRequest>);
}
/**
 * Request model for GetDocumentWithFormat operation.
 */
export declare class GetDocumentWithFormatRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * The destination format.
     */
    format: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Path to save the result.
     */
    outPath: string;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    constructor(init?: Partial<GetDocumentWithFormatRequest>);
}
/**
 * Request model for GetField operation.
 */
export declare class GetFieldRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node, which contains collection of fields.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetFieldRequest>);
}
/**
 * Request model for GetFieldWithoutNodePath operation.
 */
export declare class GetFieldWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetFieldWithoutNodePathRequest>);
}
/**
 * Request model for GetFields operation.
 */
export declare class GetFieldsRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node, which contains collection of fields.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetFieldsRequest>);
}
/**
 * Request model for GetFieldsWithoutNodePath operation.
 */
export declare class GetFieldsWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetFieldsWithoutNodePathRequest>);
}
/**
 * Request model for GetFilesList operation.
 */
export declare class GetFilesListRequest {
    /**
     * Folder path e.g. /Folder1
     */
    path: string;
    /**
     * Storage name
     */
    storageName: string;
    constructor(init?: Partial<GetFilesListRequest>);
}
/**
 * Request model for GetFootnote operation.
 */
export declare class GetFootnoteRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node, which contains collection of footnotes.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetFootnoteRequest>);
}
/**
 * Request model for GetFootnoteWithoutNodePath operation.
 */
export declare class GetFootnoteWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetFootnoteWithoutNodePathRequest>);
}
/**
 * Request model for GetFootnotes operation.
 */
export declare class GetFootnotesRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node, which contains collection of footnotes.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetFootnotesRequest>);
}
/**
 * Request model for GetFootnotesWithoutNodePath operation.
 */
export declare class GetFootnotesWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetFootnotesWithoutNodePathRequest>);
}
/**
 * Request model for GetFormField operation.
 */
export declare class GetFormFieldRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node that contains collection of formfields.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetFormFieldRequest>);
}
/**
 * Request model for GetFormFieldWithoutNodePath operation.
 */
export declare class GetFormFieldWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetFormFieldWithoutNodePathRequest>);
}
/**
 * Request model for GetFormFields operation.
 */
export declare class GetFormFieldsRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node containing collection of form fields.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetFormFieldsRequest>);
}
/**
 * Request model for GetFormFieldsWithoutNodePath operation.
 */
export declare class GetFormFieldsWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetFormFieldsWithoutNodePathRequest>);
}
/**
 * Request model for GetHeaderFooter operation.
 */
export declare class GetHeaderFooterRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Header/footer index.
     */
    headerFooterIndex: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * List of types of headers and footers.
     */
    filterByType: string;
    constructor(init?: Partial<GetHeaderFooterRequest>);
}
/**
 * Request model for GetHeaderFooterOfSection operation.
 */
export declare class GetHeaderFooterOfSectionRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Header/footer index.
     */
    headerFooterIndex: number;
    /**
     * Section index.
     */
    sectionIndex: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * List of types of headers and footers.
     */
    filterByType: string;
    constructor(init?: Partial<GetHeaderFooterOfSectionRequest>);
}
/**
 * Request model for GetHeaderFooters operation.
 */
export declare class GetHeaderFootersRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to parent section.
     */
    sectionPath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * List of types of headers and footers.
     */
    filterByType: string;
    constructor(init?: Partial<GetHeaderFootersRequest>);
}
/**
 * Request model for GetList operation.
 */
export declare class GetListRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * List unique identifier.
     */
    listId: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetListRequest>);
}
/**
 * Request model for GetLists operation.
 */
export declare class GetListsRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetListsRequest>);
}
/**
 * Request model for GetOfficeMathObject operation.
 */
export declare class GetOfficeMathObjectRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node, which contains collection of OfficeMath objects.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetOfficeMathObjectRequest>);
}
/**
 * Request model for GetOfficeMathObjectWithoutNodePath operation.
 */
export declare class GetOfficeMathObjectWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetOfficeMathObjectWithoutNodePathRequest>);
}
/**
 * Request model for GetOfficeMathObjects operation.
 */
export declare class GetOfficeMathObjectsRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node, which contains collection of OfficeMath objects.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetOfficeMathObjectsRequest>);
}
/**
 * Request model for GetOfficeMathObjectsWithoutNodePath operation.
 */
export declare class GetOfficeMathObjectsWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetOfficeMathObjectsWithoutNodePathRequest>);
}
/**
 * Request model for GetParagraph operation.
 */
export declare class GetParagraphRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node which contains paragraphs.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetParagraphRequest>);
}
/**
 * Request model for GetParagraphFormat operation.
 */
export declare class GetParagraphFormatRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node which contains paragraphs.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetParagraphFormatRequest>);
}
/**
 * Request model for GetParagraphFormatWithoutNodePath operation.
 */
export declare class GetParagraphFormatWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetParagraphFormatWithoutNodePathRequest>);
}
/**
 * Request model for GetParagraphListFormat operation.
 */
export declare class GetParagraphListFormatRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node which contains paragraphs.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetParagraphListFormatRequest>);
}
/**
 * Request model for GetParagraphListFormatWithoutNodePath operation.
 */
export declare class GetParagraphListFormatWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetParagraphListFormatWithoutNodePathRequest>);
}
/**
 * Request model for GetParagraphTabStops operation.
 */
export declare class GetParagraphTabStopsRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node which contains paragraph.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetParagraphTabStopsRequest>);
}
/**
 * Request model for GetParagraphTabStopsWithoutNodePath operation.
 */
export declare class GetParagraphTabStopsWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetParagraphTabStopsWithoutNodePathRequest>);
}
/**
 * Request model for GetParagraphWithoutNodePath operation.
 */
export declare class GetParagraphWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetParagraphWithoutNodePathRequest>);
}
/**
 * Request model for GetParagraphs operation.
 */
export declare class GetParagraphsRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node which contains paragraphs.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetParagraphsRequest>);
}
/**
 * Request model for GetParagraphsWithoutNodePath operation.
 */
export declare class GetParagraphsWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetParagraphsWithoutNodePathRequest>);
}
/**
 * Request model for GetRangeText operation.
 */
export declare class GetRangeTextRequest {
    /**
     * The document.
     */
    name: string;
    /**
     * The range start identifier. Identifier is the value of the "nodeId" field, which every document node has, extended with the prefix "id". It looks like "id0.0.7". Also values like "image5" and "table3" can be used as an identifier for images and tables, where the number is an index of the image/table.
     */
    rangeStartIdentifier: string;
    /**
     * The range end identifier.
     */
    rangeEndIdentifier: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetRangeTextRequest>);
}
/**
 * Request model for GetRun operation.
 */
export declare class GetRunRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to parent paragraph.
     */
    paragraphPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetRunRequest>);
}
/**
 * Request model for GetRunFont operation.
 */
export declare class GetRunFontRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to parent paragraph.
     */
    paragraphPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetRunFontRequest>);
}
/**
 * Request model for GetRuns operation.
 */
export declare class GetRunsRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to parent paragraph.
     */
    paragraphPath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetRunsRequest>);
}
/**
 * Request model for GetSection operation.
 */
export declare class GetSectionRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Section index.
     */
    sectionIndex: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetSectionRequest>);
}
/**
 * Request model for GetSectionPageSetup operation.
 */
export declare class GetSectionPageSetupRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Section index.
     */
    sectionIndex: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetSectionPageSetupRequest>);
}
/**
 * Request model for GetSections operation.
 */
export declare class GetSectionsRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetSectionsRequest>);
}
/**
 * Request model for GetStyle operation.
 */
export declare class GetStyleRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Style name.
     */
    styleName: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetStyleRequest>);
}
/**
 * Request model for GetStyleFromDocumentElement operation.
 */
export declare class GetStyleFromDocumentElementRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * The path to the node that supports a style. Supported node types: ParagraphFormat, List, ListLevel, Table.
     */
    styledNodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetStyleFromDocumentElementRequest>);
}
/**
 * Request model for GetStyles operation.
 */
export declare class GetStylesRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetStylesRequest>);
}
/**
 * Request model for GetTable operation.
 */
export declare class GetTableRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node, which contains tables.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetTableRequest>);
}
/**
 * Request model for GetTableCell operation.
 */
export declare class GetTableCellRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to table row.
     */
    tableRowPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetTableCellRequest>);
}
/**
 * Request model for GetTableCellFormat operation.
 */
export declare class GetTableCellFormatRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to table row.
     */
    tableRowPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetTableCellFormatRequest>);
}
/**
 * Request model for GetTableProperties operation.
 */
export declare class GetTablePropertiesRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node, which contains tables.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetTablePropertiesRequest>);
}
/**
 * Request model for GetTablePropertiesWithoutNodePath operation.
 */
export declare class GetTablePropertiesWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetTablePropertiesWithoutNodePathRequest>);
}
/**
 * Request model for GetTableRow operation.
 */
export declare class GetTableRowRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to table.
     */
    tablePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetTableRowRequest>);
}
/**
 * Request model for GetTableRowFormat operation.
 */
export declare class GetTableRowFormatRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to table.
     */
    tablePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetTableRowFormatRequest>);
}
/**
 * Request model for GetTableWithoutNodePath operation.
 */
export declare class GetTableWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetTableWithoutNodePathRequest>);
}
/**
 * Request model for GetTables operation.
 */
export declare class GetTablesRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node, which contains tables.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetTablesRequest>);
}
/**
 * Request model for GetTablesWithoutNodePath operation.
 */
export declare class GetTablesWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<GetTablesWithoutNodePathRequest>);
}
/**
 * Request model for InsertComment operation.
 */
export declare class InsertCommentRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * The comment data.
     */
    comment: importedCommentInsert.CommentInsert;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<InsertCommentRequest>);
}
/**
 * Request model for InsertDrawingObject operation.
 */
export declare class InsertDrawingObjectRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Drawing object parameters.
     */
    drawingObject: importedDrawingObjectInsert.DrawingObjectInsert;
    /**
     * File with image
     */
    imageFile: Readable;
    /**
     * Path to the node, which contains collection of drawing objects.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<InsertDrawingObjectRequest>);
}
/**
 * Request model for InsertDrawingObjectWithoutNodePath operation.
 */
export declare class InsertDrawingObjectWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Drawing object parameters.
     */
    drawingObject: importedDrawingObjectInsert.DrawingObjectInsert;
    /**
     * File with image
     */
    imageFile: Readable;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<InsertDrawingObjectWithoutNodePathRequest>);
}
/**
 * Request model for InsertField operation.
 */
export declare class InsertFieldRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Field data.
     */
    field: importedFieldInsert.FieldInsert;
    /**
     * Path to the node, which contains collection of fields.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * Field will be inserted before node with id="nodeId".
     */
    insertBeforeNode: string;
    constructor(init?: Partial<InsertFieldRequest>);
}
/**
 * Request model for InsertFieldWithoutNodePath operation.
 */
export declare class InsertFieldWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Field data.
     */
    field: importedFieldInsert.FieldInsert;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * Field will be inserted before node with id="nodeId".
     */
    insertBeforeNode: string;
    constructor(init?: Partial<InsertFieldWithoutNodePathRequest>);
}
/**
 * Request model for InsertFootnote operation.
 */
export declare class InsertFootnoteRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Footnote data.
     */
    footnoteDto: importedFootnoteInsert.FootnoteInsert;
    /**
     * Path to the node, which contains collection of footnotes.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<InsertFootnoteRequest>);
}
/**
 * Request model for InsertFootnoteWithoutNodePath operation.
 */
export declare class InsertFootnoteWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Footnote data.
     */
    footnoteDto: importedFootnoteInsert.FootnoteInsert;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<InsertFootnoteWithoutNodePathRequest>);
}
/**
 * Request model for InsertFormField operation.
 */
export declare class InsertFormFieldRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * From field data.
     */
    formField: importedFormField.FormField;
    /**
     * Path to the node that contains collection of formfields.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * Form field will be inserted before node with index.
     */
    insertBeforeNode: string;
    constructor(init?: Partial<InsertFormFieldRequest>);
}
/**
 * Request model for InsertFormFieldWithoutNodePath operation.
 */
export declare class InsertFormFieldWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * From field data.
     */
    formField: importedFormField.FormField;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * Form field will be inserted before node with index.
     */
    insertBeforeNode: string;
    constructor(init?: Partial<InsertFormFieldWithoutNodePathRequest>);
}
/**
 * Request model for InsertHeaderFooter operation.
 */
export declare class InsertHeaderFooterRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Type of header/footer.
     */
    headerFooterType: string;
    /**
     * Path to parent section.
     */
    sectionPath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<InsertHeaderFooterRequest>);
}
/**
 * Request model for InsertList operation.
 */
export declare class InsertListRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * List to insert.
     */
    listInsert: importedListInsert.ListInsert;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<InsertListRequest>);
}
/**
 * Request model for InsertOrUpdateParagraphTabStop operation.
 */
export declare class InsertOrUpdateParagraphTabStopRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Paragraph tab stop.
     */
    dto: importedTabStopInsert.TabStopInsert;
    /**
     * Path to the node which contains paragraph.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    constructor(init?: Partial<InsertOrUpdateParagraphTabStopRequest>);
}
/**
 * Request model for InsertOrUpdateParagraphTabStopWithoutNodePath operation.
 */
export declare class InsertOrUpdateParagraphTabStopWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Paragraph tab stop.
     */
    dto: importedTabStopInsert.TabStopInsert;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    constructor(init?: Partial<InsertOrUpdateParagraphTabStopWithoutNodePathRequest>);
}
/**
 * Request model for InsertPageNumbers operation.
 */
export declare class InsertPageNumbersRequest {
    /**
     * A document name.
     */
    name: string;
    /**
     * PageNumber with the page numbers settings.
     */
    pageNumber: importedPageNumber.PageNumber;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<InsertPageNumbersRequest>);
}
/**
 * Request model for InsertParagraph operation.
 */
export declare class InsertParagraphRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Paragraph data.
     */
    paragraph: importedParagraphInsert.ParagraphInsert;
    /**
     * Path to the node which contains paragraphs.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * Paragraph will be inserted before node with index.
     */
    insertBeforeNode: string;
    constructor(init?: Partial<InsertParagraphRequest>);
}
/**
 * Request model for InsertParagraphWithoutNodePath operation.
 */
export declare class InsertParagraphWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Paragraph data.
     */
    paragraph: importedParagraphInsert.ParagraphInsert;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * Paragraph will be inserted before node with index.
     */
    insertBeforeNode: string;
    constructor(init?: Partial<InsertParagraphWithoutNodePathRequest>);
}
/**
 * Request model for InsertRun operation.
 */
export declare class InsertRunRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to parent paragraph.
     */
    paragraphPath: string;
    /**
     * Run data.
     */
    run: importedRunInsert.RunInsert;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * Paragraph will be inserted before node with index.
     */
    insertBeforeNode: string;
    constructor(init?: Partial<InsertRunRequest>);
}
/**
 * Request model for InsertStyle operation.
 */
export declare class InsertStyleRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Style to insert.
     */
    styleInsert: importedStyleInsert.StyleInsert;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<InsertStyleRequest>);
}
/**
 * Request model for InsertTable operation.
 */
export declare class InsertTableRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node, which contains tables.
     */
    nodePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * Table parameters/.
     */
    table: importedTableInsert.TableInsert;
    constructor(init?: Partial<InsertTableRequest>);
}
/**
 * Request model for InsertTableCell operation.
 */
export declare class InsertTableCellRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to table row.
     */
    tableRowPath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * Table cell parameters/.
     */
    cell: importedTableCellInsert.TableCellInsert;
    constructor(init?: Partial<InsertTableCellRequest>);
}
/**
 * Request model for InsertTableRow operation.
 */
export declare class InsertTableRowRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to table.
     */
    tablePath: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * Table row parameters/.
     */
    row: importedTableRowInsert.TableRowInsert;
    constructor(init?: Partial<InsertTableRowRequest>);
}
/**
 * Request model for InsertTableWithoutNodePath operation.
 */
export declare class InsertTableWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * Table parameters/.
     */
    table: importedTableInsert.TableInsert;
    constructor(init?: Partial<InsertTableWithoutNodePathRequest>);
}
/**
 * Request model for InsertWatermarkImage operation.
 */
export declare class InsertWatermarkImageRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * File with image
     */
    imageFile: Readable;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * The watermark rotation angle.
     */
    rotationAngle: number;
    /**
     * The image file server full name. If the name is empty the image is expected in request content.
     */
    image: string;
    constructor(init?: Partial<InsertWatermarkImageRequest>);
}
/**
 * Request model for InsertWatermarkText operation.
 */
export declare class InsertWatermarkTextRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * WatermarkText with the watermark data.
     */
    watermarkText: importedWatermarkText.WatermarkText;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<InsertWatermarkTextRequest>);
}
/**
 * Request model for LoadWebDocument operation.
 */
export declare class LoadWebDocumentRequest {
    /**
     * Parameters of loading.
     */
    data: importedLoadWebDocumentData.LoadWebDocumentData;
    /**
     * Original document storage.
     */
    storage: string;
    constructor(init?: Partial<LoadWebDocumentRequest>);
}
/**
 * Request model for MoveFile operation.
 */
export declare class MoveFileRequest {
    /**
     * Destination file path e.g. '/dest.ext'
     */
    destPath: string;
    /**
     * Source file's path e.g. '/Folder 1/file.ext' or '/Bucket/Folder 1/file.ext'
     */
    srcPath: string;
    /**
     * Source storage name
     */
    srcStorageName: string;
    /**
     * Destination storage name
     */
    destStorageName: string;
    /**
     * File version ID to move
     */
    versionId: string;
    constructor(init?: Partial<MoveFileRequest>);
}
/**
 * Request model for MoveFolder operation.
 */
export declare class MoveFolderRequest {
    /**
     * Destination folder path to move to e.g '/dst'
     */
    destPath: string;
    /**
     * Source folder path e.g. /Folder1
     */
    srcPath: string;
    /**
     * Source storage name
     */
    srcStorageName: string;
    /**
     * Destination storage name
     */
    destStorageName: string;
    constructor(init?: Partial<MoveFolderRequest>);
}
/**
 * Request model for ProtectDocument operation.
 */
export declare class ProtectDocumentRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * ProtectionRequest with protection settings.
     */
    protectionRequest: importedProtectionRequest.ProtectionRequest;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    constructor(init?: Partial<ProtectDocumentRequest>);
}
/**
 * Request model for RejectAllRevisions operation.
 */
export declare class RejectAllRevisionsRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    constructor(init?: Partial<RejectAllRevisionsRequest>);
}
/**
 * Request model for RemoveRange operation.
 */
export declare class RemoveRangeRequest {
    /**
     * The document.
     */
    name: string;
    /**
     * The range start identifier. Identifier is the value of the "nodeId" field, which every document node has, extended with the prefix "id". It looks like "id0.0.7". Also values like "image5" and "table3" can be used as an identifier for images and tables, where the number is an index of the image/table.
     */
    rangeStartIdentifier: string;
    /**
     * The range end identifier.
     */
    rangeEndIdentifier: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    constructor(init?: Partial<RemoveRangeRequest>);
}
/**
 * Request model for RenderDrawingObject operation.
 */
export declare class RenderDrawingObjectRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * The destination format.
     */
    format: string;
    /**
     * Path to the node, which contains drawing objects.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    constructor(init?: Partial<RenderDrawingObjectRequest>);
}
/**
 * Request model for RenderDrawingObjectWithoutNodePath operation.
 */
export declare class RenderDrawingObjectWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * The destination format.
     */
    format: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    constructor(init?: Partial<RenderDrawingObjectWithoutNodePathRequest>);
}
/**
 * Request model for RenderMathObject operation.
 */
export declare class RenderMathObjectRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * The destination format.
     */
    format: string;
    /**
     * Path to the node, which contains office math objects.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    constructor(init?: Partial<RenderMathObjectRequest>);
}
/**
 * Request model for RenderMathObjectWithoutNodePath operation.
 */
export declare class RenderMathObjectWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * The destination format.
     */
    format: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    constructor(init?: Partial<RenderMathObjectWithoutNodePathRequest>);
}
/**
 * Request model for RenderPage operation.
 */
export declare class RenderPageRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Comment index.
     */
    pageIndex: number;
    /**
     * The destination format.
     */
    format: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    constructor(init?: Partial<RenderPageRequest>);
}
/**
 * Request model for RenderParagraph operation.
 */
export declare class RenderParagraphRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * The destination format.
     */
    format: string;
    /**
     * Path to the node, which contains paragraphs.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    constructor(init?: Partial<RenderParagraphRequest>);
}
/**
 * Request model for RenderParagraphWithoutNodePath operation.
 */
export declare class RenderParagraphWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * The destination format.
     */
    format: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    constructor(init?: Partial<RenderParagraphWithoutNodePathRequest>);
}
/**
 * Request model for RenderTable operation.
 */
export declare class RenderTableRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * The destination format.
     */
    format: string;
    /**
     * Path to the node, which contains tables.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    constructor(init?: Partial<RenderTableRequest>);
}
/**
 * Request model for RenderTableWithoutNodePath operation.
 */
export declare class RenderTableWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * The destination format.
     */
    format: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    constructor(init?: Partial<RenderTableWithoutNodePathRequest>);
}
/**
 * Request model for ReplaceText operation.
 */
export declare class ReplaceTextRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * ReplaceTextResponse with the replace operation settings.
     */
    replaceText: importedReplaceTextParameters.ReplaceTextParameters;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<ReplaceTextRequest>);
}
/**
 * Request model for ReplaceWithText operation.
 */
export declare class ReplaceWithTextRequest {
    /**
     * The document.
     */
    name: string;
    /**
     * The range start identifier. Identifier is the value of the "nodeId" field, which every document node has, extended with the prefix "id". It looks like "id0.0.7". Also values like "image5" and "table3" can be used as an identifier for images and tables, where the number is an index of the image/table.
     */
    rangeStartIdentifier: string;
    /**
     * Model with text for replacement.
     */
    rangeText: importedReplaceRange.ReplaceRange;
    /**
     * The range end identifier.
     */
    rangeEndIdentifier: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    constructor(init?: Partial<ReplaceWithTextRequest>);
}
/**
 * Request model for ResetCache operation.
 */
export declare class ResetCacheRequest {
    constructor(init?: Partial<ResetCacheRequest>);
}
/**
 * Request model for SaveAs operation.
 */
export declare class SaveAsRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Save options.
     */
    saveOptionsData: importedSaveOptionsData.SaveOptionsData;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    constructor(init?: Partial<SaveAsRequest>);
}
/**
 * Request model for SaveAsRange operation.
 */
export declare class SaveAsRangeRequest {
    /**
     * The document.
     */
    name: string;
    /**
     * The range start identifier. Identifier is the value of the "nodeId" field, which every document node has, extended with the prefix "id". It looks like "id0.0.7". Also values like "image5" and "table3" can be used as an identifier for images and tables, where the number is an index of the image/table.
     */
    rangeStartIdentifier: string;
    /**
     * Parameters of a new document.
     */
    documentParameters: importedRangeDocument.RangeDocument;
    /**
     * The range end identifier.
     */
    rangeEndIdentifier: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<SaveAsRangeRequest>);
}
/**
 * Request model for SaveAsTiff operation.
 */
export declare class SaveAsTiffRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Tiff save options.
     */
    saveOptions: importedTiffSaveOptionsData.TiffSaveOptionsData;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Use antialiasing flag.
     */
    useAntiAliasing: boolean;
    /**
     * Use high quality flag.
     */
    useHighQualityRendering: boolean;
    /**
     * Brightness for the generated images.
     */
    imageBrightness: number;
    /**
     * Color mode for the generated images.
     */
    imageColorMode: string;
    /**
     * The contrast for the generated images.
     */
    imageContrast: number;
    /**
     * The images numeral format.
     */
    numeralFormat: string;
    /**
     * Number of pages to render.
     */
    pageCount: number;
    /**
     * Page index to start rendering.
     */
    pageIndex: number;
    /**
     * Background image color.
     */
    paperColor: string;
    /**
     * The pixel format of generated images.
     */
    pixelFormat: string;
    /**
     * The resolution of generated images.
     */
    resolution: number;
    /**
     * Zoom factor for generated images.
     */
    scale: number;
    /**
     * The compression tipe.
     */
    tiffCompression: string;
    /**
     * Optional, default is Fallback.
     */
    dmlRenderingMode: string;
    /**
     * Optional, default is Simplified.
     */
    dmlEffectsRenderingMode: string;
    /**
     * Optional, Tiff binarization method, possible values are: FloydSteinbergDithering, Threshold.
     */
    tiffBinarizationMethod: string;
    /**
     * Optional. A value determining zip output or not.
     */
    zipOutput: boolean;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    constructor(init?: Partial<SaveAsTiffRequest>);
}
/**
 * Request model for Search operation.
 */
export declare class SearchRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * The regular expression used to find matches.
     */
    pattern: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    constructor(init?: Partial<SearchRequest>);
}
/**
 * Request model for SplitDocument operation.
 */
export declare class SplitDocumentRequest {
    /**
     * Original document name.
     */
    name: string;
    /**
     * Format to split.
     */
    format: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Start page.
     */
    from: number;
    /**
     * End page.
     */
    to: number;
    /**
     * ZipOutput or not.
     */
    zipOutput: boolean;
    /**
     * Folder in filestorage with custom fonts.
     */
    fontsLocation: string;
    constructor(init?: Partial<SplitDocumentRequest>);
}
/**
 * Request model for UnprotectDocument operation.
 */
export declare class UnprotectDocumentRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * ProtectionRequest with protection settings.
     */
    protectionRequest: importedProtectionRequest.ProtectionRequest;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    constructor(init?: Partial<UnprotectDocumentRequest>);
}
/**
 * Request model for UpdateBookmark operation.
 */
export declare class UpdateBookmarkRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * BookmarkData with new bookmark data.
     */
    bookmarkData: importedBookmarkData.BookmarkData;
    /**
     * The bookmark name.
     */
    bookmarkName: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<UpdateBookmarkRequest>);
}
/**
 * Request model for UpdateBorder operation.
 */
export declare class UpdateBorderRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Border properties.
     */
    borderProperties: importedBorder.Border;
    /**
     * Path to the node with border(node should be paragraph, cell or row).
     */
    nodePath: string;
    /**
     * Border type.
     */
    borderType: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<UpdateBorderRequest>);
}
/**
 * Request model for UpdateComment operation.
 */
export declare class UpdateCommentRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * The comment index.
     */
    commentIndex: number;
    /**
     * The comment data.
     */
    comment: importedCommentUpdate.CommentUpdate;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<UpdateCommentRequest>);
}
/**
 * Request model for UpdateDrawingObject operation.
 */
export declare class UpdateDrawingObjectRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Drawing object parameters
     */
    drawingObject: importedDrawingObjectUpdate.DrawingObjectUpdate;
    /**
     * File with image
     */
    imageFile: Readable;
    /**
     * Path to the node, which contains collection of drawing objects.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<UpdateDrawingObjectRequest>);
}
/**
 * Request model for UpdateDrawingObjectWithoutNodePath operation.
 */
export declare class UpdateDrawingObjectWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Drawing object parameters
     */
    drawingObject: importedDrawingObjectUpdate.DrawingObjectUpdate;
    /**
     * File with image
     */
    imageFile: Readable;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<UpdateDrawingObjectWithoutNodePathRequest>);
}
/**
 * Request model for UpdateField operation.
 */
export declare class UpdateFieldRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Field data.
     */
    field: importedFieldUpdate.FieldUpdate;
    /**
     * Path to the node, which contains collection of fields.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<UpdateFieldRequest>);
}
/**
 * Request model for UpdateFields operation.
 */
export declare class UpdateFieldsRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    constructor(init?: Partial<UpdateFieldsRequest>);
}
/**
 * Request model for UpdateFootnote operation.
 */
export declare class UpdateFootnoteRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Footnote data.
     */
    footnoteDto: importedFootnoteUpdate.FootnoteUpdate;
    /**
     * Path to the node, which contains collection of footnotes.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<UpdateFootnoteRequest>);
}
/**
 * Request model for UpdateFootnoteWithoutNodePath operation.
 */
export declare class UpdateFootnoteWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Footnote data.
     */
    footnoteDto: importedFootnoteUpdate.FootnoteUpdate;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<UpdateFootnoteWithoutNodePathRequest>);
}
/**
 * Request model for UpdateFormField operation.
 */
export declare class UpdateFormFieldRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * From field data.
     */
    formField: importedFormField.FormField;
    /**
     * Path to the node that contains collection of formfields.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<UpdateFormFieldRequest>);
}
/**
 * Request model for UpdateFormFieldWithoutNodePath operation.
 */
export declare class UpdateFormFieldWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * From field data.
     */
    formField: importedFormField.FormField;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<UpdateFormFieldWithoutNodePathRequest>);
}
/**
 * Request model for UpdateList operation.
 */
export declare class UpdateListRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * List object.
     */
    listUpdate: importedListUpdate.ListUpdate;
    /**
     * List unique identifier.
     */
    listId: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<UpdateListRequest>);
}
/**
 * Request model for UpdateListLevel operation.
 */
export declare class UpdateListLevelRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * List object.
     */
    listUpdate: importedListLevelUpdate.ListLevelUpdate;
    /**
     * List unique identifier.
     */
    listId: number;
    /**
     * List level identifier.
     */
    listLevel: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<UpdateListLevelRequest>);
}
/**
 * Request model for UpdateParagraphFormat operation.
 */
export declare class UpdateParagraphFormatRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Paragraph format object.
     */
    dto: importedParagraphFormat.ParagraphFormat;
    /**
     * Path to the node which contains paragraphs.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<UpdateParagraphFormatRequest>);
}
/**
 * Request model for UpdateParagraphFormatWithoutNodePath operation.
 */
export declare class UpdateParagraphFormatWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Paragraph format object.
     */
    dto: importedParagraphFormat.ParagraphFormat;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<UpdateParagraphFormatWithoutNodePathRequest>);
}
/**
 * Request model for UpdateParagraphListFormat operation.
 */
export declare class UpdateParagraphListFormatRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Paragraph format object.
     */
    dto: importedListFormatUpdate.ListFormatUpdate;
    /**
     * Path to the node which contains paragraphs.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<UpdateParagraphListFormatRequest>);
}
/**
 * Request model for UpdateParagraphListFormatWithoutNodePath operation.
 */
export declare class UpdateParagraphListFormatWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Paragraph format object.
     */
    dto: importedListFormatUpdate.ListFormatUpdate;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<UpdateParagraphListFormatWithoutNodePathRequest>);
}
/**
 * Request model for UpdateRun operation.
 */
export declare class UpdateRunRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Run data.
     */
    run: importedRunUpdate.RunUpdate;
    /**
     * Path to parent paragraph.
     */
    paragraphPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<UpdateRunRequest>);
}
/**
 * Request model for UpdateRunFont operation.
 */
export declare class UpdateRunFontRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Font dto object.
     */
    fontDto: importedFont.Font;
    /**
     * Path to parent paragraph.
     */
    paragraphPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<UpdateRunFontRequest>);
}
/**
 * Request model for UpdateSectionPageSetup operation.
 */
export declare class UpdateSectionPageSetupRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Section index.
     */
    sectionIndex: number;
    /**
     * Page setup properties dto.
     */
    pageSetup: importedPageSetup.PageSetup;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<UpdateSectionPageSetupRequest>);
}
/**
 * Request model for UpdateStyle operation.
 */
export declare class UpdateStyleRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Style properties to update.
     */
    styleUpdate: importedStyleUpdate.StyleUpdate;
    /**
     * Style name.
     */
    styleName: string;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    constructor(init?: Partial<UpdateStyleRequest>);
}
/**
 * Request model for UpdateTableCellFormat operation.
 */
export declare class UpdateTableCellFormatRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to table row.
     */
    tableRowPath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * The properties.
     */
    format: importedTableCellFormat.TableCellFormat;
    constructor(init?: Partial<UpdateTableCellFormatRequest>);
}
/**
 * Request model for UpdateTableProperties operation.
 */
export declare class UpdateTablePropertiesRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to the node, which contains tables.
     */
    nodePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * The properties.
     */
    properties: importedTableProperties.TableProperties;
    constructor(init?: Partial<UpdateTablePropertiesRequest>);
}
/**
 * Request model for UpdateTablePropertiesWithoutNodePath operation.
 */
export declare class UpdateTablePropertiesWithoutNodePathRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * The properties.
     */
    properties: importedTableProperties.TableProperties;
    constructor(init?: Partial<UpdateTablePropertiesWithoutNodePathRequest>);
}
/**
 * Request model for UpdateTableRowFormat operation.
 */
export declare class UpdateTableRowFormatRequest {
    /**
     * The document name.
     */
    name: string;
    /**
     * Path to table.
     */
    tablePath: string;
    /**
     * Object index.
     */
    index: number;
    /**
     * Original document folder.
     */
    folder: string;
    /**
     * Original document storage.
     */
    storage: string;
    /**
     * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.
     */
    loadEncoding: string;
    /**
     * Password for opening an encrypted document.
     */
    password: string;
    /**
     * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.
     */
    destFileName: string;
    /**
     * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.
     */
    revisionAuthor: string;
    /**
     * The date and time to use for revisions.
     */
    revisionDateTime: string;
    /**
     * Table row format.
     */
    format: importedTableRowFormat.TableRowFormat;
    constructor(init?: Partial<UpdateTableRowFormatRequest>);
}
/**
 * Request model for UploadFile operation.
 */
export declare class UploadFileRequest {
    /**
     * File to upload
     */
    fileContent: Readable;
    /**
     * Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.
     */
    path: string;
    /**
     * Storage name
     */
    storageName: string;
    constructor(init?: Partial<UploadFileRequest>);
}
