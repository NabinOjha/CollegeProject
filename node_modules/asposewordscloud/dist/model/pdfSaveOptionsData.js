"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const downsampleOptionsData_1 = require("./downsampleOptionsData");
const fixedPageSaveOptionsData_1 = require("./fixedPageSaveOptionsData");
const metafileRenderingOptionsData_1 = require("./metafileRenderingOptionsData");
const outlineOptionsData_1 = require("./outlineOptionsData");
const pdfDigitalSignatureDetailsData_1 = require("./pdfDigitalSignatureDetailsData");
const pdfEncryptionDetailsData_1 = require("./pdfEncryptionDetailsData");
exports.importsMapPdfSaveOptionsData = {
    DownsampleOptionsData: downsampleOptionsData_1.DownsampleOptionsData,
    FixedPageSaveOptionsData: fixedPageSaveOptionsData_1.FixedPageSaveOptionsData,
    MetafileRenderingOptionsData: metafileRenderingOptionsData_1.MetafileRenderingOptionsData,
    OutlineOptionsData: outlineOptionsData_1.OutlineOptionsData,
    PdfDigitalSignatureDetailsData: pdfDigitalSignatureDetailsData_1.PdfDigitalSignatureDetailsData,
    PdfEncryptionDetailsData: pdfEncryptionDetailsData_1.PdfEncryptionDetailsData,
};
/**
 * container class for pdf save options.
 */
class PdfSaveOptionsData extends fixedPageSaveOptionsData_1.FixedPageSaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(PdfSaveOptionsData.attributeTypeMap);
    }
}
exports.PdfSaveOptionsData = PdfSaveOptionsData;
/**
 * Attribute type map
 */
PdfSaveOptionsData.attributeTypeMap = [
    {
        name: "compliance",
        baseName: "Compliance",
        type: "string",
    },
    {
        name: "createNoteHyperlinks",
        baseName: "CreateNoteHyperlinks",
        type: "boolean",
    },
    {
        name: "customPropertiesExport",
        baseName: "CustomPropertiesExport",
        type: "string",
    },
    {
        name: "digitalSignatureDetails",
        baseName: "DigitalSignatureDetails",
        type: "PdfDigitalSignatureDetailsData",
    },
    {
        name: "displayDocTitle",
        baseName: "DisplayDocTitle",
        type: "boolean",
    },
    {
        name: "downsampleOptions",
        baseName: "DownsampleOptions",
        type: "DownsampleOptionsData",
    },
    {
        name: "embedFullFonts",
        baseName: "EmbedFullFonts",
        type: "boolean",
    },
    {
        name: "encryptionDetails",
        baseName: "EncryptionDetails",
        type: "PdfEncryptionDetailsData",
    },
    {
        name: "escapeUri",
        baseName: "EscapeUri",
        type: "boolean",
    },
    {
        name: "exportDocumentStructure",
        baseName: "ExportDocumentStructure",
        type: "boolean",
    },
    {
        name: "fontEmbeddingMode",
        baseName: "FontEmbeddingMode",
        type: "string",
    },
    {
        name: "headerFooterBookmarksExportMode",
        baseName: "HeaderFooterBookmarksExportMode",
        type: "PdfSaveOptionsData.HeaderFooterBookmarksExportModeEnum",
    },
    {
        name: "imageColorSpaceExportMode",
        baseName: "ImageColorSpaceExportMode",
        type: "string",
    },
    {
        name: "imageCompression",
        baseName: "ImageCompression",
        type: "string",
    },
    {
        name: "interpolateImages",
        baseName: "InterpolateImages",
        type: "boolean",
    },
    {
        name: "openHyperlinksInNewWindow",
        baseName: "OpenHyperlinksInNewWindow",
        type: "boolean",
    },
    {
        name: "outlineOptions",
        baseName: "OutlineOptions",
        type: "OutlineOptionsData",
    },
    {
        name: "pageMode",
        baseName: "PageMode",
        type: "string",
    },
    {
        name: "preblendImages",
        baseName: "PreblendImages",
        type: "boolean",
    },
    {
        name: "preserveFormFields",
        baseName: "PreserveFormFields",
        type: "boolean",
    },
    {
        name: "textCompression",
        baseName: "TextCompression",
        type: "string",
    },
    {
        name: "useBookFoldPrintingSettings",
        baseName: "UseBookFoldPrintingSettings",
        type: "boolean",
    },
    {
        name: "useCoreFonts",
        baseName: "UseCoreFonts",
        type: "boolean",
    },
    {
        name: "zoomBehavior",
        baseName: "ZoomBehavior",
        type: "string",
    },
    {
        name: "zoomFactor",
        baseName: "ZoomFactor",
        type: "number",
    }
];
/**
 * Enums for PdfSaveOptionsData
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (PdfSaveOptionsData) {
    let HeaderFooterBookmarksExportModeEnum;
    (function (HeaderFooterBookmarksExportModeEnum) {
        HeaderFooterBookmarksExportModeEnum[HeaderFooterBookmarksExportModeEnum["None"] = 'None'] = "None";
        HeaderFooterBookmarksExportModeEnum[HeaderFooterBookmarksExportModeEnum["First"] = 'First'] = "First";
        HeaderFooterBookmarksExportModeEnum[HeaderFooterBookmarksExportModeEnum["All"] = 'All'] = "All";
    })(HeaderFooterBookmarksExportModeEnum = PdfSaveOptionsData.HeaderFooterBookmarksExportModeEnum || (PdfSaveOptionsData.HeaderFooterBookmarksExportModeEnum = {}));
})(PdfSaveOptionsData = exports.PdfSaveOptionsData || (exports.PdfSaveOptionsData = {}));
// tslint:enable:quotemark
