"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const importedApiError = require("./apiError");
const importedAvailableFontsResponse = require("./availableFontsResponse");
const importedBmpSaveOptionsData = require("./bmpSaveOptionsData");
const importedBody = require("./body");
const importedBody1 = require("./body1");
const importedBody10 = require("./body10");
const importedBody11 = require("./body11");
const importedBody2 = require("./body2");
const importedBody3 = require("./body3");
const importedBody4 = require("./body4");
const importedBody5 = require("./body5");
const importedBody6 = require("./body6");
const importedBody7 = require("./body7");
const importedBody8 = require("./body8");
const importedBody9 = require("./body9");
const importedBookmark = require("./bookmark");
const importedBookmarkData = require("./bookmarkData");
const importedBookmarkResponse = require("./bookmarkResponse");
const importedBookmarks = require("./bookmarks");
const importedBookmarksOutlineLevelData = require("./bookmarksOutlineLevelData");
const importedBookmarksResponse = require("./bookmarksResponse");
const importedBorder = require("./border");
const importedBorderResponse = require("./borderResponse");
const importedBordersCollection = require("./bordersCollection");
const importedBordersResponse = require("./bordersResponse");
const importedClassificationResponse = require("./classificationResponse");
const importedClassificationResult = require("./classificationResult");
const importedComment = require("./comment");
const importedCommentBase = require("./commentBase");
const importedCommentInsert = require("./commentInsert");
const importedCommentLink = require("./commentLink");
const importedCommentResponse = require("./commentResponse");
const importedCommentUpdate = require("./commentUpdate");
const importedCommentsCollection = require("./commentsCollection");
const importedCommentsResponse = require("./commentsResponse");
const importedCompareData = require("./compareData");
const importedCompareOptions = require("./compareOptions");
const importedCsvDataLoadOptions = require("./csvDataLoadOptions");
const importedDocSaveOptionsData = require("./docSaveOptionsData");
const importedDocument = require("./document");
const importedDocumentEntry = require("./documentEntry");
const importedDocumentEntryList = require("./documentEntryList");
const importedDocumentPosition = require("./documentPosition");
const importedDocumentProperties = require("./documentProperties");
const importedDocumentPropertiesResponse = require("./documentPropertiesResponse");
const importedDocumentProperty = require("./documentProperty");
const importedDocumentPropertyBase = require("./documentPropertyBase");
const importedDocumentPropertyCreateOrUpdate = require("./documentPropertyCreateOrUpdate");
const importedDocumentPropertyResponse = require("./documentPropertyResponse");
const importedDocumentResponse = require("./documentResponse");
const importedDocumentStatData = require("./documentStatData");
const importedDownsampleOptionsData = require("./downsampleOptionsData");
const importedDrawingObject = require("./drawingObject");
const importedDrawingObjectCollection = require("./drawingObjectCollection");
const importedDrawingObjectInsert = require("./drawingObjectInsert");
const importedDrawingObjectLink = require("./drawingObjectLink");
const importedDrawingObjectResponse = require("./drawingObjectResponse");
const importedDrawingObjectUpdate = require("./drawingObjectUpdate");
const importedDrawingObjectsResponse = require("./drawingObjectsResponse");
const importedEmfSaveOptionsData = require("./emfSaveOptionsData");
const importedEpubSaveOptionsData = require("./epubSaveOptionsData");
const importedErrorDetails = require("./errorDetails");
const importedField = require("./field");
const importedFieldBase = require("./fieldBase");
const importedFieldCollection = require("./fieldCollection");
const importedFieldInsert = require("./fieldInsert");
const importedFieldLink = require("./fieldLink");
const importedFieldNames = require("./fieldNames");
const importedFieldNamesResponse = require("./fieldNamesResponse");
const importedFieldResponse = require("./fieldResponse");
const importedFieldUpdate = require("./fieldUpdate");
const importedFieldsResponse = require("./fieldsResponse");
const importedFileLink = require("./fileLink");
const importedFilesList = require("./filesList");
const importedFilesUploadResult = require("./filesUploadResult");
const importedFixedPageSaveOptionsData = require("./fixedPageSaveOptionsData");
const importedFont = require("./font");
const importedFontInfo = require("./fontInfo");
const importedFontResponse = require("./fontResponse");
const importedFootnote = require("./footnote");
const importedFootnoteBase = require("./footnoteBase");
const importedFootnoteCollection = require("./footnoteCollection");
const importedFootnoteInsert = require("./footnoteInsert");
const importedFootnoteLink = require("./footnoteLink");
const importedFootnoteResponse = require("./footnoteResponse");
const importedFootnoteUpdate = require("./footnoteUpdate");
const importedFootnotesResponse = require("./footnotesResponse");
const importedFootnotesStatData = require("./footnotesStatData");
const importedFormField = require("./formField");
const importedFormFieldCheckbox = require("./formFieldCheckbox");
const importedFormFieldCollection = require("./formFieldCollection");
const importedFormFieldDropDown = require("./formFieldDropDown");
const importedFormFieldResponse = require("./formFieldResponse");
const importedFormFieldTextInput = require("./formFieldTextInput");
const importedFormFieldsResponse = require("./formFieldsResponse");
const importedGifSaveOptionsData = require("./gifSaveOptionsData");
const importedGraphicsQualityOptionsData = require("./graphicsQualityOptionsData");
const importedHeaderFooter = require("./headerFooter");
const importedHeaderFooterLink = require("./headerFooterLink");
const importedHeaderFooterLinkCollection = require("./headerFooterLinkCollection");
const importedHeaderFooterResponse = require("./headerFooterResponse");
const importedHeaderFootersResponse = require("./headerFootersResponse");
const importedHtmlFixedSaveOptionsData = require("./htmlFixedSaveOptionsData");
const importedHtmlSaveOptionsData = require("./htmlSaveOptionsData");
const importedHyperlink = require("./hyperlink");
const importedHyperlinkResponse = require("./hyperlinkResponse");
const importedHyperlinks = require("./hyperlinks");
const importedHyperlinksResponse = require("./hyperlinksResponse");
const importedImageSaveOptionsData = require("./imageSaveOptionsData");
const importedJpegSaveOptionsData = require("./jpegSaveOptionsData");
const importedLink = require("./link");
const importedLinkElement = require("./linkElement");
const importedListFormat = require("./listFormat");
const importedListFormatUpdate = require("./listFormatUpdate");
const importedListInfo = require("./listInfo");
const importedListInsert = require("./listInsert");
const importedListLevel = require("./listLevel");
const importedListLevelUpdate = require("./listLevelUpdate");
const importedListLevels = require("./listLevels");
const importedListResponse = require("./listResponse");
const importedListUpdate = require("./listUpdate");
const importedLists = require("./lists");
const importedListsResponse = require("./listsResponse");
const importedLoadWebDocumentData = require("./loadWebDocumentData");
const importedMetafileRenderingOptionsData = require("./metafileRenderingOptionsData");
const importedMhtmlSaveOptionsData = require("./mhtmlSaveOptionsData");
const importedModelError = require("./modelError");
const importedModificationOperationResult = require("./modificationOperationResult");
const importedNodeLink = require("./nodeLink");
const importedOdtSaveOptionsData = require("./odtSaveOptionsData");
const importedOfficeMathLink = require("./officeMathLink");
const importedOfficeMathObject = require("./officeMathObject");
const importedOfficeMathObjectResponse = require("./officeMathObjectResponse");
const importedOfficeMathObjectsCollection = require("./officeMathObjectsCollection");
const importedOfficeMathObjectsResponse = require("./officeMathObjectsResponse");
const importedOoxmlSaveOptionsData = require("./ooxmlSaveOptionsData");
const importedOutlineOptionsData = require("./outlineOptionsData");
const importedPageNumber = require("./pageNumber");
const importedPageSetup = require("./pageSetup");
const importedPageStatData = require("./pageStatData");
const importedParagraph = require("./paragraph");
const importedParagraphFormat = require("./paragraphFormat");
const importedParagraphFormatResponse = require("./paragraphFormatResponse");
const importedParagraphInsert = require("./paragraphInsert");
const importedParagraphLink = require("./paragraphLink");
const importedParagraphLinkCollection = require("./paragraphLinkCollection");
const importedParagraphLinkCollectionResponse = require("./paragraphLinkCollectionResponse");
const importedParagraphListFormatResponse = require("./paragraphListFormatResponse");
const importedParagraphResponse = require("./paragraphResponse");
const importedPclSaveOptionsData = require("./pclSaveOptionsData");
const importedPdfDigitalSignatureDetailsData = require("./pdfDigitalSignatureDetailsData");
const importedPdfEncryptionDetailsData = require("./pdfEncryptionDetailsData");
const importedPdfSaveOptionsData = require("./pdfSaveOptionsData");
const importedPngSaveOptionsData = require("./pngSaveOptionsData");
const importedPreferredWidth = require("./preferredWidth");
const importedProtectionData = require("./protectionData");
const importedProtectionDataResponse = require("./protectionDataResponse");
const importedProtectionRequest = require("./protectionRequest");
const importedPsSaveOptionsData = require("./psSaveOptionsData");
const importedRangeDocument = require("./rangeDocument");
const importedRangeTextResponse = require("./rangeTextResponse");
const importedReplaceRange = require("./replaceRange");
const importedReplaceTextParameters = require("./replaceTextParameters");
const importedReplaceTextResponse = require("./replaceTextResponse");
const importedReportBuildOptions = require("./reportBuildOptions");
const importedReportEngineSettings = require("./reportEngineSettings");
const importedRevisionsModificationResponse = require("./revisionsModificationResponse");
const importedRtfSaveOptionsData = require("./rtfSaveOptionsData");
const importedRun = require("./run");
const importedRunBase = require("./runBase");
const importedRunInsert = require("./runInsert");
const importedRunLink = require("./runLink");
const importedRunResponse = require("./runResponse");
const importedRunUpdate = require("./runUpdate");
const importedRuns = require("./runs");
const importedRunsResponse = require("./runsResponse");
const importedSaveOptionsData = require("./saveOptionsData");
const importedSaveResponse = require("./saveResponse");
const importedSaveResult = require("./saveResult");
const importedSearchResponse = require("./searchResponse");
const importedSearchResult = require("./searchResult");
const importedSearchResultsCollection = require("./searchResultsCollection");
const importedSection = require("./section");
const importedSectionLink = require("./sectionLink");
const importedSectionLinkCollection = require("./sectionLinkCollection");
const importedSectionLinkCollectionResponse = require("./sectionLinkCollectionResponse");
const importedSectionPageSetupResponse = require("./sectionPageSetupResponse");
const importedSectionResponse = require("./sectionResponse");
const importedShading = require("./shading");
const importedSplitDocumentResponse = require("./splitDocumentResponse");
const importedSplitDocumentResult = require("./splitDocumentResult");
const importedStatDataResponse = require("./statDataResponse");
const importedStorageFile = require("./storageFile");
const importedStoryChildNodes = require("./storyChildNodes");
const importedStringFormatData = require("./stringFormatData");
const importedStyle = require("./style");
const importedStyleApply = require("./styleApply");
const importedStyleCopy = require("./styleCopy");
const importedStyleInsert = require("./styleInsert");
const importedStyleResponse = require("./styleResponse");
const importedStyleUpdate = require("./styleUpdate");
const importedStylesResponse = require("./stylesResponse");
const importedSvgSaveOptionsData = require("./svgSaveOptionsData");
const importedTabStop = require("./tabStop");
const importedTabStopBase = require("./tabStopBase");
const importedTabStopInsert = require("./tabStopInsert");
const importedTabStopsResponse = require("./tabStopsResponse");
const importedTable = require("./table");
const importedTableCell = require("./tableCell");
const importedTableCellFormat = require("./tableCellFormat");
const importedTableCellFormatResponse = require("./tableCellFormatResponse");
const importedTableCellInsert = require("./tableCellInsert");
const importedTableCellResponse = require("./tableCellResponse");
const importedTableInsert = require("./tableInsert");
const importedTableLink = require("./tableLink");
const importedTableLinkCollection = require("./tableLinkCollection");
const importedTableLinkCollectionResponse = require("./tableLinkCollectionResponse");
const importedTableProperties = require("./tableProperties");
const importedTablePropertiesResponse = require("./tablePropertiesResponse");
const importedTableResponse = require("./tableResponse");
const importedTableRow = require("./tableRow");
const importedTableRowFormat = require("./tableRowFormat");
const importedTableRowFormatResponse = require("./tableRowFormatResponse");
const importedTableRowInsert = require("./tableRowInsert");
const importedTableRowResponse = require("./tableRowResponse");
const importedTextSaveOptionsData = require("./textSaveOptionsData");
const importedTiffSaveOptionsData = require("./tiffSaveOptionsData");
const importedWatermarkText = require("./watermarkText");
const importedWordMLSaveOptionsData = require("./wordMLSaveOptionsData");
const importedWordsApiErrorResponse = require("./wordsApiErrorResponse");
const importedWordsApiLink = require("./wordsApiLink");
const importedWordsResponse = require("./wordsResponse");
const importedXamlFixedSaveOptionsData = require("./xamlFixedSaveOptionsData");
const importedXamlFlowSaveOptionsData = require("./xamlFlowSaveOptionsData");
const importedXmlColor = require("./xmlColor");
const importedXpsSaveOptionsData = require("./xpsSaveOptionsData");
var attributeInfo_1 = require("../internal/attributeInfo");
exports.AttributeInfo = attributeInfo_1.AttributeInfo;
__export(require("./apiError"));
__export(require("./availableFontsResponse"));
__export(require("./bmpSaveOptionsData"));
__export(require("./body"));
__export(require("./body1"));
__export(require("./body10"));
__export(require("./body11"));
__export(require("./body2"));
__export(require("./body3"));
__export(require("./body4"));
__export(require("./body5"));
__export(require("./body6"));
__export(require("./body7"));
__export(require("./body8"));
__export(require("./body9"));
__export(require("./bookmark"));
__export(require("./bookmarkData"));
__export(require("./bookmarkResponse"));
__export(require("./bookmarks"));
__export(require("./bookmarksOutlineLevelData"));
__export(require("./bookmarksResponse"));
__export(require("./border"));
__export(require("./borderResponse"));
__export(require("./bordersCollection"));
__export(require("./bordersResponse"));
__export(require("./classificationResponse"));
__export(require("./classificationResult"));
__export(require("./comment"));
__export(require("./commentBase"));
__export(require("./commentInsert"));
__export(require("./commentLink"));
__export(require("./commentResponse"));
__export(require("./commentUpdate"));
__export(require("./commentsCollection"));
__export(require("./commentsResponse"));
__export(require("./compareData"));
__export(require("./compareOptions"));
__export(require("./csvDataLoadOptions"));
__export(require("./docSaveOptionsData"));
__export(require("./document"));
__export(require("./documentEntry"));
__export(require("./documentEntryList"));
__export(require("./documentPosition"));
__export(require("./documentProperties"));
__export(require("./documentPropertiesResponse"));
__export(require("./documentProperty"));
__export(require("./documentPropertyBase"));
__export(require("./documentPropertyCreateOrUpdate"));
__export(require("./documentPropertyResponse"));
__export(require("./documentResponse"));
__export(require("./documentStatData"));
__export(require("./downsampleOptionsData"));
__export(require("./drawingObject"));
__export(require("./drawingObjectCollection"));
__export(require("./drawingObjectInsert"));
__export(require("./drawingObjectLink"));
__export(require("./drawingObjectResponse"));
__export(require("./drawingObjectUpdate"));
__export(require("./drawingObjectsResponse"));
__export(require("./emfSaveOptionsData"));
__export(require("./epubSaveOptionsData"));
__export(require("./errorDetails"));
__export(require("./field"));
__export(require("./fieldBase"));
__export(require("./fieldCollection"));
__export(require("./fieldInsert"));
__export(require("./fieldLink"));
__export(require("./fieldNames"));
__export(require("./fieldNamesResponse"));
__export(require("./fieldResponse"));
__export(require("./fieldUpdate"));
__export(require("./fieldsResponse"));
__export(require("./fileLink"));
__export(require("./filesList"));
__export(require("./filesUploadResult"));
__export(require("./fixedPageSaveOptionsData"));
__export(require("./font"));
__export(require("./fontInfo"));
__export(require("./fontResponse"));
__export(require("./footnote"));
__export(require("./footnoteBase"));
__export(require("./footnoteCollection"));
__export(require("./footnoteInsert"));
__export(require("./footnoteLink"));
__export(require("./footnoteResponse"));
__export(require("./footnoteUpdate"));
__export(require("./footnotesResponse"));
__export(require("./footnotesStatData"));
__export(require("./formField"));
__export(require("./formFieldCheckbox"));
__export(require("./formFieldCollection"));
__export(require("./formFieldDropDown"));
__export(require("./formFieldResponse"));
__export(require("./formFieldTextInput"));
__export(require("./formFieldsResponse"));
__export(require("./gifSaveOptionsData"));
__export(require("./graphicsQualityOptionsData"));
__export(require("./headerFooter"));
__export(require("./headerFooterLink"));
__export(require("./headerFooterLinkCollection"));
__export(require("./headerFooterResponse"));
__export(require("./headerFootersResponse"));
__export(require("./htmlFixedSaveOptionsData"));
__export(require("./htmlSaveOptionsData"));
__export(require("./hyperlink"));
__export(require("./hyperlinkResponse"));
__export(require("./hyperlinks"));
__export(require("./hyperlinksResponse"));
__export(require("./imageSaveOptionsData"));
__export(require("./jpegSaveOptionsData"));
__export(require("./link"));
__export(require("./linkElement"));
__export(require("./listFormat"));
__export(require("./listFormatUpdate"));
__export(require("./listInfo"));
__export(require("./listInsert"));
__export(require("./listLevel"));
__export(require("./listLevelUpdate"));
__export(require("./listLevels"));
__export(require("./listResponse"));
__export(require("./listUpdate"));
__export(require("./lists"));
__export(require("./listsResponse"));
__export(require("./loadWebDocumentData"));
__export(require("./metafileRenderingOptionsData"));
__export(require("./mhtmlSaveOptionsData"));
__export(require("./modelError"));
__export(require("./modificationOperationResult"));
__export(require("./nodeLink"));
__export(require("./odtSaveOptionsData"));
__export(require("./officeMathLink"));
__export(require("./officeMathObject"));
__export(require("./officeMathObjectResponse"));
__export(require("./officeMathObjectsCollection"));
__export(require("./officeMathObjectsResponse"));
__export(require("./ooxmlSaveOptionsData"));
__export(require("./outlineOptionsData"));
__export(require("./pageNumber"));
__export(require("./pageSetup"));
__export(require("./pageStatData"));
__export(require("./paragraph"));
__export(require("./paragraphFormat"));
__export(require("./paragraphFormatResponse"));
__export(require("./paragraphInsert"));
__export(require("./paragraphLink"));
__export(require("./paragraphLinkCollection"));
__export(require("./paragraphLinkCollectionResponse"));
__export(require("./paragraphListFormatResponse"));
__export(require("./paragraphResponse"));
__export(require("./pclSaveOptionsData"));
__export(require("./pdfDigitalSignatureDetailsData"));
__export(require("./pdfEncryptionDetailsData"));
__export(require("./pdfSaveOptionsData"));
__export(require("./pngSaveOptionsData"));
__export(require("./preferredWidth"));
__export(require("./protectionData"));
__export(require("./protectionDataResponse"));
__export(require("./protectionRequest"));
__export(require("./psSaveOptionsData"));
__export(require("./rangeDocument"));
__export(require("./rangeTextResponse"));
__export(require("./replaceRange"));
__export(require("./replaceTextParameters"));
__export(require("./replaceTextResponse"));
__export(require("./reportBuildOptions"));
__export(require("./reportEngineSettings"));
__export(require("./revisionsModificationResponse"));
__export(require("./rtfSaveOptionsData"));
__export(require("./run"));
__export(require("./runBase"));
__export(require("./runInsert"));
__export(require("./runLink"));
__export(require("./runResponse"));
__export(require("./runUpdate"));
__export(require("./runs"));
__export(require("./runsResponse"));
__export(require("./saveOptionsData"));
__export(require("./saveResponse"));
__export(require("./saveResult"));
__export(require("./searchResponse"));
__export(require("./searchResult"));
__export(require("./searchResultsCollection"));
__export(require("./section"));
__export(require("./sectionLink"));
__export(require("./sectionLinkCollection"));
__export(require("./sectionLinkCollectionResponse"));
__export(require("./sectionPageSetupResponse"));
__export(require("./sectionResponse"));
__export(require("./shading"));
__export(require("./splitDocumentResponse"));
__export(require("./splitDocumentResult"));
__export(require("./statDataResponse"));
__export(require("./storageFile"));
__export(require("./storyChildNodes"));
__export(require("./stringFormatData"));
__export(require("./style"));
__export(require("./styleApply"));
__export(require("./styleCopy"));
__export(require("./styleInsert"));
__export(require("./styleResponse"));
__export(require("./styleUpdate"));
__export(require("./stylesResponse"));
__export(require("./svgSaveOptionsData"));
__export(require("./tabStop"));
__export(require("./tabStopBase"));
__export(require("./tabStopInsert"));
__export(require("./tabStopsResponse"));
__export(require("./table"));
__export(require("./tableCell"));
__export(require("./tableCellFormat"));
__export(require("./tableCellFormatResponse"));
__export(require("./tableCellInsert"));
__export(require("./tableCellResponse"));
__export(require("./tableInsert"));
__export(require("./tableLink"));
__export(require("./tableLinkCollection"));
__export(require("./tableLinkCollectionResponse"));
__export(require("./tableProperties"));
__export(require("./tablePropertiesResponse"));
__export(require("./tableResponse"));
__export(require("./tableRow"));
__export(require("./tableRowFormat"));
__export(require("./tableRowFormatResponse"));
__export(require("./tableRowInsert"));
__export(require("./tableRowResponse"));
__export(require("./textSaveOptionsData"));
__export(require("./tiffSaveOptionsData"));
__export(require("./watermarkText"));
__export(require("./wordMLSaveOptionsData"));
__export(require("./wordsApiErrorResponse"));
__export(require("./wordsApiLink"));
__export(require("./wordsResponse"));
__export(require("./xamlFixedSaveOptionsData"));
__export(require("./xamlFlowSaveOptionsData"));
__export(require("./xmlColor"));
__export(require("./xpsSaveOptionsData"));
/**
 * WordsIncomingMessage
 */
class WordsIncomingMessage {
}
exports.WordsIncomingMessage = WordsIncomingMessage;
const enumsMap = {
    "Border.BorderTypeEnum": importedBorder.Border.BorderTypeEnum,
    "Border.LineStyleEnum": importedBorder.Border.LineStyleEnum,
    "CompareOptions.TargetEnum": importedCompareOptions.CompareOptions.TargetEnum,
    "Document.SourceFormatEnum": importedDocument.Document.SourceFormatEnum,
    "DrawingObject.RelativeHorizontalPositionEnum": importedDrawingObject.DrawingObject.RelativeHorizontalPositionEnum,
    "DrawingObject.RelativeVerticalPositionEnum": importedDrawingObject.DrawingObject.RelativeVerticalPositionEnum,
    "DrawingObject.WrapTypeEnum": importedDrawingObject.DrawingObject.WrapTypeEnum,
    "DrawingObjectInsert.RelativeHorizontalPositionEnum": importedDrawingObjectInsert.DrawingObjectInsert.RelativeHorizontalPositionEnum,
    "DrawingObjectInsert.RelativeVerticalPositionEnum": importedDrawingObjectInsert.DrawingObjectInsert.RelativeVerticalPositionEnum,
    "DrawingObjectInsert.WrapTypeEnum": importedDrawingObjectInsert.DrawingObjectInsert.WrapTypeEnum,
    "DrawingObjectUpdate.RelativeHorizontalPositionEnum": importedDrawingObjectUpdate.DrawingObjectUpdate.RelativeHorizontalPositionEnum,
    "DrawingObjectUpdate.RelativeVerticalPositionEnum": importedDrawingObjectUpdate.DrawingObjectUpdate.RelativeVerticalPositionEnum,
    "DrawingObjectUpdate.WrapTypeEnum": importedDrawingObjectUpdate.DrawingObjectUpdate.WrapTypeEnum,
    "Font.StyleIdentifierEnum": importedFont.Font.StyleIdentifierEnum,
    "Font.TextEffectEnum": importedFont.Font.TextEffectEnum,
    "Font.UnderlineEnum": importedFont.Font.UnderlineEnum,
    "Footnote.FootnoteTypeEnum": importedFootnote.Footnote.FootnoteTypeEnum,
    "FootnoteBase.FootnoteTypeEnum": importedFootnoteBase.FootnoteBase.FootnoteTypeEnum,
    "FormFieldTextInput.TextInputTypeEnum": importedFormFieldTextInput.FormFieldTextInput.TextInputTypeEnum,
    "GraphicsQualityOptionsData.CompositingModeEnum": importedGraphicsQualityOptionsData.GraphicsQualityOptionsData.CompositingModeEnum,
    "GraphicsQualityOptionsData.CompositingQualityEnum": importedGraphicsQualityOptionsData.GraphicsQualityOptionsData.CompositingQualityEnum,
    "GraphicsQualityOptionsData.InterpolationModeEnum": importedGraphicsQualityOptionsData.GraphicsQualityOptionsData.InterpolationModeEnum,
    "GraphicsQualityOptionsData.SmoothingModeEnum": importedGraphicsQualityOptionsData.GraphicsQualityOptionsData.SmoothingModeEnum,
    "GraphicsQualityOptionsData.TextRenderingHintEnum": importedGraphicsQualityOptionsData.GraphicsQualityOptionsData.TextRenderingHintEnum,
    "HeaderFooterLink.TypeEnum": importedHeaderFooterLink.HeaderFooterLink.TypeEnum,
    "HtmlSaveOptionsData.HtmlVersionEnum": importedHtmlSaveOptionsData.HtmlSaveOptionsData.HtmlVersionEnum,
    "HtmlSaveOptionsData.MetafileFormatEnum": importedHtmlSaveOptionsData.HtmlSaveOptionsData.MetafileFormatEnum,
    "HtmlSaveOptionsData.OfficeMathOutputModeEnum": importedHtmlSaveOptionsData.HtmlSaveOptionsData.OfficeMathOutputModeEnum,
    "ListInsert.TemplateEnum": importedListInsert.ListInsert.TemplateEnum,
    "ListLevel.AlignmentEnum": importedListLevel.ListLevel.AlignmentEnum,
    "ListLevel.NumberStyleEnum": importedListLevel.ListLevel.NumberStyleEnum,
    "ListLevel.TrailingCharacterEnum": importedListLevel.ListLevel.TrailingCharacterEnum,
    "ListLevelUpdate.NumberStyleEnum": importedListLevelUpdate.ListLevelUpdate.NumberStyleEnum,
    "ListLevelUpdate.AlignmentEnum": importedListLevelUpdate.ListLevelUpdate.AlignmentEnum,
    "ListLevelUpdate.TrailingCharacterEnum": importedListLevelUpdate.ListLevelUpdate.TrailingCharacterEnum,
    "OdtSaveOptionsData.MeasureUnitEnum": importedOdtSaveOptionsData.OdtSaveOptionsData.MeasureUnitEnum,
    "OfficeMathObject.DisplayTypeEnum": importedOfficeMathObject.OfficeMathObject.DisplayTypeEnum,
    "OfficeMathObject.JustificationEnum": importedOfficeMathObject.OfficeMathObject.JustificationEnum,
    "OfficeMathObject.MathObjectTypeEnum": importedOfficeMathObject.OfficeMathObject.MathObjectTypeEnum,
    "OoxmlSaveOptionsData.CompressionLevelEnum": importedOoxmlSaveOptionsData.OoxmlSaveOptionsData.CompressionLevelEnum,
    "PageSetup.BorderAppliesToEnum": importedPageSetup.PageSetup.BorderAppliesToEnum,
    "PageSetup.BorderDistanceFromEnum": importedPageSetup.PageSetup.BorderDistanceFromEnum,
    "PageSetup.LineNumberRestartModeEnum": importedPageSetup.PageSetup.LineNumberRestartModeEnum,
    "PageSetup.OrientationEnum": importedPageSetup.PageSetup.OrientationEnum,
    "PageSetup.PageNumberStyleEnum": importedPageSetup.PageSetup.PageNumberStyleEnum,
    "PageSetup.PaperSizeEnum": importedPageSetup.PageSetup.PaperSizeEnum,
    "PageSetup.SectionStartEnum": importedPageSetup.PageSetup.SectionStartEnum,
    "PageSetup.VerticalAlignmentEnum": importedPageSetup.PageSetup.VerticalAlignmentEnum,
    "ParagraphFormat.AlignmentEnum": importedParagraphFormat.ParagraphFormat.AlignmentEnum,
    "ParagraphFormat.DropCapPositionEnum": importedParagraphFormat.ParagraphFormat.DropCapPositionEnum,
    "ParagraphFormat.LineSpacingRuleEnum": importedParagraphFormat.ParagraphFormat.LineSpacingRuleEnum,
    "ParagraphFormat.OutlineLevelEnum": importedParagraphFormat.ParagraphFormat.OutlineLevelEnum,
    "ParagraphFormat.StyleIdentifierEnum": importedParagraphFormat.ParagraphFormat.StyleIdentifierEnum,
    "PdfSaveOptionsData.HeaderFooterBookmarksExportModeEnum": importedPdfSaveOptionsData.PdfSaveOptionsData.HeaderFooterBookmarksExportModeEnum,
    "PreferredWidth.TypeEnum": importedPreferredWidth.PreferredWidth.TypeEnum,
    "ReplaceRange.TextTypeEnum": importedReplaceRange.ReplaceRange.TextTypeEnum,
    "ReportEngineSettings.DataSourceTypeEnum": importedReportEngineSettings.ReportEngineSettings.DataSourceTypeEnum,
    "SaveOptionsData.Dml3DEffectsRenderingModeEnum": importedSaveOptionsData.SaveOptionsData.Dml3DEffectsRenderingModeEnum,
    "Shading.TextureEnum": importedShading.Shading.TextureEnum,
    "StringFormatData.AlignmentEnum": importedStringFormatData.StringFormatData.AlignmentEnum,
    "StringFormatData.FormatFlagsEnum": importedStringFormatData.StringFormatData.FormatFlagsEnum,
    "StringFormatData.HotkeyPrefixEnum": importedStringFormatData.StringFormatData.HotkeyPrefixEnum,
    "StringFormatData.LineAlignmentEnum": importedStringFormatData.StringFormatData.LineAlignmentEnum,
    "StringFormatData.TrimmingEnum": importedStringFormatData.StringFormatData.TrimmingEnum,
    "Style.StyleIdentifierEnum": importedStyle.Style.StyleIdentifierEnum,
    "Style.TypeEnum": importedStyle.Style.TypeEnum,
    "StyleInsert.StyleTypeEnum": importedStyleInsert.StyleInsert.StyleTypeEnum,
    "TabStopBase.AlignmentEnum": importedTabStopBase.TabStopBase.AlignmentEnum,
    "TabStopBase.LeaderEnum": importedTabStopBase.TabStopBase.LeaderEnum,
    "TableCellFormat.HorizontalMergeEnum": importedTableCellFormat.TableCellFormat.HorizontalMergeEnum,
    "TableCellFormat.OrientationEnum": importedTableCellFormat.TableCellFormat.OrientationEnum,
    "TableCellFormat.VerticalAlignmentEnum": importedTableCellFormat.TableCellFormat.VerticalAlignmentEnum,
    "TableCellFormat.VerticalMergeEnum": importedTableCellFormat.TableCellFormat.VerticalMergeEnum,
    "TableProperties.AlignmentEnum": importedTableProperties.TableProperties.AlignmentEnum,
    "TableProperties.StyleIdentifierEnum": importedTableProperties.TableProperties.StyleIdentifierEnum,
    "TableProperties.StyleOptionsEnum": importedTableProperties.TableProperties.StyleOptionsEnum,
    "TableProperties.TextWrappingEnum": importedTableProperties.TableProperties.TextWrappingEnum,
    "TableRowFormat.HeightRuleEnum": importedTableRowFormat.TableRowFormat.HeightRuleEnum,
    "TextSaveOptionsData.ExportHeadersFootersModeEnum": importedTextSaveOptionsData.TextSaveOptionsData.ExportHeadersFootersModeEnum,
};
exports.enumsMap = enumsMap;
const typeMap = {
    ApiError: importedApiError.ApiError,
    AvailableFontsResponse: importedAvailableFontsResponse.AvailableFontsResponse,
    BmpSaveOptionsData: importedBmpSaveOptionsData.BmpSaveOptionsData,
    Body: importedBody.Body,
    Body1: importedBody1.Body1,
    Body10: importedBody10.Body10,
    Body11: importedBody11.Body11,
    Body2: importedBody2.Body2,
    Body3: importedBody3.Body3,
    Body4: importedBody4.Body4,
    Body5: importedBody5.Body5,
    Body6: importedBody6.Body6,
    Body7: importedBody7.Body7,
    Body8: importedBody8.Body8,
    Body9: importedBody9.Body9,
    Bookmark: importedBookmark.Bookmark,
    BookmarkData: importedBookmarkData.BookmarkData,
    BookmarkResponse: importedBookmarkResponse.BookmarkResponse,
    Bookmarks: importedBookmarks.Bookmarks,
    BookmarksOutlineLevelData: importedBookmarksOutlineLevelData.BookmarksOutlineLevelData,
    BookmarksResponse: importedBookmarksResponse.BookmarksResponse,
    Border: importedBorder.Border,
    BorderResponse: importedBorderResponse.BorderResponse,
    BordersCollection: importedBordersCollection.BordersCollection,
    BordersResponse: importedBordersResponse.BordersResponse,
    ClassificationResponse: importedClassificationResponse.ClassificationResponse,
    ClassificationResult: importedClassificationResult.ClassificationResult,
    Comment: importedComment.Comment,
    CommentBase: importedCommentBase.CommentBase,
    CommentInsert: importedCommentInsert.CommentInsert,
    CommentLink: importedCommentLink.CommentLink,
    CommentResponse: importedCommentResponse.CommentResponse,
    CommentUpdate: importedCommentUpdate.CommentUpdate,
    CommentsCollection: importedCommentsCollection.CommentsCollection,
    CommentsResponse: importedCommentsResponse.CommentsResponse,
    CompareData: importedCompareData.CompareData,
    CompareOptions: importedCompareOptions.CompareOptions,
    CsvDataLoadOptions: importedCsvDataLoadOptions.CsvDataLoadOptions,
    DocSaveOptionsData: importedDocSaveOptionsData.DocSaveOptionsData,
    Document: importedDocument.Document,
    DocumentEntry: importedDocumentEntry.DocumentEntry,
    DocumentEntryList: importedDocumentEntryList.DocumentEntryList,
    DocumentPosition: importedDocumentPosition.DocumentPosition,
    DocumentProperties: importedDocumentProperties.DocumentProperties,
    DocumentPropertiesResponse: importedDocumentPropertiesResponse.DocumentPropertiesResponse,
    DocumentProperty: importedDocumentProperty.DocumentProperty,
    DocumentPropertyBase: importedDocumentPropertyBase.DocumentPropertyBase,
    DocumentPropertyCreateOrUpdate: importedDocumentPropertyCreateOrUpdate.DocumentPropertyCreateOrUpdate,
    DocumentPropertyResponse: importedDocumentPropertyResponse.DocumentPropertyResponse,
    DocumentResponse: importedDocumentResponse.DocumentResponse,
    DocumentStatData: importedDocumentStatData.DocumentStatData,
    DownsampleOptionsData: importedDownsampleOptionsData.DownsampleOptionsData,
    DrawingObject: importedDrawingObject.DrawingObject,
    DrawingObjectCollection: importedDrawingObjectCollection.DrawingObjectCollection,
    DrawingObjectInsert: importedDrawingObjectInsert.DrawingObjectInsert,
    DrawingObjectLink: importedDrawingObjectLink.DrawingObjectLink,
    DrawingObjectResponse: importedDrawingObjectResponse.DrawingObjectResponse,
    DrawingObjectUpdate: importedDrawingObjectUpdate.DrawingObjectUpdate,
    DrawingObjectsResponse: importedDrawingObjectsResponse.DrawingObjectsResponse,
    EmfSaveOptionsData: importedEmfSaveOptionsData.EmfSaveOptionsData,
    EpubSaveOptionsData: importedEpubSaveOptionsData.EpubSaveOptionsData,
    ErrorDetails: importedErrorDetails.ErrorDetails,
    Field: importedField.Field,
    FieldBase: importedFieldBase.FieldBase,
    FieldCollection: importedFieldCollection.FieldCollection,
    FieldInsert: importedFieldInsert.FieldInsert,
    FieldLink: importedFieldLink.FieldLink,
    FieldNames: importedFieldNames.FieldNames,
    FieldNamesResponse: importedFieldNamesResponse.FieldNamesResponse,
    FieldResponse: importedFieldResponse.FieldResponse,
    FieldUpdate: importedFieldUpdate.FieldUpdate,
    FieldsResponse: importedFieldsResponse.FieldsResponse,
    FileLink: importedFileLink.FileLink,
    FilesList: importedFilesList.FilesList,
    FilesUploadResult: importedFilesUploadResult.FilesUploadResult,
    FixedPageSaveOptionsData: importedFixedPageSaveOptionsData.FixedPageSaveOptionsData,
    Font: importedFont.Font,
    FontInfo: importedFontInfo.FontInfo,
    FontResponse: importedFontResponse.FontResponse,
    Footnote: importedFootnote.Footnote,
    FootnoteBase: importedFootnoteBase.FootnoteBase,
    FootnoteCollection: importedFootnoteCollection.FootnoteCollection,
    FootnoteInsert: importedFootnoteInsert.FootnoteInsert,
    FootnoteLink: importedFootnoteLink.FootnoteLink,
    FootnoteResponse: importedFootnoteResponse.FootnoteResponse,
    FootnoteUpdate: importedFootnoteUpdate.FootnoteUpdate,
    FootnotesResponse: importedFootnotesResponse.FootnotesResponse,
    FootnotesStatData: importedFootnotesStatData.FootnotesStatData,
    FormField: importedFormField.FormField,
    FormFieldCheckbox: importedFormFieldCheckbox.FormFieldCheckbox,
    FormFieldCollection: importedFormFieldCollection.FormFieldCollection,
    FormFieldDropDown: importedFormFieldDropDown.FormFieldDropDown,
    FormFieldResponse: importedFormFieldResponse.FormFieldResponse,
    FormFieldTextInput: importedFormFieldTextInput.FormFieldTextInput,
    FormFieldsResponse: importedFormFieldsResponse.FormFieldsResponse,
    GifSaveOptionsData: importedGifSaveOptionsData.GifSaveOptionsData,
    GraphicsQualityOptionsData: importedGraphicsQualityOptionsData.GraphicsQualityOptionsData,
    HeaderFooter: importedHeaderFooter.HeaderFooter,
    HeaderFooterLink: importedHeaderFooterLink.HeaderFooterLink,
    HeaderFooterLinkCollection: importedHeaderFooterLinkCollection.HeaderFooterLinkCollection,
    HeaderFooterResponse: importedHeaderFooterResponse.HeaderFooterResponse,
    HeaderFootersResponse: importedHeaderFootersResponse.HeaderFootersResponse,
    HtmlFixedSaveOptionsData: importedHtmlFixedSaveOptionsData.HtmlFixedSaveOptionsData,
    HtmlSaveOptionsData: importedHtmlSaveOptionsData.HtmlSaveOptionsData,
    Hyperlink: importedHyperlink.Hyperlink,
    HyperlinkResponse: importedHyperlinkResponse.HyperlinkResponse,
    Hyperlinks: importedHyperlinks.Hyperlinks,
    HyperlinksResponse: importedHyperlinksResponse.HyperlinksResponse,
    ImageSaveOptionsData: importedImageSaveOptionsData.ImageSaveOptionsData,
    JpegSaveOptionsData: importedJpegSaveOptionsData.JpegSaveOptionsData,
    Link: importedLink.Link,
    LinkElement: importedLinkElement.LinkElement,
    ListFormat: importedListFormat.ListFormat,
    ListFormatUpdate: importedListFormatUpdate.ListFormatUpdate,
    ListInfo: importedListInfo.ListInfo,
    ListInsert: importedListInsert.ListInsert,
    ListLevel: importedListLevel.ListLevel,
    ListLevelUpdate: importedListLevelUpdate.ListLevelUpdate,
    ListLevels: importedListLevels.ListLevels,
    ListResponse: importedListResponse.ListResponse,
    ListUpdate: importedListUpdate.ListUpdate,
    Lists: importedLists.Lists,
    ListsResponse: importedListsResponse.ListsResponse,
    LoadWebDocumentData: importedLoadWebDocumentData.LoadWebDocumentData,
    MetafileRenderingOptionsData: importedMetafileRenderingOptionsData.MetafileRenderingOptionsData,
    MhtmlSaveOptionsData: importedMhtmlSaveOptionsData.MhtmlSaveOptionsData,
    ModelError: importedModelError.ModelError,
    ModificationOperationResult: importedModificationOperationResult.ModificationOperationResult,
    NodeLink: importedNodeLink.NodeLink,
    OdtSaveOptionsData: importedOdtSaveOptionsData.OdtSaveOptionsData,
    OfficeMathLink: importedOfficeMathLink.OfficeMathLink,
    OfficeMathObject: importedOfficeMathObject.OfficeMathObject,
    OfficeMathObjectResponse: importedOfficeMathObjectResponse.OfficeMathObjectResponse,
    OfficeMathObjectsCollection: importedOfficeMathObjectsCollection.OfficeMathObjectsCollection,
    OfficeMathObjectsResponse: importedOfficeMathObjectsResponse.OfficeMathObjectsResponse,
    OoxmlSaveOptionsData: importedOoxmlSaveOptionsData.OoxmlSaveOptionsData,
    OutlineOptionsData: importedOutlineOptionsData.OutlineOptionsData,
    PageNumber: importedPageNumber.PageNumber,
    PageSetup: importedPageSetup.PageSetup,
    PageStatData: importedPageStatData.PageStatData,
    Paragraph: importedParagraph.Paragraph,
    ParagraphFormat: importedParagraphFormat.ParagraphFormat,
    ParagraphFormatResponse: importedParagraphFormatResponse.ParagraphFormatResponse,
    ParagraphInsert: importedParagraphInsert.ParagraphInsert,
    ParagraphLink: importedParagraphLink.ParagraphLink,
    ParagraphLinkCollection: importedParagraphLinkCollection.ParagraphLinkCollection,
    ParagraphLinkCollectionResponse: importedParagraphLinkCollectionResponse.ParagraphLinkCollectionResponse,
    ParagraphListFormatResponse: importedParagraphListFormatResponse.ParagraphListFormatResponse,
    ParagraphResponse: importedParagraphResponse.ParagraphResponse,
    PclSaveOptionsData: importedPclSaveOptionsData.PclSaveOptionsData,
    PdfDigitalSignatureDetailsData: importedPdfDigitalSignatureDetailsData.PdfDigitalSignatureDetailsData,
    PdfEncryptionDetailsData: importedPdfEncryptionDetailsData.PdfEncryptionDetailsData,
    PdfSaveOptionsData: importedPdfSaveOptionsData.PdfSaveOptionsData,
    PngSaveOptionsData: importedPngSaveOptionsData.PngSaveOptionsData,
    PreferredWidth: importedPreferredWidth.PreferredWidth,
    ProtectionData: importedProtectionData.ProtectionData,
    ProtectionDataResponse: importedProtectionDataResponse.ProtectionDataResponse,
    ProtectionRequest: importedProtectionRequest.ProtectionRequest,
    PsSaveOptionsData: importedPsSaveOptionsData.PsSaveOptionsData,
    RangeDocument: importedRangeDocument.RangeDocument,
    RangeTextResponse: importedRangeTextResponse.RangeTextResponse,
    ReplaceRange: importedReplaceRange.ReplaceRange,
    ReplaceTextParameters: importedReplaceTextParameters.ReplaceTextParameters,
    ReplaceTextResponse: importedReplaceTextResponse.ReplaceTextResponse,
    ReportBuildOptions: importedReportBuildOptions.ReportBuildOptions,
    ReportEngineSettings: importedReportEngineSettings.ReportEngineSettings,
    RevisionsModificationResponse: importedRevisionsModificationResponse.RevisionsModificationResponse,
    RtfSaveOptionsData: importedRtfSaveOptionsData.RtfSaveOptionsData,
    Run: importedRun.Run,
    RunBase: importedRunBase.RunBase,
    RunInsert: importedRunInsert.RunInsert,
    RunLink: importedRunLink.RunLink,
    RunResponse: importedRunResponse.RunResponse,
    RunUpdate: importedRunUpdate.RunUpdate,
    Runs: importedRuns.Runs,
    RunsResponse: importedRunsResponse.RunsResponse,
    SaveOptionsData: importedSaveOptionsData.SaveOptionsData,
    SaveResponse: importedSaveResponse.SaveResponse,
    SaveResult: importedSaveResult.SaveResult,
    SearchResponse: importedSearchResponse.SearchResponse,
    SearchResult: importedSearchResult.SearchResult,
    SearchResultsCollection: importedSearchResultsCollection.SearchResultsCollection,
    Section: importedSection.Section,
    SectionLink: importedSectionLink.SectionLink,
    SectionLinkCollection: importedSectionLinkCollection.SectionLinkCollection,
    SectionLinkCollectionResponse: importedSectionLinkCollectionResponse.SectionLinkCollectionResponse,
    SectionPageSetupResponse: importedSectionPageSetupResponse.SectionPageSetupResponse,
    SectionResponse: importedSectionResponse.SectionResponse,
    Shading: importedShading.Shading,
    SplitDocumentResponse: importedSplitDocumentResponse.SplitDocumentResponse,
    SplitDocumentResult: importedSplitDocumentResult.SplitDocumentResult,
    StatDataResponse: importedStatDataResponse.StatDataResponse,
    StorageFile: importedStorageFile.StorageFile,
    StoryChildNodes: importedStoryChildNodes.StoryChildNodes,
    StringFormatData: importedStringFormatData.StringFormatData,
    Style: importedStyle.Style,
    StyleApply: importedStyleApply.StyleApply,
    StyleCopy: importedStyleCopy.StyleCopy,
    StyleInsert: importedStyleInsert.StyleInsert,
    StyleResponse: importedStyleResponse.StyleResponse,
    StyleUpdate: importedStyleUpdate.StyleUpdate,
    StylesResponse: importedStylesResponse.StylesResponse,
    SvgSaveOptionsData: importedSvgSaveOptionsData.SvgSaveOptionsData,
    TabStop: importedTabStop.TabStop,
    TabStopBase: importedTabStopBase.TabStopBase,
    TabStopInsert: importedTabStopInsert.TabStopInsert,
    TabStopsResponse: importedTabStopsResponse.TabStopsResponse,
    Table: importedTable.Table,
    TableCell: importedTableCell.TableCell,
    TableCellFormat: importedTableCellFormat.TableCellFormat,
    TableCellFormatResponse: importedTableCellFormatResponse.TableCellFormatResponse,
    TableCellInsert: importedTableCellInsert.TableCellInsert,
    TableCellResponse: importedTableCellResponse.TableCellResponse,
    TableInsert: importedTableInsert.TableInsert,
    TableLink: importedTableLink.TableLink,
    TableLinkCollection: importedTableLinkCollection.TableLinkCollection,
    TableLinkCollectionResponse: importedTableLinkCollectionResponse.TableLinkCollectionResponse,
    TableProperties: importedTableProperties.TableProperties,
    TablePropertiesResponse: importedTablePropertiesResponse.TablePropertiesResponse,
    TableResponse: importedTableResponse.TableResponse,
    TableRow: importedTableRow.TableRow,
    TableRowFormat: importedTableRowFormat.TableRowFormat,
    TableRowFormatResponse: importedTableRowFormatResponse.TableRowFormatResponse,
    TableRowInsert: importedTableRowInsert.TableRowInsert,
    TableRowResponse: importedTableRowResponse.TableRowResponse,
    TextSaveOptionsData: importedTextSaveOptionsData.TextSaveOptionsData,
    TiffSaveOptionsData: importedTiffSaveOptionsData.TiffSaveOptionsData,
    WatermarkText: importedWatermarkText.WatermarkText,
    WordMLSaveOptionsData: importedWordMLSaveOptionsData.WordMLSaveOptionsData,
    WordsApiErrorResponse: importedWordsApiErrorResponse.WordsApiErrorResponse,
    WordsApiLink: importedWordsApiLink.WordsApiLink,
    WordsResponse: importedWordsResponse.WordsResponse,
    XamlFixedSaveOptionsData: importedXamlFixedSaveOptionsData.XamlFixedSaveOptionsData,
    XamlFlowSaveOptionsData: importedXamlFlowSaveOptionsData.XamlFlowSaveOptionsData,
    XmlColor: importedXmlColor.XmlColor,
    XpsSaveOptionsData: importedXpsSaveOptionsData.XpsSaveOptionsData,
};
exports.typeMap = typeMap;
/**
 * Request model for AcceptAllRevisions operation.
 */
class AcceptAllRevisionsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.AcceptAllRevisionsRequest = AcceptAllRevisionsRequest;
/**
 * Request model for AppendDocument operation.
 */
class AppendDocumentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.AppendDocumentRequest = AppendDocumentRequest;
/**
 * Request model for ApplyStyleToDocumentElement operation.
 */
class ApplyStyleToDocumentElementRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ApplyStyleToDocumentElementRequest = ApplyStyleToDocumentElementRequest;
/**
 * Request model for BuildReport operation.
 */
class BuildReportRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.BuildReportRequest = BuildReportRequest;
/**
 * Request model for BuildReportOnline operation.
 */
class BuildReportOnlineRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.BuildReportOnlineRequest = BuildReportOnlineRequest;
/**
 * Request model for Classify operation.
 */
class ClassifyRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ClassifyRequest = ClassifyRequest;
/**
 * Request model for ClassifyDocument operation.
 */
class ClassifyDocumentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ClassifyDocumentRequest = ClassifyDocumentRequest;
/**
 * Request model for CompareDocument operation.
 */
class CompareDocumentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.CompareDocumentRequest = CompareDocumentRequest;
/**
 * Request model for ConvertDocument operation.
 */
class ConvertDocumentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ConvertDocumentRequest = ConvertDocumentRequest;
/**
 * Request model for CopyFile operation.
 */
class CopyFileRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.CopyFileRequest = CopyFileRequest;
/**
 * Request model for CopyFolder operation.
 */
class CopyFolderRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.CopyFolderRequest = CopyFolderRequest;
/**
 * Request model for CopyStyle operation.
 */
class CopyStyleRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.CopyStyleRequest = CopyStyleRequest;
/**
 * Request model for CreateDocument operation.
 */
class CreateDocumentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.CreateDocumentRequest = CreateDocumentRequest;
/**
 * Request model for CreateFolder operation.
 */
class CreateFolderRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.CreateFolderRequest = CreateFolderRequest;
/**
 * Request model for CreateOrUpdateDocumentProperty operation.
 */
class CreateOrUpdateDocumentPropertyRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.CreateOrUpdateDocumentPropertyRequest = CreateOrUpdateDocumentPropertyRequest;
/**
 * Request model for DeleteAllParagraphTabStops operation.
 */
class DeleteAllParagraphTabStopsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteAllParagraphTabStopsRequest = DeleteAllParagraphTabStopsRequest;
/**
 * Request model for DeleteAllParagraphTabStopsWithoutNodePath operation.
 */
class DeleteAllParagraphTabStopsWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteAllParagraphTabStopsWithoutNodePathRequest = DeleteAllParagraphTabStopsWithoutNodePathRequest;
/**
 * Request model for DeleteBorder operation.
 */
class DeleteBorderRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteBorderRequest = DeleteBorderRequest;
/**
 * Request model for DeleteBorders operation.
 */
class DeleteBordersRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteBordersRequest = DeleteBordersRequest;
/**
 * Request model for DeleteComment operation.
 */
class DeleteCommentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteCommentRequest = DeleteCommentRequest;
/**
 * Request model for DeleteDocumentProperty operation.
 */
class DeleteDocumentPropertyRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteDocumentPropertyRequest = DeleteDocumentPropertyRequest;
/**
 * Request model for DeleteDrawingObject operation.
 */
class DeleteDrawingObjectRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteDrawingObjectRequest = DeleteDrawingObjectRequest;
/**
 * Request model for DeleteDrawingObjectWithoutNodePath operation.
 */
class DeleteDrawingObjectWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteDrawingObjectWithoutNodePathRequest = DeleteDrawingObjectWithoutNodePathRequest;
/**
 * Request model for DeleteField operation.
 */
class DeleteFieldRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteFieldRequest = DeleteFieldRequest;
/**
 * Request model for DeleteFieldWithoutNodePath operation.
 */
class DeleteFieldWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteFieldWithoutNodePathRequest = DeleteFieldWithoutNodePathRequest;
/**
 * Request model for DeleteFields operation.
 */
class DeleteFieldsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteFieldsRequest = DeleteFieldsRequest;
/**
 * Request model for DeleteFieldsWithoutNodePath operation.
 */
class DeleteFieldsWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteFieldsWithoutNodePathRequest = DeleteFieldsWithoutNodePathRequest;
/**
 * Request model for DeleteFile operation.
 */
class DeleteFileRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteFileRequest = DeleteFileRequest;
/**
 * Request model for DeleteFolder operation.
 */
class DeleteFolderRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteFolderRequest = DeleteFolderRequest;
/**
 * Request model for DeleteFootnote operation.
 */
class DeleteFootnoteRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteFootnoteRequest = DeleteFootnoteRequest;
/**
 * Request model for DeleteFootnoteWithoutNodePath operation.
 */
class DeleteFootnoteWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteFootnoteWithoutNodePathRequest = DeleteFootnoteWithoutNodePathRequest;
/**
 * Request model for DeleteFormField operation.
 */
class DeleteFormFieldRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteFormFieldRequest = DeleteFormFieldRequest;
/**
 * Request model for DeleteFormFieldWithoutNodePath operation.
 */
class DeleteFormFieldWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteFormFieldWithoutNodePathRequest = DeleteFormFieldWithoutNodePathRequest;
/**
 * Request model for DeleteHeaderFooter operation.
 */
class DeleteHeaderFooterRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteHeaderFooterRequest = DeleteHeaderFooterRequest;
/**
 * Request model for DeleteHeadersFooters operation.
 */
class DeleteHeadersFootersRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteHeadersFootersRequest = DeleteHeadersFootersRequest;
/**
 * Request model for DeleteMacros operation.
 */
class DeleteMacrosRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteMacrosRequest = DeleteMacrosRequest;
/**
 * Request model for DeleteOfficeMathObject operation.
 */
class DeleteOfficeMathObjectRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteOfficeMathObjectRequest = DeleteOfficeMathObjectRequest;
/**
 * Request model for DeleteOfficeMathObjectWithoutNodePath operation.
 */
class DeleteOfficeMathObjectWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteOfficeMathObjectWithoutNodePathRequest = DeleteOfficeMathObjectWithoutNodePathRequest;
/**
 * Request model for DeleteParagraph operation.
 */
class DeleteParagraphRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteParagraphRequest = DeleteParagraphRequest;
/**
 * Request model for DeleteParagraphListFormat operation.
 */
class DeleteParagraphListFormatRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteParagraphListFormatRequest = DeleteParagraphListFormatRequest;
/**
 * Request model for DeleteParagraphListFormatWithoutNodePath operation.
 */
class DeleteParagraphListFormatWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteParagraphListFormatWithoutNodePathRequest = DeleteParagraphListFormatWithoutNodePathRequest;
/**
 * Request model for DeleteParagraphTabStop operation.
 */
class DeleteParagraphTabStopRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteParagraphTabStopRequest = DeleteParagraphTabStopRequest;
/**
 * Request model for DeleteParagraphTabStopWithoutNodePath operation.
 */
class DeleteParagraphTabStopWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteParagraphTabStopWithoutNodePathRequest = DeleteParagraphTabStopWithoutNodePathRequest;
/**
 * Request model for DeleteParagraphWithoutNodePath operation.
 */
class DeleteParagraphWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteParagraphWithoutNodePathRequest = DeleteParagraphWithoutNodePathRequest;
/**
 * Request model for DeleteRun operation.
 */
class DeleteRunRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteRunRequest = DeleteRunRequest;
/**
 * Request model for DeleteSection operation.
 */
class DeleteSectionRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteSectionRequest = DeleteSectionRequest;
/**
 * Request model for DeleteTable operation.
 */
class DeleteTableRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteTableRequest = DeleteTableRequest;
/**
 * Request model for DeleteTableCell operation.
 */
class DeleteTableCellRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteTableCellRequest = DeleteTableCellRequest;
/**
 * Request model for DeleteTableRow operation.
 */
class DeleteTableRowRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteTableRowRequest = DeleteTableRowRequest;
/**
 * Request model for DeleteTableWithoutNodePath operation.
 */
class DeleteTableWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteTableWithoutNodePathRequest = DeleteTableWithoutNodePathRequest;
/**
 * Request model for DeleteWatermark operation.
 */
class DeleteWatermarkRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DeleteWatermarkRequest = DeleteWatermarkRequest;
/**
 * Request model for DownloadFile operation.
 */
class DownloadFileRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.DownloadFileRequest = DownloadFileRequest;
/**
 * Request model for ExecuteMailMerge operation.
 */
class ExecuteMailMergeRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ExecuteMailMergeRequest = ExecuteMailMergeRequest;
/**
 * Request model for ExecuteMailMergeOnline operation.
 */
class ExecuteMailMergeOnlineRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ExecuteMailMergeOnlineRequest = ExecuteMailMergeOnlineRequest;
/**
 * Request model for GetAvailableFonts operation.
 */
class GetAvailableFontsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetAvailableFontsRequest = GetAvailableFontsRequest;
/**
 * Request model for GetBookmarkByName operation.
 */
class GetBookmarkByNameRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetBookmarkByNameRequest = GetBookmarkByNameRequest;
/**
 * Request model for GetBookmarks operation.
 */
class GetBookmarksRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetBookmarksRequest = GetBookmarksRequest;
/**
 * Request model for GetBorder operation.
 */
class GetBorderRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetBorderRequest = GetBorderRequest;
/**
 * Request model for GetBorders operation.
 */
class GetBordersRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetBordersRequest = GetBordersRequest;
/**
 * Request model for GetComment operation.
 */
class GetCommentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetCommentRequest = GetCommentRequest;
/**
 * Request model for GetComments operation.
 */
class GetCommentsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetCommentsRequest = GetCommentsRequest;
/**
 * Request model for GetDocument operation.
 */
class GetDocumentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentRequest = GetDocumentRequest;
/**
 * Request model for GetDocumentDrawingObjectByIndex operation.
 */
class GetDocumentDrawingObjectByIndexRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentDrawingObjectByIndexRequest = GetDocumentDrawingObjectByIndexRequest;
/**
 * Request model for GetDocumentDrawingObjectByIndexWithoutNodePath operation.
 */
class GetDocumentDrawingObjectByIndexWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentDrawingObjectByIndexWithoutNodePathRequest = GetDocumentDrawingObjectByIndexWithoutNodePathRequest;
/**
 * Request model for GetDocumentDrawingObjectImageData operation.
 */
class GetDocumentDrawingObjectImageDataRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentDrawingObjectImageDataRequest = GetDocumentDrawingObjectImageDataRequest;
/**
 * Request model for GetDocumentDrawingObjectImageDataWithoutNodePath operation.
 */
class GetDocumentDrawingObjectImageDataWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentDrawingObjectImageDataWithoutNodePathRequest = GetDocumentDrawingObjectImageDataWithoutNodePathRequest;
/**
 * Request model for GetDocumentDrawingObjectOleData operation.
 */
class GetDocumentDrawingObjectOleDataRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentDrawingObjectOleDataRequest = GetDocumentDrawingObjectOleDataRequest;
/**
 * Request model for GetDocumentDrawingObjectOleDataWithoutNodePath operation.
 */
class GetDocumentDrawingObjectOleDataWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentDrawingObjectOleDataWithoutNodePathRequest = GetDocumentDrawingObjectOleDataWithoutNodePathRequest;
/**
 * Request model for GetDocumentDrawingObjects operation.
 */
class GetDocumentDrawingObjectsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentDrawingObjectsRequest = GetDocumentDrawingObjectsRequest;
/**
 * Request model for GetDocumentDrawingObjectsWithoutNodePath operation.
 */
class GetDocumentDrawingObjectsWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentDrawingObjectsWithoutNodePathRequest = GetDocumentDrawingObjectsWithoutNodePathRequest;
/**
 * Request model for GetDocumentFieldNames operation.
 */
class GetDocumentFieldNamesRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentFieldNamesRequest = GetDocumentFieldNamesRequest;
/**
 * Request model for GetDocumentFieldNamesOnline operation.
 */
class GetDocumentFieldNamesOnlineRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentFieldNamesOnlineRequest = GetDocumentFieldNamesOnlineRequest;
/**
 * Request model for GetDocumentHyperlinkByIndex operation.
 */
class GetDocumentHyperlinkByIndexRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentHyperlinkByIndexRequest = GetDocumentHyperlinkByIndexRequest;
/**
 * Request model for GetDocumentHyperlinks operation.
 */
class GetDocumentHyperlinksRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentHyperlinksRequest = GetDocumentHyperlinksRequest;
/**
 * Request model for GetDocumentProperties operation.
 */
class GetDocumentPropertiesRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentPropertiesRequest = GetDocumentPropertiesRequest;
/**
 * Request model for GetDocumentProperty operation.
 */
class GetDocumentPropertyRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentPropertyRequest = GetDocumentPropertyRequest;
/**
 * Request model for GetDocumentProtection operation.
 */
class GetDocumentProtectionRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentProtectionRequest = GetDocumentProtectionRequest;
/**
 * Request model for GetDocumentStatistics operation.
 */
class GetDocumentStatisticsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentStatisticsRequest = GetDocumentStatisticsRequest;
/**
 * Request model for GetDocumentWithFormat operation.
 */
class GetDocumentWithFormatRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetDocumentWithFormatRequest = GetDocumentWithFormatRequest;
/**
 * Request model for GetField operation.
 */
class GetFieldRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetFieldRequest = GetFieldRequest;
/**
 * Request model for GetFieldWithoutNodePath operation.
 */
class GetFieldWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetFieldWithoutNodePathRequest = GetFieldWithoutNodePathRequest;
/**
 * Request model for GetFields operation.
 */
class GetFieldsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetFieldsRequest = GetFieldsRequest;
/**
 * Request model for GetFieldsWithoutNodePath operation.
 */
class GetFieldsWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetFieldsWithoutNodePathRequest = GetFieldsWithoutNodePathRequest;
/**
 * Request model for GetFilesList operation.
 */
class GetFilesListRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetFilesListRequest = GetFilesListRequest;
/**
 * Request model for GetFootnote operation.
 */
class GetFootnoteRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetFootnoteRequest = GetFootnoteRequest;
/**
 * Request model for GetFootnoteWithoutNodePath operation.
 */
class GetFootnoteWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetFootnoteWithoutNodePathRequest = GetFootnoteWithoutNodePathRequest;
/**
 * Request model for GetFootnotes operation.
 */
class GetFootnotesRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetFootnotesRequest = GetFootnotesRequest;
/**
 * Request model for GetFootnotesWithoutNodePath operation.
 */
class GetFootnotesWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetFootnotesWithoutNodePathRequest = GetFootnotesWithoutNodePathRequest;
/**
 * Request model for GetFormField operation.
 */
class GetFormFieldRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetFormFieldRequest = GetFormFieldRequest;
/**
 * Request model for GetFormFieldWithoutNodePath operation.
 */
class GetFormFieldWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetFormFieldWithoutNodePathRequest = GetFormFieldWithoutNodePathRequest;
/**
 * Request model for GetFormFields operation.
 */
class GetFormFieldsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetFormFieldsRequest = GetFormFieldsRequest;
/**
 * Request model for GetFormFieldsWithoutNodePath operation.
 */
class GetFormFieldsWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetFormFieldsWithoutNodePathRequest = GetFormFieldsWithoutNodePathRequest;
/**
 * Request model for GetHeaderFooter operation.
 */
class GetHeaderFooterRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetHeaderFooterRequest = GetHeaderFooterRequest;
/**
 * Request model for GetHeaderFooterOfSection operation.
 */
class GetHeaderFooterOfSectionRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetHeaderFooterOfSectionRequest = GetHeaderFooterOfSectionRequest;
/**
 * Request model for GetHeaderFooters operation.
 */
class GetHeaderFootersRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetHeaderFootersRequest = GetHeaderFootersRequest;
/**
 * Request model for GetList operation.
 */
class GetListRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetListRequest = GetListRequest;
/**
 * Request model for GetLists operation.
 */
class GetListsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetListsRequest = GetListsRequest;
/**
 * Request model for GetOfficeMathObject operation.
 */
class GetOfficeMathObjectRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetOfficeMathObjectRequest = GetOfficeMathObjectRequest;
/**
 * Request model for GetOfficeMathObjectWithoutNodePath operation.
 */
class GetOfficeMathObjectWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetOfficeMathObjectWithoutNodePathRequest = GetOfficeMathObjectWithoutNodePathRequest;
/**
 * Request model for GetOfficeMathObjects operation.
 */
class GetOfficeMathObjectsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetOfficeMathObjectsRequest = GetOfficeMathObjectsRequest;
/**
 * Request model for GetOfficeMathObjectsWithoutNodePath operation.
 */
class GetOfficeMathObjectsWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetOfficeMathObjectsWithoutNodePathRequest = GetOfficeMathObjectsWithoutNodePathRequest;
/**
 * Request model for GetParagraph operation.
 */
class GetParagraphRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetParagraphRequest = GetParagraphRequest;
/**
 * Request model for GetParagraphFormat operation.
 */
class GetParagraphFormatRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetParagraphFormatRequest = GetParagraphFormatRequest;
/**
 * Request model for GetParagraphFormatWithoutNodePath operation.
 */
class GetParagraphFormatWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetParagraphFormatWithoutNodePathRequest = GetParagraphFormatWithoutNodePathRequest;
/**
 * Request model for GetParagraphListFormat operation.
 */
class GetParagraphListFormatRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetParagraphListFormatRequest = GetParagraphListFormatRequest;
/**
 * Request model for GetParagraphListFormatWithoutNodePath operation.
 */
class GetParagraphListFormatWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetParagraphListFormatWithoutNodePathRequest = GetParagraphListFormatWithoutNodePathRequest;
/**
 * Request model for GetParagraphTabStops operation.
 */
class GetParagraphTabStopsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetParagraphTabStopsRequest = GetParagraphTabStopsRequest;
/**
 * Request model for GetParagraphTabStopsWithoutNodePath operation.
 */
class GetParagraphTabStopsWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetParagraphTabStopsWithoutNodePathRequest = GetParagraphTabStopsWithoutNodePathRequest;
/**
 * Request model for GetParagraphWithoutNodePath operation.
 */
class GetParagraphWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetParagraphWithoutNodePathRequest = GetParagraphWithoutNodePathRequest;
/**
 * Request model for GetParagraphs operation.
 */
class GetParagraphsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetParagraphsRequest = GetParagraphsRequest;
/**
 * Request model for GetParagraphsWithoutNodePath operation.
 */
class GetParagraphsWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetParagraphsWithoutNodePathRequest = GetParagraphsWithoutNodePathRequest;
/**
 * Request model for GetRangeText operation.
 */
class GetRangeTextRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetRangeTextRequest = GetRangeTextRequest;
/**
 * Request model for GetRun operation.
 */
class GetRunRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetRunRequest = GetRunRequest;
/**
 * Request model for GetRunFont operation.
 */
class GetRunFontRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetRunFontRequest = GetRunFontRequest;
/**
 * Request model for GetRuns operation.
 */
class GetRunsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetRunsRequest = GetRunsRequest;
/**
 * Request model for GetSection operation.
 */
class GetSectionRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetSectionRequest = GetSectionRequest;
/**
 * Request model for GetSectionPageSetup operation.
 */
class GetSectionPageSetupRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetSectionPageSetupRequest = GetSectionPageSetupRequest;
/**
 * Request model for GetSections operation.
 */
class GetSectionsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetSectionsRequest = GetSectionsRequest;
/**
 * Request model for GetStyle operation.
 */
class GetStyleRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetStyleRequest = GetStyleRequest;
/**
 * Request model for GetStyleFromDocumentElement operation.
 */
class GetStyleFromDocumentElementRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetStyleFromDocumentElementRequest = GetStyleFromDocumentElementRequest;
/**
 * Request model for GetStyles operation.
 */
class GetStylesRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetStylesRequest = GetStylesRequest;
/**
 * Request model for GetTable operation.
 */
class GetTableRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetTableRequest = GetTableRequest;
/**
 * Request model for GetTableCell operation.
 */
class GetTableCellRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetTableCellRequest = GetTableCellRequest;
/**
 * Request model for GetTableCellFormat operation.
 */
class GetTableCellFormatRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetTableCellFormatRequest = GetTableCellFormatRequest;
/**
 * Request model for GetTableProperties operation.
 */
class GetTablePropertiesRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetTablePropertiesRequest = GetTablePropertiesRequest;
/**
 * Request model for GetTablePropertiesWithoutNodePath operation.
 */
class GetTablePropertiesWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetTablePropertiesWithoutNodePathRequest = GetTablePropertiesWithoutNodePathRequest;
/**
 * Request model for GetTableRow operation.
 */
class GetTableRowRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetTableRowRequest = GetTableRowRequest;
/**
 * Request model for GetTableRowFormat operation.
 */
class GetTableRowFormatRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetTableRowFormatRequest = GetTableRowFormatRequest;
/**
 * Request model for GetTableWithoutNodePath operation.
 */
class GetTableWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetTableWithoutNodePathRequest = GetTableWithoutNodePathRequest;
/**
 * Request model for GetTables operation.
 */
class GetTablesRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetTablesRequest = GetTablesRequest;
/**
 * Request model for GetTablesWithoutNodePath operation.
 */
class GetTablesWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.GetTablesWithoutNodePathRequest = GetTablesWithoutNodePathRequest;
/**
 * Request model for InsertComment operation.
 */
class InsertCommentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertCommentRequest = InsertCommentRequest;
/**
 * Request model for InsertDrawingObject operation.
 */
class InsertDrawingObjectRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertDrawingObjectRequest = InsertDrawingObjectRequest;
/**
 * Request model for InsertDrawingObjectWithoutNodePath operation.
 */
class InsertDrawingObjectWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertDrawingObjectWithoutNodePathRequest = InsertDrawingObjectWithoutNodePathRequest;
/**
 * Request model for InsertField operation.
 */
class InsertFieldRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertFieldRequest = InsertFieldRequest;
/**
 * Request model for InsertFieldWithoutNodePath operation.
 */
class InsertFieldWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertFieldWithoutNodePathRequest = InsertFieldWithoutNodePathRequest;
/**
 * Request model for InsertFootnote operation.
 */
class InsertFootnoteRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertFootnoteRequest = InsertFootnoteRequest;
/**
 * Request model for InsertFootnoteWithoutNodePath operation.
 */
class InsertFootnoteWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertFootnoteWithoutNodePathRequest = InsertFootnoteWithoutNodePathRequest;
/**
 * Request model for InsertFormField operation.
 */
class InsertFormFieldRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertFormFieldRequest = InsertFormFieldRequest;
/**
 * Request model for InsertFormFieldWithoutNodePath operation.
 */
class InsertFormFieldWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertFormFieldWithoutNodePathRequest = InsertFormFieldWithoutNodePathRequest;
/**
 * Request model for InsertHeaderFooter operation.
 */
class InsertHeaderFooterRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertHeaderFooterRequest = InsertHeaderFooterRequest;
/**
 * Request model for InsertList operation.
 */
class InsertListRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertListRequest = InsertListRequest;
/**
 * Request model for InsertOrUpdateParagraphTabStop operation.
 */
class InsertOrUpdateParagraphTabStopRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertOrUpdateParagraphTabStopRequest = InsertOrUpdateParagraphTabStopRequest;
/**
 * Request model for InsertOrUpdateParagraphTabStopWithoutNodePath operation.
 */
class InsertOrUpdateParagraphTabStopWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertOrUpdateParagraphTabStopWithoutNodePathRequest = InsertOrUpdateParagraphTabStopWithoutNodePathRequest;
/**
 * Request model for InsertPageNumbers operation.
 */
class InsertPageNumbersRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertPageNumbersRequest = InsertPageNumbersRequest;
/**
 * Request model for InsertParagraph operation.
 */
class InsertParagraphRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertParagraphRequest = InsertParagraphRequest;
/**
 * Request model for InsertParagraphWithoutNodePath operation.
 */
class InsertParagraphWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertParagraphWithoutNodePathRequest = InsertParagraphWithoutNodePathRequest;
/**
 * Request model for InsertRun operation.
 */
class InsertRunRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertRunRequest = InsertRunRequest;
/**
 * Request model for InsertStyle operation.
 */
class InsertStyleRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertStyleRequest = InsertStyleRequest;
/**
 * Request model for InsertTable operation.
 */
class InsertTableRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertTableRequest = InsertTableRequest;
/**
 * Request model for InsertTableCell operation.
 */
class InsertTableCellRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertTableCellRequest = InsertTableCellRequest;
/**
 * Request model for InsertTableRow operation.
 */
class InsertTableRowRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertTableRowRequest = InsertTableRowRequest;
/**
 * Request model for InsertTableWithoutNodePath operation.
 */
class InsertTableWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertTableWithoutNodePathRequest = InsertTableWithoutNodePathRequest;
/**
 * Request model for InsertWatermarkImage operation.
 */
class InsertWatermarkImageRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertWatermarkImageRequest = InsertWatermarkImageRequest;
/**
 * Request model for InsertWatermarkText operation.
 */
class InsertWatermarkTextRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.InsertWatermarkTextRequest = InsertWatermarkTextRequest;
/**
 * Request model for LoadWebDocument operation.
 */
class LoadWebDocumentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.LoadWebDocumentRequest = LoadWebDocumentRequest;
/**
 * Request model for MoveFile operation.
 */
class MoveFileRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.MoveFileRequest = MoveFileRequest;
/**
 * Request model for MoveFolder operation.
 */
class MoveFolderRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.MoveFolderRequest = MoveFolderRequest;
/**
 * Request model for ProtectDocument operation.
 */
class ProtectDocumentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ProtectDocumentRequest = ProtectDocumentRequest;
/**
 * Request model for RejectAllRevisions operation.
 */
class RejectAllRevisionsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.RejectAllRevisionsRequest = RejectAllRevisionsRequest;
/**
 * Request model for RemoveRange operation.
 */
class RemoveRangeRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.RemoveRangeRequest = RemoveRangeRequest;
/**
 * Request model for RenderDrawingObject operation.
 */
class RenderDrawingObjectRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.RenderDrawingObjectRequest = RenderDrawingObjectRequest;
/**
 * Request model for RenderDrawingObjectWithoutNodePath operation.
 */
class RenderDrawingObjectWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.RenderDrawingObjectWithoutNodePathRequest = RenderDrawingObjectWithoutNodePathRequest;
/**
 * Request model for RenderMathObject operation.
 */
class RenderMathObjectRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.RenderMathObjectRequest = RenderMathObjectRequest;
/**
 * Request model for RenderMathObjectWithoutNodePath operation.
 */
class RenderMathObjectWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.RenderMathObjectWithoutNodePathRequest = RenderMathObjectWithoutNodePathRequest;
/**
 * Request model for RenderPage operation.
 */
class RenderPageRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.RenderPageRequest = RenderPageRequest;
/**
 * Request model for RenderParagraph operation.
 */
class RenderParagraphRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.RenderParagraphRequest = RenderParagraphRequest;
/**
 * Request model for RenderParagraphWithoutNodePath operation.
 */
class RenderParagraphWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.RenderParagraphWithoutNodePathRequest = RenderParagraphWithoutNodePathRequest;
/**
 * Request model for RenderTable operation.
 */
class RenderTableRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.RenderTableRequest = RenderTableRequest;
/**
 * Request model for RenderTableWithoutNodePath operation.
 */
class RenderTableWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.RenderTableWithoutNodePathRequest = RenderTableWithoutNodePathRequest;
/**
 * Request model for ReplaceText operation.
 */
class ReplaceTextRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ReplaceTextRequest = ReplaceTextRequest;
/**
 * Request model for ReplaceWithText operation.
 */
class ReplaceWithTextRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ReplaceWithTextRequest = ReplaceWithTextRequest;
/**
 * Request model for ResetCache operation.
 */
class ResetCacheRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.ResetCacheRequest = ResetCacheRequest;
/**
 * Request model for SaveAs operation.
 */
class SaveAsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.SaveAsRequest = SaveAsRequest;
/**
 * Request model for SaveAsRange operation.
 */
class SaveAsRangeRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.SaveAsRangeRequest = SaveAsRangeRequest;
/**
 * Request model for SaveAsTiff operation.
 */
class SaveAsTiffRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.SaveAsTiffRequest = SaveAsTiffRequest;
/**
 * Request model for Search operation.
 */
class SearchRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.SearchRequest = SearchRequest;
/**
 * Request model for SplitDocument operation.
 */
class SplitDocumentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.SplitDocumentRequest = SplitDocumentRequest;
/**
 * Request model for UnprotectDocument operation.
 */
class UnprotectDocumentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UnprotectDocumentRequest = UnprotectDocumentRequest;
/**
 * Request model for UpdateBookmark operation.
 */
class UpdateBookmarkRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateBookmarkRequest = UpdateBookmarkRequest;
/**
 * Request model for UpdateBorder operation.
 */
class UpdateBorderRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateBorderRequest = UpdateBorderRequest;
/**
 * Request model for UpdateComment operation.
 */
class UpdateCommentRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateCommentRequest = UpdateCommentRequest;
/**
 * Request model for UpdateDrawingObject operation.
 */
class UpdateDrawingObjectRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateDrawingObjectRequest = UpdateDrawingObjectRequest;
/**
 * Request model for UpdateDrawingObjectWithoutNodePath operation.
 */
class UpdateDrawingObjectWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateDrawingObjectWithoutNodePathRequest = UpdateDrawingObjectWithoutNodePathRequest;
/**
 * Request model for UpdateField operation.
 */
class UpdateFieldRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateFieldRequest = UpdateFieldRequest;
/**
 * Request model for UpdateFields operation.
 */
class UpdateFieldsRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateFieldsRequest = UpdateFieldsRequest;
/**
 * Request model for UpdateFootnote operation.
 */
class UpdateFootnoteRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateFootnoteRequest = UpdateFootnoteRequest;
/**
 * Request model for UpdateFootnoteWithoutNodePath operation.
 */
class UpdateFootnoteWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateFootnoteWithoutNodePathRequest = UpdateFootnoteWithoutNodePathRequest;
/**
 * Request model for UpdateFormField operation.
 */
class UpdateFormFieldRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateFormFieldRequest = UpdateFormFieldRequest;
/**
 * Request model for UpdateFormFieldWithoutNodePath operation.
 */
class UpdateFormFieldWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateFormFieldWithoutNodePathRequest = UpdateFormFieldWithoutNodePathRequest;
/**
 * Request model for UpdateList operation.
 */
class UpdateListRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateListRequest = UpdateListRequest;
/**
 * Request model for UpdateListLevel operation.
 */
class UpdateListLevelRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateListLevelRequest = UpdateListLevelRequest;
/**
 * Request model for UpdateParagraphFormat operation.
 */
class UpdateParagraphFormatRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateParagraphFormatRequest = UpdateParagraphFormatRequest;
/**
 * Request model for UpdateParagraphFormatWithoutNodePath operation.
 */
class UpdateParagraphFormatWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateParagraphFormatWithoutNodePathRequest = UpdateParagraphFormatWithoutNodePathRequest;
/**
 * Request model for UpdateParagraphListFormat operation.
 */
class UpdateParagraphListFormatRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateParagraphListFormatRequest = UpdateParagraphListFormatRequest;
/**
 * Request model for UpdateParagraphListFormatWithoutNodePath operation.
 */
class UpdateParagraphListFormatWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateParagraphListFormatWithoutNodePathRequest = UpdateParagraphListFormatWithoutNodePathRequest;
/**
 * Request model for UpdateRun operation.
 */
class UpdateRunRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateRunRequest = UpdateRunRequest;
/**
 * Request model for UpdateRunFont operation.
 */
class UpdateRunFontRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateRunFontRequest = UpdateRunFontRequest;
/**
 * Request model for UpdateSectionPageSetup operation.
 */
class UpdateSectionPageSetupRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateSectionPageSetupRequest = UpdateSectionPageSetupRequest;
/**
 * Request model for UpdateStyle operation.
 */
class UpdateStyleRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateStyleRequest = UpdateStyleRequest;
/**
 * Request model for UpdateTableCellFormat operation.
 */
class UpdateTableCellFormatRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateTableCellFormatRequest = UpdateTableCellFormatRequest;
/**
 * Request model for UpdateTableProperties operation.
 */
class UpdateTablePropertiesRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateTablePropertiesRequest = UpdateTablePropertiesRequest;
/**
 * Request model for UpdateTablePropertiesWithoutNodePath operation.
 */
class UpdateTablePropertiesWithoutNodePathRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateTablePropertiesWithoutNodePathRequest = UpdateTablePropertiesWithoutNodePathRequest;
/**
 * Request model for UpdateTableRowFormat operation.
 */
class UpdateTableRowFormatRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UpdateTableRowFormatRequest = UpdateTableRowFormatRequest;
/**
 * Request model for UploadFile operation.
 */
class UploadFileRequest {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.UploadFileRequest = UploadFileRequest;
