"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.importsMapStringFormatData = {};
/**
 * Allows to specify System.Drawing.StringFormat options.
 */
class StringFormatData {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return StringFormatData.attributeTypeMap;
    }
}
exports.StringFormatData = StringFormatData;
/**
 * Attribute type map
 */
StringFormatData.attributeTypeMap = [
    {
        name: "alignment",
        baseName: "Alignment",
        type: "StringFormatData.AlignmentEnum",
    },
    {
        name: "formatFlags",
        baseName: "FormatFlags",
        type: "StringFormatData.FormatFlagsEnum",
    },
    {
        name: "hotkeyPrefix",
        baseName: "HotkeyPrefix",
        type: "StringFormatData.HotkeyPrefixEnum",
    },
    {
        name: "lineAlignment",
        baseName: "LineAlignment",
        type: "StringFormatData.LineAlignmentEnum",
    },
    {
        name: "trimming",
        baseName: "Trimming",
        type: "StringFormatData.TrimmingEnum",
    }
];
/**
 * Enums for StringFormatData
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (StringFormatData) {
    let AlignmentEnum;
    (function (AlignmentEnum) {
        AlignmentEnum[AlignmentEnum["Near"] = 'Near'] = "Near";
        AlignmentEnum[AlignmentEnum["Center"] = 'Center'] = "Center";
        AlignmentEnum[AlignmentEnum["Far"] = 'Far'] = "Far";
    })(AlignmentEnum = StringFormatData.AlignmentEnum || (StringFormatData.AlignmentEnum = {}));
    let FormatFlagsEnum;
    (function (FormatFlagsEnum) {
        FormatFlagsEnum[FormatFlagsEnum["DirectionRightToLeft"] = 'DirectionRightToLeft'] = "DirectionRightToLeft";
        FormatFlagsEnum[FormatFlagsEnum["DirectionVertical"] = 'DirectionVertical'] = "DirectionVertical";
        FormatFlagsEnum[FormatFlagsEnum["FitBlackBox"] = 'FitBlackBox'] = "FitBlackBox";
        FormatFlagsEnum[FormatFlagsEnum["DisplayFormatControl"] = 'DisplayFormatControl'] = "DisplayFormatControl";
        FormatFlagsEnum[FormatFlagsEnum["NoFontFallback"] = 'NoFontFallback'] = "NoFontFallback";
        FormatFlagsEnum[FormatFlagsEnum["MeasureTrailingSpaces"] = 'MeasureTrailingSpaces'] = "MeasureTrailingSpaces";
        FormatFlagsEnum[FormatFlagsEnum["NoWrap"] = 'NoWrap'] = "NoWrap";
        FormatFlagsEnum[FormatFlagsEnum["LineLimit"] = 'LineLimit'] = "LineLimit";
        FormatFlagsEnum[FormatFlagsEnum["NoClip"] = 'NoClip'] = "NoClip";
    })(FormatFlagsEnum = StringFormatData.FormatFlagsEnum || (StringFormatData.FormatFlagsEnum = {}));
    let HotkeyPrefixEnum;
    (function (HotkeyPrefixEnum) {
        HotkeyPrefixEnum[HotkeyPrefixEnum["None"] = 'None'] = "None";
        HotkeyPrefixEnum[HotkeyPrefixEnum["Show"] = 'Show'] = "Show";
        HotkeyPrefixEnum[HotkeyPrefixEnum["Hide"] = 'Hide'] = "Hide";
    })(HotkeyPrefixEnum = StringFormatData.HotkeyPrefixEnum || (StringFormatData.HotkeyPrefixEnum = {}));
    let LineAlignmentEnum;
    (function (LineAlignmentEnum) {
        LineAlignmentEnum[LineAlignmentEnum["Near"] = 'Near'] = "Near";
        LineAlignmentEnum[LineAlignmentEnum["Center"] = 'Center'] = "Center";
        LineAlignmentEnum[LineAlignmentEnum["Far"] = 'Far'] = "Far";
    })(LineAlignmentEnum = StringFormatData.LineAlignmentEnum || (StringFormatData.LineAlignmentEnum = {}));
    let TrimmingEnum;
    (function (TrimmingEnum) {
        TrimmingEnum[TrimmingEnum["None"] = 'None'] = "None";
        TrimmingEnum[TrimmingEnum["Character"] = 'Character'] = "Character";
        TrimmingEnum[TrimmingEnum["Word"] = 'Word'] = "Word";
        TrimmingEnum[TrimmingEnum["EllipsisCharacter"] = 'EllipsisCharacter'] = "EllipsisCharacter";
        TrimmingEnum[TrimmingEnum["EllipsisWord"] = 'EllipsisWord'] = "EllipsisWord";
        TrimmingEnum[TrimmingEnum["EllipsisPath"] = 'EllipsisPath'] = "EllipsisPath";
    })(TrimmingEnum = StringFormatData.TrimmingEnum || (StringFormatData.TrimmingEnum = {}));
})(StringFormatData = exports.StringFormatData || (exports.StringFormatData = {}));
// tslint:enable:quotemark
