"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const saveOptionsData_1 = require("./saveOptionsData");
exports.importsMapOdtSaveOptionsData = {
    SaveOptionsData: saveOptionsData_1.SaveOptionsData,
};
/**
 * container class for odt/ott save options.
 */
class OdtSaveOptionsData extends saveOptionsData_1.SaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(OdtSaveOptionsData.attributeTypeMap);
    }
}
exports.OdtSaveOptionsData = OdtSaveOptionsData;
/**
 * Attribute type map
 */
OdtSaveOptionsData.attributeTypeMap = [
    {
        name: "isStrictSchema11",
        baseName: "IsStrictSchema11",
        type: "boolean",
    },
    {
        name: "measureUnit",
        baseName: "MeasureUnit",
        type: "OdtSaveOptionsData.MeasureUnitEnum",
    },
    {
        name: "password",
        baseName: "Password",
        type: "string",
    },
    {
        name: "prettyFormat",
        baseName: "PrettyFormat",
        type: "boolean",
    }
];
/**
 * Enums for OdtSaveOptionsData
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (OdtSaveOptionsData) {
    let MeasureUnitEnum;
    (function (MeasureUnitEnum) {
        MeasureUnitEnum[MeasureUnitEnum["Centimeters"] = 'Centimeters'] = "Centimeters";
        MeasureUnitEnum[MeasureUnitEnum["Inches"] = 'Inches'] = "Inches";
    })(MeasureUnitEnum = OdtSaveOptionsData.MeasureUnitEnum || (OdtSaveOptionsData.MeasureUnitEnum = {}));
})(OdtSaveOptionsData = exports.OdtSaveOptionsData || (exports.OdtSaveOptionsData = {}));
// tslint:enable:quotemark
