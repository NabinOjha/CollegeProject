"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const documentPosition_1 = require("./documentPosition");
const footnoteLink_1 = require("./footnoteLink");
const storyChildNodes_1 = require("./storyChildNodes");
exports.importsMapFootnote = {
    DocumentPosition: documentPosition_1.DocumentPosition,
    FootnoteLink: footnoteLink_1.FootnoteLink,
    StoryChildNodes: storyChildNodes_1.StoryChildNodes,
};
/**
 * Footnote.
 */
class Footnote extends footnoteLink_1.FootnoteLink {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(Footnote.attributeTypeMap);
    }
}
exports.Footnote = Footnote;
/**
 * Attribute type map
 */
Footnote.attributeTypeMap = [
    {
        name: "content",
        baseName: "Content",
        type: "StoryChildNodes",
    },
    {
        name: "footnoteType",
        baseName: "FootnoteType",
        type: "Footnote.FootnoteTypeEnum",
    },
    {
        name: "position",
        baseName: "Position",
        type: "DocumentPosition",
    },
    {
        name: "referenceMark",
        baseName: "ReferenceMark",
        type: "string",
    },
    {
        name: "text",
        baseName: "Text",
        type: "string",
    }
];
/**
 * Enums for Footnote
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (Footnote) {
    let FootnoteTypeEnum;
    (function (FootnoteTypeEnum) {
        FootnoteTypeEnum[FootnoteTypeEnum["Footnote"] = 'Footnote'] = "Footnote";
        FootnoteTypeEnum[FootnoteTypeEnum["Endnote"] = 'Endnote'] = "Endnote";
    })(FootnoteTypeEnum = Footnote.FootnoteTypeEnum || (Footnote.FootnoteTypeEnum = {}));
})(Footnote = exports.Footnote || (exports.Footnote = {}));
// tslint:enable:quotemark
