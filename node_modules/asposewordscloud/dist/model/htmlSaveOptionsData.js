"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const saveOptionsData_1 = require("./saveOptionsData");
exports.importsMapHtmlSaveOptionsData = {
    SaveOptionsData: saveOptionsData_1.SaveOptionsData,
};
/**
 * container class for html save options.
 */
class HtmlSaveOptionsData extends saveOptionsData_1.SaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(HtmlSaveOptionsData.attributeTypeMap);
    }
}
exports.HtmlSaveOptionsData = HtmlSaveOptionsData;
/**
 * Attribute type map
 */
HtmlSaveOptionsData.attributeTypeMap = [
    {
        name: "allowNegativeIndent",
        baseName: "AllowNegativeIndent",
        type: "boolean",
    },
    {
        name: "cssClassNamePrefix",
        baseName: "CssClassNamePrefix",
        type: "string",
    },
    {
        name: "cssStyleSheetFileName",
        baseName: "CssStyleSheetFileName",
        type: "string",
    },
    {
        name: "cssStyleSheetType",
        baseName: "CssStyleSheetType",
        type: "string",
    },
    {
        name: "documentSplitCriteria",
        baseName: "DocumentSplitCriteria",
        type: "string",
    },
    {
        name: "documentSplitHeadingLevel",
        baseName: "DocumentSplitHeadingLevel",
        type: "number",
    },
    {
        name: "encoding",
        baseName: "Encoding",
        type: "string",
    },
    {
        name: "exportDocumentProperties",
        baseName: "ExportDocumentProperties",
        type: "boolean",
    },
    {
        name: "exportDropDownFormFieldAsText",
        baseName: "ExportDropDownFormFieldAsText",
        type: "boolean",
    },
    {
        name: "exportFontResources",
        baseName: "ExportFontResources",
        type: "boolean",
    },
    {
        name: "exportFontsAsBase64",
        baseName: "ExportFontsAsBase64",
        type: "boolean",
    },
    {
        name: "exportHeadersFootersMode",
        baseName: "ExportHeadersFootersMode",
        type: "string",
    },
    {
        name: "exportImagesAsBase64",
        baseName: "ExportImagesAsBase64",
        type: "boolean",
    },
    {
        name: "exportLanguageInformation",
        baseName: "ExportLanguageInformation",
        type: "boolean",
    },
    {
        name: "exportListLabels",
        baseName: "ExportListLabels",
        type: "string",
    },
    {
        name: "exportOriginalUrlForLinkedImages",
        baseName: "ExportOriginalUrlForLinkedImages",
        type: "boolean",
    },
    {
        name: "exportPageMargins",
        baseName: "ExportPageMargins",
        type: "boolean",
    },
    {
        name: "exportPageSetup",
        baseName: "ExportPageSetup",
        type: "boolean",
    },
    {
        name: "exportRelativeFontSize",
        baseName: "ExportRelativeFontSize",
        type: "boolean",
    },
    {
        name: "exportRoundtripInformation",
        baseName: "ExportRoundtripInformation",
        type: "boolean",
    },
    {
        name: "exportTextBoxAsSvg",
        baseName: "ExportTextBoxAsSvg",
        type: "boolean",
    },
    {
        name: "exportTextInputFormFieldAsText",
        baseName: "ExportTextInputFormFieldAsText",
        type: "boolean",
    },
    {
        name: "exportTocPageNumbers",
        baseName: "ExportTocPageNumbers",
        type: "boolean",
    },
    {
        name: "exportXhtmlTransitional",
        baseName: "ExportXhtmlTransitional",
        type: "boolean",
    },
    {
        name: "fontResourcesSubsettingSizeThreshold",
        baseName: "FontResourcesSubsettingSizeThreshold",
        type: "number",
    },
    {
        name: "fontsFolder",
        baseName: "FontsFolder",
        type: "string",
    },
    {
        name: "fontsFolderAlias",
        baseName: "FontsFolderAlias",
        type: "string",
    },
    {
        name: "htmlVersion",
        baseName: "HtmlVersion",
        type: "HtmlSaveOptionsData.HtmlVersionEnum",
    },
    {
        name: "imageResolution",
        baseName: "ImageResolution",
        type: "number",
    },
    {
        name: "imagesFolder",
        baseName: "ImagesFolder",
        type: "string",
    },
    {
        name: "imagesFolderAlias",
        baseName: "ImagesFolderAlias",
        type: "string",
    },
    {
        name: "metafileFormat",
        baseName: "MetafileFormat",
        type: "HtmlSaveOptionsData.MetafileFormatEnum",
    },
    {
        name: "officeMathOutputMode",
        baseName: "OfficeMathOutputMode",
        type: "HtmlSaveOptionsData.OfficeMathOutputModeEnum",
    },
    {
        name: "prettyFormat",
        baseName: "PrettyFormat",
        type: "boolean",
    },
    {
        name: "resolveFontNames",
        baseName: "ResolveFontNames",
        type: "boolean",
    },
    {
        name: "resourceFolder",
        baseName: "ResourceFolder",
        type: "string",
    },
    {
        name: "resourceFolderAlias",
        baseName: "ResourceFolderAlias",
        type: "string",
    },
    {
        name: "scaleImageToShapeSize",
        baseName: "ScaleImageToShapeSize",
        type: "boolean",
    },
    {
        name: "tableWidthOutputMode",
        baseName: "TableWidthOutputMode",
        type: "string",
    }
];
/**
 * Enums for HtmlSaveOptionsData
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (HtmlSaveOptionsData) {
    let HtmlVersionEnum;
    (function (HtmlVersionEnum) {
        HtmlVersionEnum[HtmlVersionEnum["Xhtml"] = 'Xhtml'] = "Xhtml";
        HtmlVersionEnum[HtmlVersionEnum["Html5"] = 'Html5'] = "Html5";
    })(HtmlVersionEnum = HtmlSaveOptionsData.HtmlVersionEnum || (HtmlSaveOptionsData.HtmlVersionEnum = {}));
    let MetafileFormatEnum;
    (function (MetafileFormatEnum) {
        MetafileFormatEnum[MetafileFormatEnum["Png"] = 'Png'] = "Png";
        MetafileFormatEnum[MetafileFormatEnum["Svg"] = 'Svg'] = "Svg";
        MetafileFormatEnum[MetafileFormatEnum["EmfOrWmf"] = 'EmfOrWmf'] = "EmfOrWmf";
    })(MetafileFormatEnum = HtmlSaveOptionsData.MetafileFormatEnum || (HtmlSaveOptionsData.MetafileFormatEnum = {}));
    let OfficeMathOutputModeEnum;
    (function (OfficeMathOutputModeEnum) {
        OfficeMathOutputModeEnum[OfficeMathOutputModeEnum["Image"] = 'Image'] = "Image";
        OfficeMathOutputModeEnum[OfficeMathOutputModeEnum["MathML"] = 'MathML'] = "MathML";
        OfficeMathOutputModeEnum[OfficeMathOutputModeEnum["Text"] = 'Text'] = "Text";
    })(OfficeMathOutputModeEnum = HtmlSaveOptionsData.OfficeMathOutputModeEnum || (HtmlSaveOptionsData.OfficeMathOutputModeEnum = {}));
})(HtmlSaveOptionsData = exports.HtmlSaveOptionsData || (exports.HtmlSaveOptionsData = {}));
// tslint:enable:quotemark
