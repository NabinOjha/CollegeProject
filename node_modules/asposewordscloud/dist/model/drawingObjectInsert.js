"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const documentPosition_1 = require("./documentPosition");
exports.importsMapDrawingObjectInsert = {
    DocumentPosition: documentPosition_1.DocumentPosition,
};
/**
 * Drawing object element for insert.
 */
class DrawingObjectInsert {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return DrawingObjectInsert.attributeTypeMap;
    }
}
exports.DrawingObjectInsert = DrawingObjectInsert;
/**
 * Attribute type map
 */
DrawingObjectInsert.attributeTypeMap = [
    {
        name: "position",
        baseName: "Position",
        type: "DocumentPosition",
    },
    {
        name: "relativeHorizontalPosition",
        baseName: "RelativeHorizontalPosition",
        type: "DrawingObjectInsert.RelativeHorizontalPositionEnum",
    },
    {
        name: "left",
        baseName: "Left",
        type: "number",
    },
    {
        name: "relativeVerticalPosition",
        baseName: "RelativeVerticalPosition",
        type: "DrawingObjectInsert.RelativeVerticalPositionEnum",
    },
    {
        name: "top",
        baseName: "Top",
        type: "number",
    },
    {
        name: "width",
        baseName: "Width",
        type: "number",
    },
    {
        name: "height",
        baseName: "Height",
        type: "number",
    },
    {
        name: "wrapType",
        baseName: "WrapType",
        type: "DrawingObjectInsert.WrapTypeEnum",
    }
];
/**
 * Enums for DrawingObjectInsert
 */
// tslint:disable:quotemark
// tslint:disable-next-line:no-namespace
(function (DrawingObjectInsert) {
    let RelativeHorizontalPositionEnum;
    (function (RelativeHorizontalPositionEnum) {
        RelativeHorizontalPositionEnum[RelativeHorizontalPositionEnum["Margin"] = 'Margin'] = "Margin";
        RelativeHorizontalPositionEnum[RelativeHorizontalPositionEnum["Page"] = 'Page'] = "Page";
        RelativeHorizontalPositionEnum[RelativeHorizontalPositionEnum["Column"] = 'Column'] = "Column";
        RelativeHorizontalPositionEnum[RelativeHorizontalPositionEnum["Default"] = 'Default'] = "Default";
        RelativeHorizontalPositionEnum[RelativeHorizontalPositionEnum["Character"] = 'Character'] = "Character";
        RelativeHorizontalPositionEnum[RelativeHorizontalPositionEnum["LeftMargin"] = 'LeftMargin'] = "LeftMargin";
        RelativeHorizontalPositionEnum[RelativeHorizontalPositionEnum["RightMargin"] = 'RightMargin'] = "RightMargin";
        RelativeHorizontalPositionEnum[RelativeHorizontalPositionEnum["InsideMargin"] = 'InsideMargin'] = "InsideMargin";
        RelativeHorizontalPositionEnum[RelativeHorizontalPositionEnum["OutsideMargin"] = 'OutsideMargin'] = "OutsideMargin";
    })(RelativeHorizontalPositionEnum = DrawingObjectInsert.RelativeHorizontalPositionEnum || (DrawingObjectInsert.RelativeHorizontalPositionEnum = {}));
    let RelativeVerticalPositionEnum;
    (function (RelativeVerticalPositionEnum) {
        RelativeVerticalPositionEnum[RelativeVerticalPositionEnum["Margin"] = 'Margin'] = "Margin";
        RelativeVerticalPositionEnum[RelativeVerticalPositionEnum["TableDefault"] = 'TableDefault'] = "TableDefault";
        RelativeVerticalPositionEnum[RelativeVerticalPositionEnum["Page"] = 'Page'] = "Page";
        RelativeVerticalPositionEnum[RelativeVerticalPositionEnum["Paragraph"] = 'Paragraph'] = "Paragraph";
        RelativeVerticalPositionEnum[RelativeVerticalPositionEnum["TextFrameDefault"] = 'TextFrameDefault'] = "TextFrameDefault";
        RelativeVerticalPositionEnum[RelativeVerticalPositionEnum["Line"] = 'Line'] = "Line";
        RelativeVerticalPositionEnum[RelativeVerticalPositionEnum["TopMargin"] = 'TopMargin'] = "TopMargin";
        RelativeVerticalPositionEnum[RelativeVerticalPositionEnum["BottomMargin"] = 'BottomMargin'] = "BottomMargin";
        RelativeVerticalPositionEnum[RelativeVerticalPositionEnum["InsideMargin"] = 'InsideMargin'] = "InsideMargin";
        RelativeVerticalPositionEnum[RelativeVerticalPositionEnum["OutsideMargin"] = 'OutsideMargin'] = "OutsideMargin";
    })(RelativeVerticalPositionEnum = DrawingObjectInsert.RelativeVerticalPositionEnum || (DrawingObjectInsert.RelativeVerticalPositionEnum = {}));
    let WrapTypeEnum;
    (function (WrapTypeEnum) {
        WrapTypeEnum[WrapTypeEnum["Inline"] = 'Inline'] = "Inline";
        WrapTypeEnum[WrapTypeEnum["TopBottom"] = 'TopBottom'] = "TopBottom";
        WrapTypeEnum[WrapTypeEnum["Square"] = 'Square'] = "Square";
        WrapTypeEnum[WrapTypeEnum["None"] = 'None'] = "None";
        WrapTypeEnum[WrapTypeEnum["Tight"] = 'Tight'] = "Tight";
        WrapTypeEnum[WrapTypeEnum["Through"] = 'Through'] = "Through";
    })(WrapTypeEnum = DrawingObjectInsert.WrapTypeEnum || (DrawingObjectInsert.WrapTypeEnum = {}));
})(DrawingObjectInsert = exports.DrawingObjectInsert || (exports.DrawingObjectInsert = {}));
// tslint:enable:quotemark
