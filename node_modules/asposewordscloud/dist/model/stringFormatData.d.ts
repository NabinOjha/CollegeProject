import { AttributeInfo } from '../internal/attributeInfo';
export declare const importsMapStringFormatData: {};
/**
 * Allows to specify System.Drawing.StringFormat options.
 */
export declare class StringFormatData {
    /**
     * Attribute type map
     */
    static attributeTypeMap: Array<AttributeInfo>;
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap(): AttributeInfo[];
    /**
     * Gets or sets horizontal alignment of the string.
     */
    alignment: StringFormatData.AlignmentEnum;
    /**
     * Gets or sets a System.Drawing.StringFormatFlags enumeration that contains formatting information.
     */
    formatFlags: StringFormatData.FormatFlagsEnum;
    /**
     * Gets or sets the System.Drawing.Text.HotkeyPrefix object for this System.Drawing.StringFormat object.
     */
    hotkeyPrefix: StringFormatData.HotkeyPrefixEnum;
    /**
     * Gets or sets the vertical alignment of the string.
     */
    lineAlignment: StringFormatData.LineAlignmentEnum;
    /**
     * Gets or sets the System.Drawing.StringTrimming enumeration for this System.Drawing.StringFormat object.
     */
    trimming: StringFormatData.TrimmingEnum;
    constructor(init?: Partial<StringFormatData>);
}
/**
 * Enums for StringFormatData
 */
export declare namespace StringFormatData {
    enum AlignmentEnum {
        Near,
        Center,
        Far
    }
    enum FormatFlagsEnum {
        DirectionRightToLeft,
        DirectionVertical,
        FitBlackBox,
        DisplayFormatControl,
        NoFontFallback,
        MeasureTrailingSpaces,
        NoWrap,
        LineLimit,
        NoClip
    }
    enum HotkeyPrefixEnum {
        None,
        Show,
        Hide
    }
    enum LineAlignmentEnum {
        Near,
        Center,
        Far
    }
    enum TrimmingEnum {
        None,
        Character,
        Word,
        EllipsisCharacter,
        EllipsisWord,
        EllipsisPath
    }
}
