"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fixedPageSaveOptionsData_1 = require("./fixedPageSaveOptionsData");
const graphicsQualityOptionsData_1 = require("./graphicsQualityOptionsData");
const metafileRenderingOptionsData_1 = require("./metafileRenderingOptionsData");
exports.importsMapImageSaveOptionsData = {
    FixedPageSaveOptionsData: fixedPageSaveOptionsData_1.FixedPageSaveOptionsData,
    GraphicsQualityOptionsData: graphicsQualityOptionsData_1.GraphicsQualityOptionsData,
    MetafileRenderingOptionsData: metafileRenderingOptionsData_1.MetafileRenderingOptionsData,
};
/**
 * Container abstract class for image save options.
 */
class ImageSaveOptionsData extends fixedPageSaveOptionsData_1.FixedPageSaveOptionsData {
    constructor(init) {
        super(init);
        Object.assign(this, init);
    }
    /**
     * Returns attribute type map
     */
    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(ImageSaveOptionsData.attributeTypeMap);
    }
}
exports.ImageSaveOptionsData = ImageSaveOptionsData;
/**
 * Attribute type map
 */
ImageSaveOptionsData.attributeTypeMap = [
    {
        name: "graphicsQualityOptions",
        baseName: "GraphicsQualityOptions",
        type: "GraphicsQualityOptionsData",
    },
    {
        name: "horizontalResolution",
        baseName: "HorizontalResolution",
        type: "number",
    },
    {
        name: "imageBrightness",
        baseName: "ImageBrightness",
        type: "number",
    },
    {
        name: "imageColorMode",
        baseName: "ImageColorMode",
        type: "string",
    },
    {
        name: "imageContrast",
        baseName: "ImageContrast",
        type: "number",
    },
    {
        name: "paperColor",
        baseName: "PaperColor",
        type: "string",
    },
    {
        name: "pixelFormat",
        baseName: "PixelFormat",
        type: "string",
    },
    {
        name: "resolution",
        baseName: "Resolution",
        type: "number",
    },
    {
        name: "scale",
        baseName: "Scale",
        type: "number",
    },
    {
        name: "useAntiAliasing",
        baseName: "UseAntiAliasing",
        type: "boolean",
    },
    {
        name: "useGdiEmfRenderer",
        baseName: "UseGdiEmfRenderer",
        type: "boolean",
    },
    {
        name: "useHighQualityRendering",
        baseName: "UseHighQualityRendering",
        type: "boolean",
    },
    {
        name: "verticalResolution",
        baseName: "VerticalResolution",
        type: "number",
    }
];
